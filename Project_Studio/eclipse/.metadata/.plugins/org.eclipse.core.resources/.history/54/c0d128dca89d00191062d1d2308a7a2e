package nl.thestructureworld.entity;

import java.text.DecimalFormat;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.Callable;
import org.lwjgl.input.Keyboard;
import nl.thestructureworld.client.GameProfile;
import nl.thestructureworld.client.KeyAndOtherSettings;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.IngameGui;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListTerrain;
import nl.thestructureworld.client.renderer.terrain.HeightDetection;
import nl.thestructureworld.client.renderer.terrain.Terrain;
import nl.thestructureworld.client.shaders.CameraAndPlayerAnimations;
import nl.thestructureworld.savefile.SaveFileTagCompound;
import nl.thestructureworld.savefile.SaveFileTagDouble;
import nl.thestructureworld.savefile.SaveFileTagFloat;
import nl.thestructureworld.savefile.SaveFileTagList;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.util.AxisAlignedBB;
import nl.thestructureworld.util.DamageSource;
import nl.thestructureworld.util.Direction;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.util.StatCollector;
import nl.thestructureworld.util.Vec3;
import nl.thestructureworld.world.World;
import nl.thestructureworld.world.WorldServer;

public abstract class Entity
{
    private static int nextEntityID;
    private int entityID;

    /**
     * BasicEntityRender entities from spawning when they do their AABB check to make sure the spot is clear of entities that can
     * prevent spawning.
     */
    public boolean preventEntitySpawning;

    /** The entity that is riding this entity */
    public Entity riddenByEntity;

    /** The entity we are currently riding */
    public Entity ridingEntity;
    
    protected boolean isEntityJumping = false;
    
    public boolean forceSpawn;

    /** Reference to the World object. */
    public World worldObj;
    public double prevPosX;
    public double prevPosY;
    public double prevPosZ;

    /** Entity position X */
    public double posX;

    /** Entity position Y */
    public double posY;

    /** Entity position Z */
    public double posZ;

    /** Entity motion X */
    public double motionX;

    /** Entity motion Y */
    public double motionY;

    /** Entity motion Z */
    public double motionZ;

    /** Entity rotation Yaw */
    public float rotationYaw;

    /** Entity rotation Pitch */
    public float rotationPitch;
    public float prevRotationYaw;
    public float prevRotationPitch;

    /** Axis aligned bounding box. */
    public AxisAlignedBB boundingBox;
    public boolean stayingGround;

    /**
     * True if after a move this entity has collided with something on X- or Z-axis
     */
    public boolean isCollidedHorizontally;

    /**
     * True if after a move this entity has collided with something on Y-axis
     */
    public boolean isCollidedVertically;

    /**
     * True if after a move this entity has collided with something either vertically or horizontally
     */
    public boolean isCollided;
    public boolean velocityChanged;
   
    /**
     * Gets set by setDead, so this must be the flag whether an Entity is dead (inactive may be better term)
     */
    public boolean isDead;
    public float eyeOffset;

    /** How wide this entity is considered to be */
    public float widthX;
    
    /** How wide this entity is considered to be */
    public float widthZ;

    /** How high this entity is considered to be */
    public float height;

    public float fallDistance;

    /**
     * The distance that has to be exceeded in order to triger a new step sound and an onEntityWalking event on a TerrainObject
     */
    private int nextStepDistance;

    /**
     * The entity's X coordinate at the previous tick, used to calculate position during rendering routines
     */
    public double lastTickPosX;

    /**
     * The entity's Y coordinate at the previous tick, used to calculate position during rendering routines
     */
    public double lastTickPosY;

    /**
     * The entity's Z coordinate at the previous tick, used to calculate position during rendering routines
     */
    public double lastTickPosZ;
    public float bodyPosition;

    /**
     * How high this entity can step up when running into a TerrainObject to try to get over it
     */
    public float stepHeight;

    public boolean noClip = true;

    /**
     * Reduces the velocity applied by entity collisions by the specified percent.
     */
    public float entityCollisionReduction;
    protected Random rand;

    /** How many ticks has this entity had ran since being alive */
    public int ticksExisted;

    /**
     * Remaining time an entity will be "immune" to further damage after being hurt.
     */
    public int hurtResistantTime;
    private boolean firstUpdate;
    private double entityRiderPitchDelta;
    private double entityRiderYawDelta;

    /** Has this entity been added to the Area its within */
    public boolean addedToArea;
    public int AreaCoordX;
    public int AreaCoordY;
    public int AreaCoordZ;
    public int serverPosX;
    public int serverPosY;
    public int serverPosZ;

    public boolean isAirBorne;

    private boolean invulnerable;
   
    public int getEntityId()
    {
        return this.entityID;
    }

    public void setEntityId(int id)
    {
        this.entityID = id;
    }

    public Entity(World world)
    {
        this.entityID = nextEntityID++;
        this.boundingBox = AxisAlignedBB.getBoundingBox(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
        this.widthX = 0.6F;
        this.widthZ = 0.5F;
        this.height = 1.8F;
        this.nextStepDistance = 1;
        this.rand = new Random();
        this.firstUpdate = true;
        this.worldObj = world;
        this.setPosition(0.0D, 0.0D, 0.0D);
        this.entityInit();
    }

    protected abstract void entityInit();


    /**
     * Will get destroyed next tick.
     */
    public void setDead()
    {
        this.isDead = true;
    }

    /**
     * Sets the width and height of the entity. Args: width, height
     */
    protected void setSize(float x, float z,float y)
    {
        float var3;

        if (x != this.widthX || z != this.widthZ || y != this.height)
        {
            var3 = this.widthX;
            this.widthX = x;
            this.height = y;
            this.widthZ = z;
            this.boundingBox.maxX = this.boundingBox.minX + (double)this.widthX;
            this.boundingBox.maxZ = this.boundingBox.minZ + (double)this.widthZ;
            this.boundingBox.maxY = this.boundingBox.minY + (double)this.height;
            this.Detectionheight.maxY = this.Detectionheight.minY + (double)this.height;
        }
    }

    /**
     * Sets the rotation of the entity
     */
    protected void setRotation(float y, float p)
    {
        this.rotationYaw = y % 360.0F;
        this.rotationPitch = p % 360.0F;
    }

    /**
     * Sets the x,y,z of the entity from the given parameters. Also seems to set up a bounding box.
     */
    public void setPosition(double x, double y, double z)
    {
        this.posX = x;
        this.posY = y;
        this.posZ = z;
        float var7 = this.widthX / 2.0F;
        float var9 = this.widthZ / 2.0F;
        float var8 = this.height;
        this.boundingBox.setBounds(x - (double)var7, y - (double)this.eyeOffset + (double)this.bodyPosition, z - (double)var9, x + (double)var7, y - (double)this.eyeOffset + (double)this.bodyPosition + (double)var8, z + (double)var9);
        this.Detectionheight.setBounds(x - (double)var7, y - (double)this.eyeOffset + (double)this.bodyPosition, z - (double)var9, x + (double)var7, y - (double)this.eyeOffset + (double)this.bodyPosition + (double)var8, z + (double)var9);
    }

    /**
     * Adds par1*0.15 to the entity's yaw, and *subtracts* par2*0.15 from the pitch. Clamps pitch from -90 to 90. Both
     * arguments in degrees.
     */
    public void setAngles(float Yaw, float Pitch)
    {
        float var3 = this.rotationPitch;
        float var4 = this.rotationYaw;
        this.rotationYaw = (float)((double)this.rotationYaw + (double)Yaw * 0.15D);
        this.rotationPitch = (float)((double)this.rotationPitch - (double)Pitch * 0.15D);

        if (this.rotationPitch < -90.0F)
        {
            this.rotationPitch = -90.0F;
        }

        if (this.rotationPitch > 90.0F)
        {
            this.rotationPitch = 90.0F;
        }
        if(this.rotationYaw > 360)
        {
        	this.rotationYaw = 0F;
        }
        else if(this.rotationYaw < 0)
        {
        	this.rotationYaw = 360F;
        }
        
        this.prevRotationPitch += this.rotationPitch - var3;
        this.prevRotationYaw += this.rotationYaw - var4;
    }

    /**
     * Called to update the entity's position/logic.
     */
    public void onUpdate()
    {
        this.onEntityUpdate();
    }

    /**
     * Gets called every tick from main Entity class
     */
    public void onEntityUpdate()
    {   	
        if (this.ridingEntity != null && this.ridingEntity.isDead)
        {
            this.ridingEntity = null;
        }
        if(this.motionX == 0)
        {
        this.movespeedX=0;	
        }
        if(this.motionZ == 0)
        {
        this.movespeedZ=0;	
        }
    
   	 
        this.prevPosX = this.posX;
        this.prevPosY = this.posY;
        this.prevPosZ = this.posZ;
        this.prevRotationPitch = this.rotationPitch;
        this.prevRotationYaw = this.rotationYaw;
        if (this.posY < -1.0D)
        {
            this.kill();
        }
        this.firstUpdate = false;
    }
   
    /**
     * sets the dead flag. Used when you fall off the bottom of the world.
     */
    protected void kill()
    {
        this.setDead();
    }

    public void setJumping(boolean j)
    {
        this.isEntityJumping = j;
    }
    
    public boolean getJumping()
    {
    	return this.isEntityJumping;
    }
    

    private boolean movePlayer = true;
    
    public void setMovePlayer(boolean move)
    {
    	this.movePlayer = move;
    }
    
    public boolean getMovePlayer()
    {
    	return this.movePlayer;
    }
    
    private float moveToX;
    private float moveToY;
    private float moveToZ;
    
    public float getMoveX()
    {
    	return this.moveToX;
    }
    
    public float getMoveY()
    {
    	return this.moveToY;
    }
    
    public float getMoveZ()
    {
    	return this.moveToZ;
    }
    
    public void setMoveX(float x)
    {
    	this.moveToX = x;
    }
    
    public void setMoveY(float y)
    {
    	this.moveToY = y;
    }
    
    public void setMoveZ(float z)
    {
    	this.moveToZ = z;
    }
    
    /**
     * Tries to move the entity. Args: x, y, z as doubles
     */
    public void moveEntity(double x, double y, double z)
    {
    	if(x > 0||x < 0||y > 0||y < 0||z > 0||z < 0 || this.hasMoved || this.isCrouching() || this.isLayingdown())
    	{
    		this.moveToX = (float) x;
    		this.moveToY = (float) y;
    		this.moveToZ = (float) z;
    		if(this.getMovePlayer())
    		{
    			this.move(this.moveToX,this.moveToY,this.moveToZ,false);
    		}
    	}
    }

    public double heightTerrainOnThisCoords = 154;
  
    public HeightDetection Detectionheight = new HeightDetection(0, 154, 0, 0, 155, 0);
    public float highFall = 0;
    public double movespeedX,movespeedZ;
    public int isInArea = 4;
    public boolean standUpAnimation = false;
    
    public static String[] coords4;
    public static String[] coords5;
    public static String[] coords6;
    public static String[] coords7;
    public static String[] coords8;
    public static String[] coords9;
    public static String[] coords10;
    public static String[] coords11;
    public static String[] coords12;
    public List<ArrayListTerrain> inArea;
    
    public float extraHeight = 0F;
    
    public boolean isInContactWithObject = false;

    
    public void move(double x, double y, double z,boolean standardMotion)
    {     
    	if(Entity.coords4!=null)
    	{
    	if(this.posX > Integer.parseInt(coords4[0])-5 && this.posX < Integer.parseInt(coords4[0])+5 && this.posZ > Integer.parseInt(coords4[1])-5 && this.posZ < Integer.parseInt(coords4[1])+5)
    	{
    		this.isInArea = 4;
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain4;
    	}
    	else if(this.posX > Integer.parseInt(coords5[0])-5 && this.posX < Integer.parseInt(coords5[0])+5 && this.posZ > Integer.parseInt(coords5[1])-5 && this.posZ < Integer.parseInt(coords5[1])+5)
    	{
    		this.isInArea = 5;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain5;
    	}
    	else if(this.posX > Integer.parseInt(coords6[0])-5 && this.posX < Integer.parseInt(coords6[0])+5 && this.posZ > Integer.parseInt(coords6[1])-5 && this.posZ < Integer.parseInt(coords6[1])+5)
    	{
    		this.isInArea = 6;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain6;
    	}
    	else if(this.posX > Integer.parseInt(coords7[0])-5 && this.posX < Integer.parseInt(coords7[0])+5 && this.posZ > Integer.parseInt(coords7[1])-5 && this.posZ < Integer.parseInt(coords7[1])+5)
    	{
    		this.isInArea = 7;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain7;
    	}
    	else if(this.posX > Integer.parseInt(coords8[0])-5 && this.posX < Integer.parseInt(coords8[0])+5 && this.posZ > Integer.parseInt(coords8[1])-5 && this.posZ < Integer.parseInt(coords8[1])+5)
    	{
    		this.isInArea = 8;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain8;
    	}
    	else if(this.posX > Integer.parseInt(coords9[0])-5 && this.posX < Integer.parseInt(coords9[0])+5 && this.posZ > Integer.parseInt(coords9[1])-5 && this.posZ < Integer.parseInt(coords9[1])+5)
    	{
    		this.isInArea = 9;
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain9;
    	}
    	else if(this.posX > Integer.parseInt(coords10[0])-5 && this.posX < Integer.parseInt(coords10[0])+5 && this.posZ > Integer.parseInt(coords10[1])-5 && this.posZ < Integer.parseInt(coords10[1])+5)
    	{
    		this.isInArea = 10;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain10;
    	}
    	else if(this.posX > Integer.parseInt(coords11[0])-5 && this.posX < Integer.parseInt(coords11[0])+5 && this.posZ > Integer.parseInt(coords11[1])-5 && this.posZ < Integer.parseInt(coords11[1])+5)
    	{
    		this.isInArea = 11;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain11;
    	}
    	else if(this.posX > Integer.parseInt(coords12[0])-5 && this.posX < Integer.parseInt(coords12[0])+5 && this.posZ > Integer.parseInt(coords12[1])-5 && this.posZ < Integer.parseInt(coords12[1])+5)
    	{
    		this.isInArea = 12;	
    		this.inArea = EntityRenderer.worldRenderer.ArrayListTerrain12;
    	}
    	}
        
    	int XX = (int)x - ((int)(x/10D) * 10);
    	
 		int ZZ = (int)z - ((int)(z/10D) * 10);
 		
 		if(!this.isInContactWithObject)
 		{
 			this.extraHeight = 0;
 		}
 		
 		double Height;
 		if(Terrain.worldMap != null)
 		{
 			Height = this.extraHeight + (((((Terrain.getHeightFromMap((int)this.posX+6,(int)this.posZ+6,false,null) + Terrain.getHeightFromMap((int)this.posX+7,(int)this.posZ+6,false,null) + Terrain.getHeightFromMap((int)this.posX+6,(int)this.posZ+7,false,null) + Terrain.getHeightFromMap((int)this.posX+7,(int)this.posZ+7,false,null))) / 4)+ this.eyeOffset) - 1D);
 		}
 		else
 		{
 			Height = 0;
 		}
 		double Y = this.posY;
    
 		if(Y > Height && this.jumpTimer == 0 && this.fallTimer == 0)
    	{
    		this.fallTimer = 250;
    	}
 		else if(this.isEntityJumping && this.jumpTimer == 0 && this.canJumpAgain == 0)
    	{
    		this.jumpTimer = 15;
    		this.isEntityJumping = false;
    	}
 		else if(Y < Height)
 		{
 			double d = 0.25D * (Height - Y);
 	        DecimalFormat df = new DecimalFormat("#.#####");
 			this.posY += Double.parseDouble(df.format(d).replace(",","."));
 		}
 		
    	for(int i=0;i<2;++i)
    	{
    		if(this.fallTimer > 0)
    		{
    			if(this.fallTimer > 1)
    			{
    				--this.fallTimer;
    			}
    			
    			this.posY += (0.001D - ((250 - this.fallTimer) * 0.01D)) * 6 * (worldObj.StructureWorldInfo.gravity / 10D);
    			
    			if(this.posY - 0.1 < Height)
    			{
    				this.fallTimer = 0;
    			}
    		}
    	}

    	for(int i=0;i < 2;++i)
    	{
    		if(this.jumpTimer > 0)
    		{
    			--this.jumpTimer;
    			this.posY += ((0.015D * (this.jumpTimer))) / (worldObj.StructureWorldInfo.gravity / 10D);
    		}
    	}
    	
    	if(this.jumpTimer == 1)
    	{
    		this.canJumpAgain = 18;
    	}
    	
    	if(this.canJumpAgain > 0)
    	{
    		--this.canJumpAgain;
    	}
    	
        this.movespeedX = x;
   	 	
   	 	this.movespeedZ = z;
		
		this.posX += x;
		
		
        if(x < 0)
        {
        	x = -x;
        }
        
        this.posZ += z;
		
        
   	 	if(z < 0)
   	 	{
   	 		z = -z;
   	 	}
        	
    }
    
    public int jumpTimer = 0;
    public int fallTimer = 0;
    public int canJumpAgain = 0;


    public double X = -5000000;
    public double Z = -5000000;
    public boolean hasMoved = false;
    public float coordCode = 0;
    public int onWorldLoad = 0;
    
    public void move()
    {
    	if(this.onWorldLoad<10)
    	{
    		++this.onWorldLoad;
    		this.coordCode = (float)(this.posX+this.posY+this.posZ);
    		this.hasMoved = true;
    	}
    	
    	if(this.onWorldLoad>9)
    	{
    		if(this.X != this.posX || this.Z != this.posZ)
    		{
    			if(this.motionX == 0)
    			{
    				this.X = this.posX;
    				this.Z = this.posZ;
    			}
    			if(!this.hasMoved)
    			{
    				this.hasMoved = true;
    			}
    			this.coordCode = (float)(this.posX+this.posY+this.posZ);
    		}
    		else if(this.hasMoved)
    		{
    			this.hasMoved = false;
    		}
    	}
      }

    /**
     * Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
     * and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
     */
    protected void updateFallState(double funci_70064_1_, boolean funci_70064_3_)
    {
        if (funci_70064_3_)
        {
            if (this.fallDistance > 0.0F)
            {
                this.fall(this.fallDistance);
                this.fallDistance = 0.0F;
            }
        }
        else if (funci_70064_1_ < 0.0D)
        {
            this.fallDistance = (float)((double)this.fallDistance - funci_70064_1_);
        }
    }

    /**
     * returns the bounding box for this entity
     */
    public AxisAlignedBB getBoundingBox()
    {
        return null;
    }

  
    /**
     * Called when the mob is falling. Calculates and applies fall damage.
     */
    protected void fall(float f)
    {
        if (this.riddenByEntity != null)
        {
            this.riddenByEntity.fall(f);
        }
    }

    public float getEyeHeight()
    {
        return 2.0F;
    }

    /**
     * Used in both water and by flying objects
     */
    public void moveFlying(float x, float y, float z)
    {
        float var4 = x * x + y * y;

        if (var4 >= 1.0E-4F)
        {
            var4 = MathHelper.sqrt_float(var4);

            if (var4 < 1.0F)
            {
                var4 = 1.0F;
            }

            var4 = z / var4;
            x *= var4;
            y *= var4;
            float var5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
            float var6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
            this.motionX += (double)(x * var6 - y * var5);
            this.motionZ += (double)(y * var6 + x * var5);
        }
    }

 
    /**
     * Sets the reference to the World object.
     */
    public void setWorld(World w)
    {
        this.worldObj = w;
    }

    /**
     * Sets the entity's position and rotation. Args: posX, posY, posZ, yaw, pitch
     */
    public void setPositionAndRotation(double funci_70080_1_, double funci_70080_3_, double funci_70080_5_, float funci_70080_7_, float funci_70080_8_)
    {
        this.prevPosX = this.posX = funci_70080_1_;
        this.prevPosY = this.posY = funci_70080_3_;
        this.prevPosZ = this.posZ = funci_70080_5_;
        this.prevRotationYaw = this.rotationYaw = funci_70080_7_;
        this.prevRotationPitch = this.rotationPitch = funci_70080_8_;
        double var9 = (double)(this.prevRotationYaw - funci_70080_7_);

        if (var9 < -180.0D)
        {
            this.prevRotationYaw += 360.0F;
        }

        if (var9 >= 180.0D)
        {
            this.prevRotationYaw -= 360.0F;
        }

        this.setPosition(this.posX, this.posY, this.posZ);
        this.setRotation(funci_70080_7_, funci_70080_8_);
    }

    /**
     * Sets the location and Yaw/Pitch of an entity in the world
     */
    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
    {
        this.lastTickPosX = this.prevPosX = this.posX = x;
        this.lastTickPosY = this.prevPosY = this.posY = y + (double)this.eyeOffset;
        this.lastTickPosZ = this.prevPosZ = this.posZ = z;
        this.rotationYaw = yaw;
        this.rotationPitch = pitch;
        this.setPosition(this.posX, this.posY, this.posZ);
    }

    /**
     * Returns the distance to the entity. Args: entity
     */
    public float getDistanceToEntity(Entity ent)
    {
        float var2 = (float)(this.posX - ent.posX);
        float var3 = (float)(this.posY - ent.posY);
        float var4 = (float)(this.posZ - ent.posZ);
        return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
    }

    /**
     * Gets the squared distance to the position. Args: x, y, z
     */
    public double getDistanceSq(double funci_70092_1_, double funci_70092_3_, double funci_70092_5_)
    {
        double var7 = this.posX - funci_70092_1_;
        double var9 = this.posY - funci_70092_3_;
        double var11 = this.posZ - funci_70092_5_;
        return var7 * var7 + var9 * var9 + var11 * var11;
    }

    /**
     * Gets the distance to the position. Args: x, y, z
     */
    public double getDistance(double funci_70011_1_, double funci_70011_3_, double funci_70011_5_)
    {
        double var7 = this.posX - funci_70011_1_;
        double var9 = this.posY - funci_70011_3_;
        double var11 = this.posZ - funci_70011_5_;
        return (double)MathHelper.sqrt_double(var7 * var7 + var9 * var9 + var11 * var11);
    }

    /**
     * Returns the squared distance to the entity. Args: entity
     */
    public double getDistanceSqToEntity(Entity funci_70068_1_)
    {
        double var2 = this.posX - funci_70068_1_.posX;
        double var4 = this.posY - funci_70068_1_.posY;
        double var6 = this.posZ - funci_70068_1_.posZ;
        return var2 * var2 + var4 * var4 + var6 * var6;
    }

    /**
     * Called by a player entity when they collide with an entity
     */
    public void onCollideWithPlayer(EntityPlayer funci_70100_1_) {}

    /**
     * Applies a velocity to each of the entities pushing them away from each other. Args: entity
     */
    public void applyEntityCollision(Entity funci_70108_1_)
    {
        if (funci_70108_1_.riddenByEntity != this && funci_70108_1_.ridingEntity != this)
        {
            double var2 = funci_70108_1_.posX - this.posX;
            double var4 = funci_70108_1_.posZ - this.posZ;
            double var6 = MathHelper.abs_max(var2, var4);

            if (var6 >= 0.009999999776482582D)
            {
                var6 = (double)MathHelper.sqrt_double(var6);
                var2 /= var6;
                var4 /= var6;
                double var8 = 1.0D / var6;

                if (var8 > 1.0D)
                {
                    var8 = 1.0D;
                }

                var2 *= var8;
                var4 *= var8;
                var2 *= 0.05000000074505806D;
                var4 *= 0.05000000074505806D;
                var2 *= (double)(1.0F - this.entityCollisionReduction);
                var4 *= (double)(1.0F - this.entityCollisionReduction);
                this.addVelocity(-var2, 0.0D, -var4);
                funci_70108_1_.addVelocity(var2, 0.0D, var4);
            }
        }
    }

    /**
     * Adds to the current velocity of the entity. Args: x, y, z
     */
    public void addVelocity(double funci_70024_1_, double funci_70024_3_, double funci_70024_5_)
    {
        this.motionX += funci_70024_1_;
        this.motionY += funci_70024_3_;
        this.motionZ += funci_70024_5_;
        this.isAirBorne = true;
    }

    /**
     * Sets that this entity has been attacked.
     */
    protected void setBeenAttacked()
    {
        this.velocityChanged = true;
    }

    /**
     * Called when the entity is attacked.
     */
    public boolean attackEntityFrom(DamageSource funci_70097_1_, float funci_70097_2_)
    {
        if (this.isEntityInvulnerable())
        {
            return false;
        }
        else
        {
            this.setBeenAttacked();
            return false;
        }
    }

    /**
     * Returns true if other Entities should be prevented from moving through this Entity.
     */
    public boolean canBeCollidedWith()
    {
        return false;
    }

    /**
     * Returns true if this entity should push and be pushed by other entities when colliding.
     */
    public boolean canBePushed()
    {
        return false;
    }

    /**
     * Adds a value to the player score. Currently not actually used and the entity passed in does nothing. Args:
     * entity, scoreToAdd
     */
    public void addToPlayerScore(Entity funci_70084_1_, int funci_70084_2_) {}

    public boolean isInRangeToRender3d(double funci_145770_1_, double funci_145770_3_, double funci_145770_5_)
    {
        double var7 = this.posX - funci_145770_1_;
        double var9 = this.posY - funci_145770_3_;
        double var11 = this.posZ - funci_145770_5_;
        double var13 = var7 * var7 + var9 * var9 + var11 * var11;
        return this.isInRangeToRenderDist(var13);
    }

    /**
     * Checks if the entity is in range to render by using the past in distance and comparing it to its average edge
     * length * 64 * renderDistanceWeight Args: distance
     */
    public boolean isInRangeToRenderDist(double funci_70112_1_)
    {
        double var3 = this.boundingBox.getAverageEdgeLength();
        var3 *= 64.0D * 1.0D;
        return funci_70112_1_ < var3 * var3;
    }

       /**
     * Save the entity to SaveFile (calls an abstract helper method to write extra data)
     */
    public void writeToSaveFile(SaveFileTagCompound funci_70109_1_)
    {
        try
        {
        	DecimalFormat df = new DecimalFormat("#.####");
          	this.posX = Double.parseDouble(df.format(this.posX).replace(",", "."));
          	this.posZ = Double.parseDouble(df.format(this.posZ).replace(",", "."));
          	this.posZ = Double.parseDouble(df.format(this.posZ).replace(",", "."));
            funci_70109_1_.setTag("Pos", this.newDoubleSaveFileList(new double[] {this.posX, this.posY + 0.2D, this.posZ}));
            funci_70109_1_.setTag("Motion", this.newDoubleSaveFileList(new double[] {this.motionX, this.motionY, this.motionZ}));
            funci_70109_1_.setTag("Rotation", this.newFloatSaveFileList(new float[] {this.rotationYaw, this.rotationPitch}));
            funci_70109_1_.setFloat("FallDistance", this.fallDistance);
            funci_70109_1_.setBoolean("OnGround", this.stayingGround);
            funci_70109_1_.setBoolean("Invulnerable", this.invulnerable);
            this.writeEntityToSaveFile(funci_70109_1_);

            if (this.ridingEntity != null)
            {
                SaveFileTagCompound var2 = new SaveFileTagCompound();

                if (this.ridingEntity.writeMountToSaveFile(var2))
                {
                    funci_70109_1_.setTag("Riding", var2);
                }
            }
        }
        catch (Throwable var5)
        {
            System.out.println("[Client/Server thread/ERROR]: Entity SaveFile being saved "+var5.getMessage());
        }
    }

    /**
     * Reads the entity from SaveFile (calls an abstract helper method to read specialized data)
     */
    public void readFromSaveFile(SaveFileTagCompound tc)
    {
        try
        {
        	SaveFileTagList var2 = tc.getTagList("Pos", 6);
        	SaveFileTagList var6 = tc.getTagList("Motion", 6);
        	SaveFileTagList var7 = tc.getTagList("Rotation", 5);
            this.motionX = var6.tsw_funci_150309_d(0);
            this.motionY = var6.tsw_funci_150309_d(1);
            this.motionZ = var6.tsw_funci_150309_d(2);

            if (Math.abs(this.motionX) > 10.0D)
            {
                this.motionX = 0.0D;
            }

            if (Math.abs(this.motionY) > 10.0D)
            {
                this.motionY = 0.0D;
            }

            if (Math.abs(this.motionZ) > 10.0D)
            {
                this.motionZ = 0.0D;
            }

            this.prevPosX = this.lastTickPosX = this.posX = var2.tsw_funci_150309_d(0);
            this.prevPosY = this.lastTickPosY = this.posY = var2.tsw_funci_150309_d(1) + 0.1D;
            this.prevPosZ = this.lastTickPosZ = this.posZ = var2.tsw_funci_150309_d(2);
            this.prevRotationYaw = this.rotationYaw = var7.tsw_funci_150308_e(0);
            this.prevRotationPitch = this.rotationPitch = var7.tsw_funci_150308_e(1);
            this.fallDistance = tc.getFloat("FallDistance");
            this.stayingGround = tc.getBoolean("OnGround");
            this.invulnerable = tc.getBoolean("Invulnerable");
            this.setPosition(this.posX, this.posY, this.posZ);	
            DecimalFormat df = new DecimalFormat("#.####");
        	this.posX = Double.parseDouble(df.format(this.posX).replace(",", "."));
        	this.posZ = Double.parseDouble(df.format(this.posZ).replace(",", "."));
        	this.posZ = Double.parseDouble(df.format(this.posZ).replace(",", "."));
            this.setRotation(this.rotationYaw, this.rotationPitch);
            this.readEntityFromSaveFile(tc);

        }
        catch (Throwable t)
        {
        	 System.out.println("[Client/Server thread/ERROR]Entity SaveFile being loaded "+t.getMessage());
        }
    }

    /**
     * (abstract) Protected helper method to read subclass entity data from SaveFile.
     */
    protected abstract void readEntityFromSaveFile(SaveFileTagCompound funci_70037_1_);

    /**
     * (abstract) Protected helper method to write subclass entity data to SaveFile.
     */
    protected abstract void writeEntityToSaveFile(SaveFileTagCompound funci_70014_1_);

    public void onAreaLoad() {}

    /**
     * creates a SaveFile list from the array of doubles passed to this tsw_funcition
     */
    protected SaveFileTagList newDoubleSaveFileList(double ... funci_70087_1_)
    {
    	SaveFileTagList var2 = new SaveFileTagList();
        double[] var3 = funci_70087_1_;
        int var4 = funci_70087_1_.length;

        for (int var5 = 0; var5 < var4; ++var5)
        {
            double var6 = var3[var5];
            var2.appendTag(new SaveFileTagDouble(var6));
        }

        return var2;
    }

    /**
     * Returns a new SaveFileTagList filled with the specified floats
     */
    protected SaveFileTagList newFloatSaveFileList(float ... funci_70049_1_)
    {
    	SaveFileTagList var2 = new SaveFileTagList();
        float[] var3 = funci_70049_1_;
        int var4 = funci_70049_1_.length;

        for (int var5 = 0; var5 < var4; ++var5)
        {
            float var6 = var3[var5];
            var2.appendTag(new SaveFileTagFloat(var6));
        }

        return var2;
    }

    public float getShadowSize()
    {
        return this.height / 2.0F;
    }

   

    /**
     * Checks whether target entity is alive.
     */
    public boolean isEntityAlive()
    {
        return !this.isDead;
    }

    /**
     * First layer of player interaction
     */
    public boolean interactFirst(EntityPlayer funci_130002_1_)
    {
        return false;
    }

    /**
     * Returns a boundingBox used to collide the entity with other entities and TerrainObject. This enables the entity to be
     * pushable on contact, like boats or minecarts.
     */
    public AxisAlignedBB getCollisionBox(Entity funci_70114_1_)
    {
        return null;
    }

    /**
     * Handles updating while being ridden by an entity
     */
    public void updateRidden()
    {
        if (this.ridingEntity.isDead)
        {
            this.ridingEntity = null;
        }
        else
        {
            this.motionX = 0.0D;
            this.motionY = 0.0D;
            this.motionZ = 0.0D;
            this.onUpdate();

            if (this.ridingEntity != null)
            {
                this.ridingEntity.updateRiderPosition();
                this.entityRiderYawDelta += (double)(this.ridingEntity.rotationYaw - this.ridingEntity.prevRotationYaw);

                for (this.entityRiderPitchDelta += (double)(this.ridingEntity.rotationPitch - this.ridingEntity.prevRotationPitch); this.entityRiderYawDelta >= 180.0D; this.entityRiderYawDelta -= 360.0D)
                {
                    ;
                }

                while (this.entityRiderYawDelta < -180.0D)
                {
                    this.entityRiderYawDelta += 360.0D;
                }

                while (this.entityRiderPitchDelta >= 180.0D)
                {
                    this.entityRiderPitchDelta -= 360.0D;
                }

                while (this.entityRiderPitchDelta < -180.0D)
                {
                    this.entityRiderPitchDelta += 360.0D;
                }

                double var1 = this.entityRiderYawDelta * 0.5D;
                double var3 = this.entityRiderPitchDelta * 0.5D;
                float var5 = 10.0F;

                if (var1 > (double)var5)
                {
                    var1 = (double)var5;
                }

                if (var1 < (double)(-var5))
                {
                    var1 = (double)(-var5);
                }

                if (var3 > (double)var5)
                {
                    var3 = (double)var5;
                }

                if (var3 < (double)(-var5))
                {
                    var3 = (double)(-var5);
                }

                this.entityRiderYawDelta -= var1;
                this.entityRiderPitchDelta -= var3;
            }
        }
    }

    public void updateRiderPosition()
    {
        if (this.riddenByEntity != null)
        {
            this.riddenByEntity.setPosition(this.posX, this.posY + this.getMountedeyeOffset() + this.riddenByEntity.geteyeOffset(), this.posZ);
        }
    }

    /**
     * Returns the Y Offset of this entity.
     */
    public double geteyeOffset()
    {
        return (double)this.eyeOffset;
    }

    /**
     * Returns the Y offset from the entity's position for any entity riding this one.
     */
    public double getMountedeyeOffset()
    {
        return (double)this.height * 0.75D;
    }

    /**
     * Called when a player mounts an entity. e.g. mounts a pig, mounts a boat.
     */
    public void mountEntity(Entity ent)
    {
            this.ridingEntity = ent;
            ent.riddenByEntity = this;
    }

    /**
     * Sets the position and rotation. Only difference from the other one is no bounding on the rotation. Args: posX,
     * posY, posZ, yaw, pitch
     */
    public void setPositionAndRotation(double px, double py, double pz, float yaw, float pitch, int justmakesdifferencenotused)
    {
        this.setPosition(px, py, pz);
        this.setRotation(yaw, pitch);
    }

    public float getCollisionBorderSize()
    {
        return 0.1F;
    }

    /**
     * returns a (normalized) vector of where this entity is looking
     */
    public Vec3 getLookVec()
    {
        return null;
    }

    /**
     * Sets the velocity to the args. Args: x, y, z
     */
    public void setVelocity(double mx, double my, double mz)
    {
        this.motionX = mx;
        this.motionY = my;
        this.motionZ = mz;
    }

    public void handleHealthUpdate(byte b) {}

    /**
     * Setups the entity to do the hurt animation. Only used by packets in multiplayer.
     */
    public void performHurtAnimation() {}

    /**
     * Returns true if the entity is riding another entity, used by render to rotate the legs to be in 'sit' position
     * for players.
     */
    public boolean isRiding()
    {
        return this.ridingEntity != null;
    }

    
    public boolean Crouching;
    public boolean layingDown;
    public boolean running = false;
    
    public void setCrouching(boolean Crouching)
    {
         this.Crouching = Crouching;
    }
    
    /**
     * Get and set Player Movement ability's
     */   
    public boolean isCrouching()
    {
        return this.Crouching;
    }
    
    public boolean isRunning()
    {
    	return this.running;
    }
    
    public void setRunning(boolean running)
    {
    	this.running = running;
    }
    
    public boolean isLayingdown()
    {
        return this.layingDown;
    }
    
    public void setLayingdown(boolean layingDown)
    {
        this.layingDown = layingDown;
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    





    /**
     * This method gets called when the entity kills another one.
     */
    public void onKillEntity(EntityLivingBase funci_70074_1_) {}

    /**
     * Returns true if Entity argument is equal to this Entity
     */
    public boolean isEntityEqual(Entity e)
    {
        return this == e;
    }

    public float getRotationYawHead()
    {
        return 0.0F;
    }

    /**
     * Sets the head's yaw rotation of the entity.
     */
    public void setRotationYawHead(float f) {}

    /**
     * If returns false, the item will not inflict any damage against entities.
     */
    public boolean canAttackWithItem()
    {
        return true;
    }

    /**
     * Called when a player attacks an entity. If this returns true the attack will not happen.
     */
    public boolean hitByEntity(Entity e)
    {
        return false;
    }


    /**
     * Return whether this entity is invulnerable to damage.
     */
    public boolean isEntityInvulnerable()
    {
        return this.invulnerable;
    }

    /**
     * Sets this entity's location and angles to the location and angles of the passed in entity.
     */
    public void copyLocationAndAnglesFrom(Entity ent)
    {
        this.setLocationAndAngles(ent.posX, ent.posY, ent.posZ, ent.rotationYaw, ent.rotationPitch);
    }

    /**
     * Copies important data from another entity to this entity. Used when teleporting entities between worlds, as this
     * actually deletes the teleporting entity and re-creates it on the other side. Params: Entity to copy from, unused
     * (always true)
     */
    public void copyDataFrom(Entity ent, boolean b)
    {
        SaveFileTagCompound t = new SaveFileTagCompound();
        ent.writeToSaveFile(t);
        this.readFromSaveFile(t);
    }
}
