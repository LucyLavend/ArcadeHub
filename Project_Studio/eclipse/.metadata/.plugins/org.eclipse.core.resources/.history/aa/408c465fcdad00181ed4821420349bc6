package nl.thestructureworld.client.multiplayer;

import io.netty.util.concurrent.GenericFutureListener;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;

import nl.thestructureworld.client.GameSettings;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.DisconnectedGui;
import nl.thestructureworld.client.gui.MainMenuGui;
import nl.thestructureworld.client.gui.GuiMultiplayer;
import nl.thestructureworld.client.gui.GuiPlayerInfo;
import nl.thestructureworld.client.gui.GuiScreen;
import nl.thestructureworld.client.gui.GuiYesNo;
import nl.thestructureworld.client.gui.GuiYesNoCallback;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityItem;
import nl.thestructureworld.entity.EntityList;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.player.EntityClientPlayerMP;
import nl.thestructureworld.entity.player.EntityOtherPlayerMP;
import nl.thestructureworld.entity.player.InventoryPlayer;
import nl.thestructureworld.inventory.Container;
import nl.thestructureworld.inventory.InventoryBasic;
import nl.thestructureworld.item.Item;
import nl.thestructureworld.item.ItemData;
import nl.thestructureworld.network.EnumConnectionState;
import nl.thestructureworld.network.NetworkManager;
import nl.thestructureworld.network.Packet;
import nl.thestructureworld.network.play.INetHandlerPlayClient;
import nl.thestructureworld.network.play.client.C00PacketKeepAlive;
import nl.thestructureworld.network.play.client.C03PacketPlayer;
import nl.thestructureworld.network.play.client.C0FPacketConfirmTransaction;
import nl.thestructureworld.network.play.client.C17PacketCustomPayload;
import nl.thestructureworld.network.play.server.S00PacketKeepAlive;
import nl.thestructureworld.network.play.server.S01PacketJoinGame;
import nl.thestructureworld.network.play.server.S03PacketTimeUpdate;
import nl.thestructureworld.network.play.server.S04PacketEntityEquipment;
import nl.thestructureworld.network.play.server.S05PacketSpawnPosition;
import nl.thestructureworld.network.play.server.S06PacketUpdateHealth;
import nl.thestructureworld.network.play.server.S07PacketRespawn;
import nl.thestructureworld.network.play.server.S08PacketPlayerPosLook;
import nl.thestructureworld.network.play.server.S09PacketHeldItemChange;
import nl.thestructureworld.network.play.server.S0BPacketAnimation;
import nl.thestructureworld.network.play.server.S0CPacketSpawnPlayer;
import nl.thestructureworld.network.play.server.S0DPacketCollectItem;
import nl.thestructureworld.network.play.server.S0EPacketSpawnObject;
import nl.thestructureworld.network.play.server.S0FPacketSpawnMob;
import nl.thestructureworld.network.play.server.S12PacketEntityVelocity;
import nl.thestructureworld.network.play.server.S13PacketDestroyEntities;
import nl.thestructureworld.network.play.server.S14PacketEntity;
import nl.thestructureworld.network.play.server.S18PacketEntityTeleport;
import nl.thestructureworld.network.play.server.S19PacketEntityHeadLook;
import nl.thestructureworld.network.play.server.S19PacketEntityStatus;
import nl.thestructureworld.network.play.server.S1BPacketEntityAttach;
import nl.thestructureworld.network.play.server.S1CPacketEntityMetadata;
import nl.thestructureworld.network.play.server.S21PacketAreaData;
import nl.thestructureworld.network.play.server.S22PacketMultiTerrainObjectChange;
import nl.thestructureworld.network.play.server.S23PacketTerrainObjectChange;
import nl.thestructureworld.network.play.server.S24PacketTerrainObjectAction;
import nl.thestructureworld.network.play.server.S26PacketMapAreaBulk;
import nl.thestructureworld.network.play.server.S27PacketExplosion;
import nl.thestructureworld.network.play.server.S28PacketEffect;
import nl.thestructureworld.network.play.server.S29PacketSoundEffect;
import nl.thestructureworld.network.play.server.S2BPacketChangeGameState;
import nl.thestructureworld.network.play.server.S2DPacketOpenWindow;
import nl.thestructureworld.network.play.server.S2EPacketCloseWindow;
import nl.thestructureworld.network.play.server.S2FPacketSetSlot;
import nl.thestructureworld.network.play.server.S30PacketWindowItems;
import nl.thestructureworld.network.play.server.S31PacketWindowProperty;
import nl.thestructureworld.network.play.server.S32PacketConfirmTransaction;
import nl.thestructureworld.network.play.server.S35PacketUpdateTileEntity;
import nl.thestructureworld.network.play.server.S38PacketPlayerListItem;
import nl.thestructureworld.network.play.server.S39PacketPlayerAbilities;
import nl.thestructureworld.network.play.server.S3FPacketCustomPayload;
import nl.thestructureworld.network.play.server.S40PacketDisconnect;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.tileentity.TileEntity;


import nl.thestructureworld.util.AreaCoordinates;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.world.Explosion;
import nl.thestructureworld.world.WorldProviderSurface;
import nl.thestructureworld.world.WorldSettings;
import nl.thestructureworld.world.area.Area;
import nl.thestructureworld.world.storage.ISaveHandler;
import nl.thestructureworld.world.storage.MapStorage;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.common.base.Charsets;

import nl.thestructureworld.account.GameProfile;

public class NetHandlerPlayClient implements INetHandlerPlayClient
{
    private static final Logger logger = LogManager.getLogger();

    /**
     * The NetworkManager instance used to communicate with the server (used only by handlePlayerPosLook to update
     * positioning and handleJoinGame to inform the server of the client distribution/mods)
     */
    private final NetworkManager netManager;

    /**
     * Reference to the TheStructureWorld instance, which many handler methods operate on
     */
    private TheStructureWorld gameController;

    /**
     * Reference to the current ClientWorld instance, which many handler methods operate on
     */
    private WorldClient clientWorldController;

    /**
     * True if the client has finished downloading terrain and may spawn. Set upon receipt of S08PacketPlayerPosLook,
     * reset upon respawning
     */
    private boolean doneLoadingTerrain;

    /**
     * Origin of the central MapStorage serving as a public reference for WorldClient. Not used in this class
     */
    public MapStorage mapStorageOrigin = new MapStorage((ISaveHandler)null);

    /**
     * A mapping from player names to their respective GuiPlayerInfo (specifies the clients response time to the server)
     */
    private Map playerInfoMap = new HashMap();

    /**
     * An ArrayList of GuiPlayerInfo (includes all the players' GuiPlayerInfo on the current server)
     */
    public List playerInfoList = new ArrayList();
    public int currentServerMaxPlayers = 20;

    /**
     * Seems to be either null (integrated server) or an instance of either GuiMultiplayer (when connecting to a server)
     * or GuiScreenReamlsTOS (when connecting to MCO server)
     */
    private GuiScreen guiScreenServer;
    private boolean field_147308_k = false;

    /**
     * Just an ordinary random number generator, used to randomize audio pitch of item/orb pickup and randomize both
     * particlespawn offset and velocity
     */
    private Random avRandomizer = new Random();

    public NetHandlerPlayClient(TheStructureWorld p_i45061_1_, GuiScreen p_i45061_2_, NetworkManager p_i45061_3_)
    {
        this.gameController = p_i45061_1_;
        this.guiScreenServer = p_i45061_2_;
        this.netManager = p_i45061_3_;
    }

    /**
     * Clears the WorldClient instance associated with this NetHandlerPlayClient
     */
    public void cleanup()
    {
        this.clientWorldController = null;
    }

    /**
     * For scheduled network tasks. Used in NetHandlerPlayServer to send keep-alive packets and in NetHandlerLoginServer
     * for a login-timeout
     */
    public void onNetworkTick() {}

    /**
     * Registers some server properties (gametype,hardcore-mode,terraintype,difficulty,player limit), creates a new
     * WorldClient and sets the player initial dimension
     */
    public void handleJoinGame(S01PacketJoinGame joinPacket)
    {
        this.gameController.playerController = new PlayerControllerMP(this.gameController, this);
        this.clientWorldController = new WorldClient(this, new WorldSettings(joinPacket.info), joinPacket.getDifficulty());
        this.clientWorldController.isClient = true;
        this.gameController.loadWorld(this.clientWorldController);
        this.gameController.thePlayer.setEntityId(joinPacket.getID());
        this.currentServerMaxPlayers = joinPacket.func_149193_h();
        this.gameController.playerController.setGameType(joinPacket.getGameType());
        this.gameController.gameSettings.sendSettingsToServer();
        this.netManager.scheduleOutboundPacket(new C17PacketCustomPayload("Brand", new String("vanilla").getBytes(Charsets.UTF_8)), new GenericFutureListener[0]);
    }

    /**
     * Spawns an instance of the objecttype indicated by the packet and sets its position and momentum
     */
    public void handleSpawnObject(S0EPacketSpawnObject spawnentity)
    {
        double x = (double)spawnentity.getX() / 32.0D;
        double y = (double)spawnentity.getY() / 32.0D;
        double z = (double)spawnentity.getZ() / 32.0D;
        Object var8 = null;

        if (spawnentity.getSpecialSpawnID() == 2)
        {
            var8 = new EntityItem(this.clientWorldController, x, y, z);
        }
        if (var8 != null)
        {
            ((Entity)var8).serverPosX = spawnentity.getX();
            ((Entity)var8).serverPosY = spawnentity.getY();
            ((Entity)var8).serverPosZ = spawnentity.getZ();
            ((Entity)var8).rotationPitch = (float)(spawnentity.getPitch() * 360) / 256.0F;
            ((Entity)var8).rotationYaw = (float)(spawnentity.getRotation() * 360) / 256.0F;
            Entity[] var12 = ((Entity)var8).getEntitys();

            if (var12 != null)
            {
                for (int var11 = 0; var11 < var12.length; ++var11)
                {
                    var12[var11].setEntityId(var12[var11].getEntityId() + (spawnentity.getID() - ((Entity)var8).getEntityId()));
                }
            }
            ((Entity)var8).setEntityId(spawnentity.getID());
            this.clientWorldController.addEntityToWorld(spawnentity.getID(), (Entity)var8);
        }
    }


    /**
     * Sets the velocity of the specified entity to the specified value
     */
    public void handleEntityVelocity(S12PacketEntityVelocity p_147244_1_)
    {
        Entity var2 = this.clientWorldController.getEntityByID(p_147244_1_.func_149412_c());

        if (var2 != null)
        {
            var2.setVelocity((double)p_147244_1_.func_149411_d() / 8000.0D, (double)p_147244_1_.func_149410_e() / 8000.0D, (double)p_147244_1_.func_149409_f() / 8000.0D);
        }
    }

    /**
     * Invoked when the server registers new proximate objects in your watchlist or when objects in your watchlist have
     * changed -> Registers any changes locally
     */
    public void handleEntityMetadata(S1CPacketEntityMetadata p_147284_1_)
    {
        Entity var2 = this.clientWorldController.getEntityByID(p_147284_1_.func_149375_d());

        if (var2 != null && p_147284_1_.func_149376_c() != null)
        {
            var2.getDataWatcher().updateWatchedObjectsFromList(p_147284_1_.func_149376_c());
        }
    }

    /**
     * Handles the creation of a nearby player entity, sets the position and held item
     */
    public void handleSpawnPlayer(S0CPacketSpawnPlayer p_147237_1_)
    {
        double var2 = (double)p_147237_1_.func_148942_f() / 32.0D;
        double var4 = (double)p_147237_1_.func_148949_g() / 32.0D;
        double var6 = (double)p_147237_1_.func_148946_h() / 32.0D;
        float var8 = (float)(p_147237_1_.func_148941_i() * 360) / 256.0F;
        float var9 = (float)(p_147237_1_.func_148945_j() * 360) / 256.0F;
        GameProfile var10 = p_147237_1_.func_148948_e();
        EntityOtherPlayerMP var11 = new EntityOtherPlayerMP(this.gameController.theWorld, p_147237_1_.func_148948_e());
        var11.prevPosX = var11.lastTickPosX = (double)(var11.serverPosX = p_147237_1_.func_148942_f());
        var11.prevPosY = var11.lastTickPosY = (double)(var11.serverPosY = p_147237_1_.func_148949_g());
        var11.prevPosZ = var11.lastTickPosZ = (double)(var11.serverPosZ = p_147237_1_.func_148946_h());
        int var12 = p_147237_1_.func_148947_k();

        if (var12 == 0)
        {
            var11.inventory.mainInventory[var11.inventory.currentItem] = null;
        }
        else
        {
            var11.inventory.mainInventory[var11.inventory.currentItem] = new ItemData(Item.getItemById(var12), 1, 0);
        }

        var11.setPositionAndRotation(var2, var4, var6, var8, var9);
        this.clientWorldController.addEntityToWorld(p_147237_1_.func_148943_d(), var11);
        List var13 = p_147237_1_.func_148944_c();

        if (var13 != null)
        {
            var11.getDataWatcher().updateWatchedObjectsFromList(var13);
        }
    }

    /**
     * Updates an entity's position and rotation as specified by the packet
     */
    public void handleEntityTeleport(S18PacketEntityTeleport p_147275_1_)
    {
        Entity var2 = this.clientWorldController.getEntityByID(p_147275_1_.func_149451_c());

        if (var2 != null)
        {
            var2.serverPosX = p_147275_1_.func_149449_d();
            var2.serverPosY = p_147275_1_.func_149448_e();
            var2.serverPosZ = p_147275_1_.func_149446_f();
            double var3 = (double)var2.serverPosX / 32.0D;
            double var5 = (double)var2.serverPosY / 32.0D + 0.015625D;
            double var7 = (double)var2.serverPosZ / 32.0D;
            float var9 = (float)(p_147275_1_.func_149450_g() * 360) / 256.0F;
            float var10 = (float)(p_147275_1_.func_149447_h() * 360) / 256.0F;
            var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
        }
    }

    /**
     * Updates which hotbar slot of the player is currently selected
     */
    public void handleHeldItemChange(S09PacketHeldItemChange p_147257_1_)
    {
        if (p_147257_1_.func_149385_c() >= 0 && p_147257_1_.func_149385_c() < InventoryPlayer.getHotbarSize())
        {
            this.gameController.thePlayer.inventory.currentItem = p_147257_1_.func_149385_c();
        }
    }

    /**
     * Updates the specified entity's position by the specified relative moment and absolute rotation. Note that
     * subclassing of the packet allows for the specification of a subset of this data (e.g. only rel. position, abs.
     * rotation or both).
     */
    public void handleEntityMovement(S14PacketEntity p_147259_1_)
    {
        Entity var2 = p_147259_1_.func_149065_a(this.clientWorldController);

        if (var2 != null)
        {
            var2.serverPosX += p_147259_1_.func_149062_c();
            var2.serverPosY += p_147259_1_.func_149061_d();
            var2.serverPosZ += p_147259_1_.func_149064_e();
            double var3 = (double)var2.serverPosX / 32.0D;
            double var5 = (double)var2.serverPosY / 32.0D;
            double var7 = (double)var2.serverPosZ / 32.0D;
            float var9 = p_147259_1_.func_149060_h() ? (float)(p_147259_1_.func_149066_f() * 360) / 256.0F : var2.rotationYaw;
            float var10 = p_147259_1_.func_149060_h() ? (float)(p_147259_1_.func_149063_g() * 360) / 256.0F : var2.rotationPitch;
            var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
        }
    }

    /**
     * Updates the direction in which the specified entity is looking, normally this head rotation is independent of the
     * rotation of the entity itself
     */
    public void handleEntityHeadLook(S19PacketEntityHeadLook p_147267_1_)
    {
        Entity var2 = p_147267_1_.func_149381_a(this.clientWorldController);

        if (var2 != null)
        {
            float var3 = (float)(p_147267_1_.func_149380_c() * 360) / 256.0F;
            var2.setRotationYawHead(var3);
        }
    }

    /**
     * Locally eliminates the entities. Invoked by the server when the items are in fact destroyed, or the player is no
     * longer registered as required to monitor them. The latter  happens when distance between the player and item
     * increases beyond a certain treshold (typically the viewing distance)
     */
    public void handleDestroyEntities(S13PacketDestroyEntities p_147238_1_)
    {
        for (int var2 = 0; var2 < p_147238_1_.func_149098_c().length; ++var2)
        {
            this.clientWorldController.removeEntityFromWorld(p_147238_1_.func_149098_c()[var2]);
        }
    }

    /**
     * Handles changes in player positioning and rotation such as (re)spawning etc. 
     * Seems to immediately reply to the server with the clients post-processing perspective on the
     * player positioning
     */
    public void handlePlayerPosLook(S08PacketPlayerPosLook p_147258_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;
        double var3 = p_147258_1_.func_148932_c();
        double var5 = p_147258_1_.func_148928_d();
        double var7 = p_147258_1_.func_148933_e();
        float var9 = p_147258_1_.func_148931_f();
        float var10 = p_147258_1_.func_148930_g();
        var2.ySize = 0.0F;
        var2.motionX = var2.motionY = var2.motionZ = 0.0D;
        var2.setPositionAndRotation(var3, var5, var7, var9, var10);
        this.netManager.scheduleOutboundPacket(new C03PacketPlayer.C06PacketPlayerPosLook(var2.posX, var2.boundingBox.minY, var2.posY, var2.posZ, p_147258_1_.func_148931_f(), p_147258_1_.func_148930_g(), p_147258_1_.func_148929_h()), new GenericFutureListener[0]);

        if (!this.doneLoadingTerrain)
        {
            this.gameController.thePlayer.prevPosX = this.gameController.thePlayer.posX;
            this.gameController.thePlayer.prevPosY = this.gameController.thePlayer.posY;
            this.gameController.thePlayer.prevPosZ = this.gameController.thePlayer.posZ;
            this.doneLoadingTerrain = true;
            this.gameController.displayGuiScreen((GuiScreen)null);
        }
    }

    /**
     * Received from the servers PlayerManager if between 1 and 64 BasicEntityRender in a Area are changed. If only one TerrainObject
     * requires an update, the server sends S23PacketTerrainObjectChange and if 64 or more BasicEntityRender are changed, the server sends
     * S21PacketAreaData
     */
    public void handleMultiTerrainObjectChange(S22PacketMultiTerrainObjectChange p_147287_1_)
    {
        int var2 = p_147287_1_.func_148920_c().AreaXPos * 16;
        int var3 = p_147287_1_.func_148920_c().AreaZPos * 16;

        if (p_147287_1_.func_148921_d() != null)
        {
            DataInputStream var4 = new DataInputStream(new ByteArrayInputStream(p_147287_1_.func_148921_d()));

            try
            {
                for (int var5 = 0; var5 < p_147287_1_.func_148922_e(); ++var5)
                {
                    short var6 = var4.readShort();
                    short var7 = var4.readShort();
                    int var8 = var7 >> 4 & 4095;
                    int var9 = var7 & 15;
                    int var10 = var6 >> 12 & 15;
                    int var11 = var6 >> 8 & 15;
                    int var12 = var6 & 255;
                    this.clientWorldController.func_147492_c(var10 + var2, var12, var11 + var3, TerrainObject.getTerrainObjectById(var8), var9);
                }
            }
            catch (IOException var13)
            {
                ;
            }
        }
    }

    /**
     * Updates the specified Area with the supplied data, marks it for re-rendering and lighting recalculation
     */
    public void handleAreaData(S21PacketAreaData p_147263_1_)
    {
        if (p_147263_1_.func_149274_i())
        {
            if (p_147263_1_.func_149276_g() == 0)
            {
                this.clientWorldController.doPreArea(p_147263_1_.func_149273_e(), p_147263_1_.func_149271_f(), false);
                return;
            }

            this.clientWorldController.doPreArea(p_147263_1_.func_149273_e(), p_147263_1_.func_149271_f(), true);
        }

        this.clientWorldController.invalidateTerrainObjectReceiveRegion(p_147263_1_.func_149273_e() << 4, 0, p_147263_1_.func_149271_f() << 4, (p_147263_1_.func_149273_e() << 4) + 15, 256, (p_147263_1_.func_149271_f() << 4) + 15);
        Area var2 = this.clientWorldController.getAreaFromAreaCoords(p_147263_1_.func_149273_e(), p_147263_1_.func_149271_f());
        var2.fillArea(p_147263_1_.func_149272_d(), p_147263_1_.func_149276_g(), p_147263_1_.func_149270_h(), p_147263_1_.func_149274_i());
       
        if (!p_147263_1_.func_149274_i() || !(this.clientWorldController.provider instanceof WorldProviderSurface))
        {
            var2.resetRelightChecks();
        }
    }

    /**
     * Updates the TerrainObject and metadata and generates a TerrainObjectupdate (and notify the clients)
     */
    public void handleTerrainObjectChange(S23PacketTerrainObjectChange packet)
    {
        this.clientWorldController.func_147492_c(packet.getX(), packet.getY(), packet.getZ(), packet.getObjectTerrain(), packet.getData());
    }

    /**
     * Closes the network channel
     */
    public void handleDisconnect(S40PacketDisconnect p_147253_1_)
    {
        this.netManager.closeChannel(p_147253_1_.func_149165_c());
    }

    /**
     * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
     */
    public void onDisconnect(String p_147231_1_)
    {
        this.gameController.loadWorld((WorldClient)null);

        if (this.guiScreenServer != null)
        {
                this.gameController.displayGuiScreen(new DisconnectedGui(this.guiScreenServer, "Connection lost", p_147231_1_));
        }
        else
        {
            this.gameController.displayGuiScreen(new DisconnectedGui(new GuiMultiplayer(new MainMenuGui()), "Connection lost", p_147231_1_));
        }
    }

    public void addToSendQueue(Packet p_147297_1_)
    {
        this.netManager.scheduleOutboundPacket(p_147297_1_, new GenericFutureListener[0]);
    }

    public void handleCollectItem(S0DPacketCollectItem p_147246_1_)
    {
        Entity var2 = this.clientWorldController.getEntityByID(p_147246_1_.func_149354_c());
        Object var3 = (EntityLivingBase)this.clientWorldController.getEntityByID(p_147246_1_.func_149353_d());

        if (var3 == null)
        {
            var3 = this.gameController.thePlayer;
        }

        if (var2 != null)
        {

            this.clientWorldController.playSoundAtEntity(var2, "random.pop", 0.2F, ((this.avRandomizer.nextFloat() - this.avRandomizer.nextFloat()) * 0.7F + 1.0F) * 2.0F);
            this.clientWorldController.removeEntityFromWorld(p_147246_1_.func_149354_c());
        }
    }

  
    /**
     * Renders a specified animation: Waking up a player, a living entity swinging its currently held item, being hurt
     * or receiving a critical hit by normal or magical means
     */
    public void handleAnimation(S0BPacketAnimation p_147279_1_)
    {
        Entity var2 = this.clientWorldController.getEntityByID(p_147279_1_.func_148978_c());

        if (var2 != null)
        {
            if (p_147279_1_.func_148977_d() == 0)
            {
                EntityLivingBase var3 = (EntityLivingBase)var2;
                var3.swingItem();
            }
            else if (p_147279_1_.func_148977_d() == 1)
            {
                var2.performHurtAnimation();
            }
        }
    }

  

    /**
     * Spawns the mob entity at the specified location, with the specified rotation, momentum and type. Updates the
     * entities Datawatchers with the entity metadata specified in the packet
     */
    public void handleSpawnMob(S0FPacketSpawnMob p_147281_1_)
    {
        double var2 = (double)p_147281_1_.func_149023_f() / 32.0D;
        double var4 = (double)p_147281_1_.func_149034_g() / 32.0D;
        double var6 = (double)p_147281_1_.func_149029_h() / 32.0D;
        float var8 = (float)(p_147281_1_.func_149028_l() * 360) / 256.0F;
        float var9 = (float)(p_147281_1_.func_149030_m() * 360) / 256.0F;
        EntityLivingBase var10 = (EntityLivingBase)EntityList.createEntityByID(p_147281_1_.func_149025_e(), this.gameController.theWorld);
        var10.serverPosX = p_147281_1_.func_149023_f();
        var10.serverPosY = p_147281_1_.func_149034_g();
        var10.serverPosZ = p_147281_1_.func_149029_h();
        var10.rotationYawHead = (float)(p_147281_1_.func_149032_n() * 360) / 256.0F;
        Entity[] var11 = var10.getEntitys();

        if (var11 != null)
        {
            int var12 = p_147281_1_.func_149024_d() - var10.getEntityId();

            for (int var13 = 0; var13 < var11.length; ++var13)
            {
                var11[var13].setEntityId(var11[var13].getEntityId() + var12);
            }
        }

        var10.setEntityId(p_147281_1_.func_149024_d());
        var10.setPositionAndRotation(var2, var4, var6, var8, var9);
        var10.motionX = (double)((float)p_147281_1_.func_149026_i() / 8000.0F);
        var10.motionY = (double)((float)p_147281_1_.func_149033_j() / 8000.0F);
        var10.motionZ = (double)((float)p_147281_1_.func_149031_k() / 8000.0F);
        this.clientWorldController.addEntityToWorld(p_147281_1_.func_149024_d(), var10);
        List var14 = p_147281_1_.func_149027_c();

        if (var14 != null)
        {
            var10.getDataWatcher().updateWatchedObjectsFromList(var14);
        }
    }

    public void handleTimeUpdate(S03PacketTimeUpdate p_147285_1_)
    {
        this.gameController.theWorld.StructureWorldInfo.setTotalWorldTime(p_147285_1_.func_149366_c());
        this.gameController.theWorld.StructureWorldInfo.setWorldTime(p_147285_1_.func_149365_d());
    }

    public void handleSpawnPosition(S05PacketSpawnPosition p_147271_1_)
    {
        this.gameController.thePlayer.setSpawnArea(new AreaCoordinates(p_147271_1_.func_149360_c(), p_147271_1_.func_149359_d(), p_147271_1_.func_149358_e()), true);
        this.gameController.theWorld.getStructureWorldInfo().setSpawnPosition(p_147271_1_.func_149360_c(), p_147271_1_.func_149359_d(), p_147271_1_.func_149358_e());
    }

    public void handleEntityAttach(S1BPacketEntityAttach p_147243_1_)
    {
        Object var2 = this.clientWorldController.getEntityByID(p_147243_1_.func_149403_d());
        Entity var3 = this.clientWorldController.getEntityByID(p_147243_1_.func_149402_e());

        if (p_147243_1_.func_149404_c() == 0)
        {
            boolean var4 = false;

            if (p_147243_1_.func_149403_d() == this.gameController.thePlayer.getEntityId())
            {
                var2 = this.gameController.thePlayer;
                var4 = ((Entity)var2).ridingEntity == null && var3 != null;
            }
    
            if (var2 == null)
            {
                return;
            }

            ((Entity)var2).mountEntity(var3);

        }
    }

    /**
     * Invokes the entities' handleUpdateHealth method which is implemented in LivingBase (hurt/death),
     * MinecartMobSpawner (spawn delay), FireworkRocket & MinecartTNT (explosion), IronGolem (throwing,...), Witch
     * (spawn particles), Zombie (villager transformation), Animal (breeding mode particles), Horse (breeding/smoke
     * particles), Sheep (...), Tameable (...), Villager (particles for breeding mode, angry and happy), Wolf (...)
     */
    public void handleEntityStatus(S19PacketEntityStatus p_147236_1_)
    {
        Entity var2 = p_147236_1_.func_149161_a(this.clientWorldController);

        if (var2 != null)
        {
            var2.handleHealthUpdate(p_147236_1_.func_149160_c());
        }
    }

    public void handleUpdateHealth(S06PacketUpdateHealth p_147249_1_)
    {
        this.gameController.thePlayer.setPlayerSPHealth(p_147249_1_.func_149332_c());
    }


    public void handleRespawn(S07PacketRespawn p_147280_1_)
    {
            this.doneLoadingTerrain = false;
            this.clientWorldController = new WorldClient(this, new WorldSettings(this.gameController.theWorld.getStructureWorldInfo()), p_147280_1_.func_149081_d());
            this.clientWorldController.isClient = true;
            this.gameController.loadWorld(this.clientWorldController);
            this.gameController.setSpawnPlayer(p_147280_1_.func_149082_c());
            this.gameController.playerController.setGameType(p_147280_1_.func_149083_e());
    }

    /**
     * Initiates a new explosion for the affected BasicEntityRender indicated by the packet.
     */
    public void handleExplosion(S27PacketExplosion p_147283_1_)
    {
        Explosion var2 = new Explosion(this.gameController.theWorld, (Entity)null, p_147283_1_.func_149148_f(), p_147283_1_.func_149143_g(), p_147283_1_.func_149145_h(), p_147283_1_.func_149146_i());
        var2.affectedTerrainObjectPositions = p_147283_1_.func_149150_j();
        var2.doExplosionB(true);
        this.gameController.thePlayer.motionX += (double)p_147283_1_.func_149149_c();
        this.gameController.thePlayer.motionY += (double)p_147283_1_.func_149144_d();
        this.gameController.thePlayer.motionZ += (double)p_147283_1_.func_149147_e();
    }

    /**
     * Displays a GUI by ID. In order starting from id 0: Chest, Workbench, Furnace, Dispenser, Enchanting table,
     * Brewing stand, Villager merchant, Beacon, Anvil, Hopper, Dropper, Horse
     */
    public void handleOpenWindow(S2DPacketOpenWindow p_147265_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;

        switch (p_147265_1_.func_148899_d())
        {

            case 1:
                var2.displayGUIWorkbench(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
                var2.openContainer.windowId = p_147265_1_.func_148901_c();
                break;


        }
    }

    /**
     * Handles pickin up an ItemData or dropping one in your inventory or an open (non-Forge) container
     */
    public void handleSetSlot(S2FPacketSetSlot p_147266_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;

        if (p_147266_1_.func_149175_c() == -1)
        {
            var2.inventory.setItemData(p_147266_1_.func_149174_e());
        }
        else
        {
            boolean var3 = false;

            if (p_147266_1_.func_149175_c() == 0 && p_147266_1_.func_149173_d() >= 36 && p_147266_1_.func_149173_d() < 45)
            {
                ItemData var5 = var2.inventoryContainer.getSlot(p_147266_1_.func_149173_d()).getStack();

                if (p_147266_1_.func_149174_e() != null && (var5 == null || var5.stackSize < p_147266_1_.func_149174_e().stackSize))
                {
                    p_147266_1_.func_149174_e().animationsToGo = 5;
                }

                var2.inventoryContainer.putStackInSlot(p_147266_1_.func_149173_d(), p_147266_1_.func_149174_e());
            }
            else if (p_147266_1_.func_149175_c() == var2.openContainer.windowId && (p_147266_1_.func_149175_c() != 0 || !var3))
            {
                var2.openContainer.putStackInSlot(p_147266_1_.func_149173_d(), p_147266_1_.func_149174_e());
            }
        }
    }

    /**
     * Verifies that the server and client are synchronized with respect to the inventory/container opened by the player
     * and confirms if it is the case.
     */
    public void handleConfirmTransaction(S32PacketConfirmTransaction p_147239_1_)
    {
        Container var2 = null;
        EntityClientPlayerMP var3 = this.gameController.thePlayer;

        if (p_147239_1_.func_148889_c() == 0)
        {
            var2 = var3.inventoryContainer;
        }
        else if (p_147239_1_.func_148889_c() == var3.openContainer.windowId)
        {
            var2 = var3.openContainer;
        }

        if (var2 != null && !p_147239_1_.func_148888_e())
        {
            this.addToSendQueue(new C0FPacketConfirmTransaction(p_147239_1_.func_148889_c(), p_147239_1_.func_148890_d(), true));
        }
    }

    /**
     * Handles the placement of a specified ItemData in a specified container/inventory slot
     */
    public void handleWindowItems(S30PacketWindowItems p_147241_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;

        if (p_147241_1_.func_148911_c() == 0)
        {
            var2.inventoryContainer.putStacksInSlots(p_147241_1_.func_148910_d());
        }
        else if (p_147241_1_.func_148911_c() == var2.openContainer.windowId)
        {
            var2.openContainer.putStacksInSlots(p_147241_1_.func_148910_d());
        }
    }

   

    /**
     * Updates the NBTTagCompound metadata of instances of the following entitytypes: Mob spawners, command BasicEntityRender,
     * beacons, skulls, flowerpot
     */
    public void handleUpdateTileEntity(S35PacketUpdateTileEntity p_147273_1_)
    {
        if (this.gameController.theWorld.TerrainObjectExists(p_147273_1_.func_148856_c(), p_147273_1_.func_148855_d(), p_147273_1_.func_148854_e()))
        {
            TileEntity var2 = this.gameController.theWorld.getTileEntity(p_147273_1_.func_148856_c(), p_147273_1_.func_148855_d(), p_147273_1_.func_148854_e());

            if (var2 != null)
            {
                
            }
        }
    }

    /**
     * Sets the progressbar of the opened window to the specified value
     */
    public void handleWindowProperty(S31PacketWindowProperty p_147245_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;

        if (var2.openContainer != null && var2.openContainer.windowId == p_147245_1_.func_149182_c())
        {
            var2.openContainer.updateProgressBar(p_147245_1_.func_149181_d(), p_147245_1_.func_149180_e());
        }
    }

    public void handleEntityEquipment(S04PacketEntityEquipment p_147242_1_)
    {
        Entity var2 = this.clientWorldController.getEntityByID(p_147242_1_.func_149389_d());

        if (var2 != null)
        {
            var2.setCurrentItemOrArmor(p_147242_1_.func_149388_e(), p_147242_1_.func_149390_c());
        }
    }

    /**
     * Resets the ItemData held in hand and closes the window that is opened
     */
    public void handleCloseWindow(S2EPacketCloseWindow p_147276_1_)
    {
        this.gameController.thePlayer.closeScreenNoPacket();
    }

    /**
     * Triggers TerrainObject.onTerrainObjectEventReceived, which is implemented in TerrainObjectPistonBase for extension/retraction, TerrainObjectNote
     * for setting the instrument (including audiovisual feedback) and in TerrainObjectContainer to set the number of players
     * accessing a (Ender)Chest
     */
    public void handleTerrainObjectAction(S24PacketTerrainObjectAction p_147261_1_)
    {
        this.gameController.theWorld.func_147452_c(p_147261_1_.func_148867_d(), p_147261_1_.func_148866_e(), p_147261_1_.func_148865_f(), p_147261_1_.func_148868_c(), p_147261_1_.func_148869_g(), p_147261_1_.func_148864_h());
    }


    public void handleMapAreaBulk(S26PacketMapAreaBulk p_147269_1_)
    {
        for (int var2 = 0; var2 < p_147269_1_.func_149254_d(); ++var2)
        {
            int X = p_147269_1_.func_149255_a(var2);
            int Z = p_147269_1_.func_149253_b(var2);
            this.clientWorldController.doPreArea(X, Z, true);
            this.clientWorldController.invalidateTerrainObjectReceiveRegion(X << 4, 0, Z << 4, (X << 4) + 15, 256, (Z << 4) + 15);
            Area var5 = this.clientWorldController.getAreaFromAreaCoords(X, Z);
            var5.fillArea(p_147269_1_.func_149256_c(var2), p_147269_1_.func_149252_e()[var2], p_147269_1_.func_149257_f()[var2], true);
       
            if (!(this.clientWorldController.provider instanceof WorldProviderSurface))
            {
                var5.resetRelightChecks();
            }
        }
    }

    public void handleChangeGameState(S2BPacketChangeGameState p_147252_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;
        int var3 = p_147252_1_.func_149138_c();
        float var4 = p_147252_1_.func_149137_d();
        int var5 = MathHelper.floor_float(var4 + 0.5F);

        if (var3 >= 0 && var3 < S2BPacketChangeGameState.field_149142_a.length && S2BPacketChangeGameState.field_149142_a[var3] != null)
        {
            var2.addChatComponentMessage(S2BPacketChangeGameState.field_149142_a[var3]);
        }
        else if (var3 == 3)
        {
            this.gameController.playerController.setGameType(WorldSettings.GameType.getByID(var5));
        }
        else if (var3 == 6)
        {
            this.clientWorldController.playSound(var2.posX, var2.posY + (double)var2.getEyeHeight(), var2.posZ, "random.successful_hit", 0.18F, 0.45F, false);
        }
    }
    
    public void handleEffect(S28PacketEffect p_147277_1_)
    {
        if (p_147277_1_.func_149244_c())
        {
            this.gameController.theWorld.playBroadcastSound(p_147277_1_.func_149242_d(), p_147277_1_.func_149240_f(), p_147277_1_.func_149243_g(), p_147277_1_.func_149239_h(), p_147277_1_.func_149241_e());
        }
    }

    public void handlePlayerListItem(S38PacketPlayerListItem p_147256_1_)
    {
        GuiPlayerInfo var2 = (GuiPlayerInfo)this.playerInfoMap.get(p_147256_1_.func_149122_c());

        if (var2 == null && p_147256_1_.func_149121_d())
        {
            var2 = new GuiPlayerInfo(p_147256_1_.func_149122_c());
            this.playerInfoMap.put(p_147256_1_.func_149122_c(), var2);
            this.playerInfoList.add(var2);
        }

        if (var2 != null && !p_147256_1_.func_149121_d())
        {
            this.playerInfoMap.remove(p_147256_1_.func_149122_c());
            this.playerInfoList.remove(var2);
        }

        if (var2 != null && p_147256_1_.func_149121_d())
        {
            var2.responseTime = p_147256_1_.func_149120_e();
        }
    }

    public void handleKeepAlive(S00PacketKeepAlive p_147272_1_)
    {
        this.addToSendQueue(new C00PacketKeepAlive(p_147272_1_.func_149134_c()));
    }

    /**
     * Allows validation of the connection state transition. Parameters: from, to (connection state). Typically throws
     * IllegalStateException or UnsupportedOperationException if validation fails
     */
    public void onConnectionStateTransition(EnumConnectionState p_147232_1_, EnumConnectionState p_147232_2_)
    {
        throw new IllegalStateException("Unexpected protocol change!");
    }

    public void handlePlayerAbilities(S39PacketPlayerAbilities p_147270_1_)
    {
        EntityClientPlayerMP var2 = this.gameController.thePlayer;
        var2.capAbilities.isFlying = p_147270_1_.func_149106_d();
        var2.capAbilities.instaDestroy = p_147270_1_.func_149103_f();
        var2.capAbilities.disableDamage = p_147270_1_.func_149112_c();
        var2.capAbilities.allowFlying = p_147270_1_.func_149105_e();
        var2.capAbilities.setFlySpeed(p_147270_1_.func_149101_g());
        var2.capAbilities.setWalkSpeed(p_147270_1_.func_149107_h());
    }

    public void handleSoundEffect(S29PacketSoundEffect p_147255_1_)
    {
        this.gameController.theWorld.playSound(p_147255_1_.func_149207_d(), p_147255_1_.func_149211_e(), p_147255_1_.func_149210_f(), p_147255_1_.func_149212_c(), p_147255_1_.func_149208_g(), p_147255_1_.func_149209_h(), false);
    }

    public void handleCustomPayload(S3FPacketCustomPayload p_147240_1_)
    {
        if ("SW|Brand".equals(p_147240_1_.func_149169_c()))
        {
            this.gameController.thePlayer.setName(new String(p_147240_1_.func_149168_d(), Charsets.UTF_8));
        }
        else if ("SW|RPack".equals(p_147240_1_.func_149169_c()))
        {
            final String var12 = new String(p_147240_1_.func_149168_d(), Charsets.UTF_8);

            if (this.gameController.func_147104_D() != null && this.gameController.func_147104_D().func_152586_b() == ServerData.ServerResourceMode.ENABLED)
            {
             
            }
            else if (this.gameController.func_147104_D() == null || this.gameController.func_147104_D().func_152586_b() == ServerData.ServerResourceMode.PROMPT)
            {
                this.gameController.displayGuiScreen(new GuiYesNo(new GuiYesNoCallback()
                {
                    public void confirmClicked(boolean p_73878_1_, int p_73878_2_)
                    {
                        NetHandlerPlayClient.this.gameController = TheStructureWorld.getTheStructureWorld();

                        if (NetHandlerPlayClient.this.gameController.func_147104_D() != null)
                        {
                            NetHandlerPlayClient.this.gameController.func_147104_D().func_152584_a(ServerData.ServerResourceMode.ENABLED);
                            ServerList.func_147414_b(NetHandlerPlayClient.this.gameController.func_147104_D());
                        }

                      

                        NetHandlerPlayClient.this.gameController.displayGuiScreen((GuiScreen)null);
                    }
                }, "multiplayer.texturePrompt.line1", "multiplayer.texturePrompt.line2", 0));
            }
        }
    }

    /**
     * Returns this the NetworkManager instance registered with this NetworkHandlerPlayClient
     */
    public NetworkManager getNetworkManager()
    {
        return this.netManager;
    }


}
