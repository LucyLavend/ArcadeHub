package nl.thestructureworld.entity;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import nl.thestructureworld.savefile.SaveFileTagCompound;
import nl.thestructureworld.network.play.client.NetHandlerPlayServer;
import nl.thestructureworld.network.play.client.Packet;
import nl.thestructureworld.network.play.client.S06PacketUpdateHealth;
import nl.thestructureworld.network.play.client.S0BPacketAnimation;
import nl.thestructureworld.network.play.client.S13PacketDestroyEntities;
import nl.thestructureworld.network.play.client.S19PacketEntityStatus;
import nl.thestructureworld.network.play.client.S1BPacketEntityAttach;
import nl.thestructureworld.network.play.client.S26PacketMapAreaBulk;
import nl.thestructureworld.network.play.client.S2BPacketChangeGameState;
import nl.thestructureworld.network.play.client.S2DPacketOpenWindow;
import nl.thestructureworld.network.play.client.S2EPacketCloseWindow;
import nl.thestructureworld.network.play.client.S2FPacketSetSlot;
import nl.thestructureworld.network.play.client.S30PacketWindowItems;
import nl.thestructureworld.network.play.client.S31PacketWindowProperty;
import nl.thestructureworld.network.play.client.S39PacketPlayerAbilities;
import nl.thestructureworld.network.play.client.S3FPacketCustomPayload;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.server.management.EditTerrainwwoItem;
import nl.thestructureworld.util.AreaCoordinates;
import nl.thestructureworld.util.DamageSource;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.world.AreaCoordIntPair;
import nl.thestructureworld.world.WorldServer;
import nl.thestructureworld.world.WorldSettings;
import nl.thestructureworld.world.WorldSettings.GameType;
import nl.thestructureworld.world.storage.Area;

import org.apache.commons.io.Charsets;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import nl.thestructureworld.client.GameProfile;

public class PlayerMPEntity extends EntityPlayer
{
    private static final Logger logger = LogManager.getLogger();

    /**
     * The NetServerHandler assigned to this player by the ServerConfigurationManager.
     */
    public NetHandlerPlayServer playerNetServerHandler;

    /** Reference to the TheStructureWorldServer object. */
    public final TheStructureWorldServer tswServer;

    /** player X position as seen by PlayerManager */
    public double managedPosX;

    /** player Z position as seen by PlayerManager */
    public double managedPosZ;

    /** LinkedList that holds the loaded Areas. */
    public final List loadedAreas = new LinkedList();

    /** entities added to this list will  be packet29'd to the player */
    private final List destroyedItemsNetCache = new LinkedList();
    private float field_130068_bO = Float.MIN_VALUE;

    /** amount of health the client was last set to */
    private float lastHealth = -1.0E8F;

    /** set to foodStats.GetFoodLevel */
    private int lastFoodLevel = -99999999;

    /** set to foodStats.getSaturationLevel() == 0.0F each tick */
    private boolean wasHungry = true;

    /** Amount of experience the client was last set to */
    private int lastExperience = -99999999;
    private int field_147101_bU = 60;
    private boolean chatColours = true;
    private long field_143005_bX = System.currentTimeMillis();

    /**
     * The currently in use window ID. Incremented every time a window is opened.
     */
    private int currentWindowId;

    /**
     * set to true when player is moving quantity of items from one inventory to another(crafting) but item in either
     * slot is not changed
     */
    public boolean isChangingQuantityOnly;
    public int ping;


    public PlayerMPEntity(TheStructureWorldServer funci_i45285_1_, WorldServer funci_i45285_2_, GameProfile funci_i45285_3_, EditTerrainwwoItem funci_i45285_4_)
    {
        super(funci_i45285_2_, funci_i45285_3_);
        funci_i45285_4_.thisPlayerMP = this;
        this.theEditTerrainwwoItem = funci_i45285_4_;
        AreaCoordinates var5 = funci_i45285_2_.getSpawnPoint();
        int X = var5.posX;
        int Z = var5.posZ;
        int Y = var5.posY;
        int var9 = Math.max(5, funci_i45285_1_.getSpawnProtectionSize() - 6);
        X += this.rand.nextInt(var9 * 2) - var9;
        Z += this.rand.nextInt(var9 * 2) - var9;
        this.tswServer = funci_i45285_1_;
        this.stepHeight = 0.0F;
        this.eyeOffset = 0.0F;
        this.setLocationAndAngles((double)X + 0.5D, (double)Y, (double)Z + 0.5D, 0.0F, 0.0F);
        this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
    }

 
    /**
     * sets the players height back to normal after doing things like sleeping and dieing
     */
    protected void resetHeight()
    {
        this.eyeOffset = 0.0F;
    }

    public float getEyeHeight()
    {
        return 1.62F;
    }

    /**
     * Called to update the entity's position/logic.
     */
    public void onUpdate()
    {
        this.theEditTerrainwwoItem.updateTerrainObjectRemoving();
        --this.field_147101_bU;

        if (this.hurtResistantTime > 0)
        {
            --this.hurtResistantTime;
        }

        while (!this.destroyedItemsNetCache.isEmpty())
        {
            int var1 = Math.min(this.destroyedItemsNetCache.size(), 127);
            int[] var2 = new int[var1];
            Iterator var3 = this.destroyedItemsNetCache.iterator();
            int var4 = 0;

            while (var3.hasNext() && var4 < var1)
            {
                var2[var4++] = ((Integer)var3.next()).intValue();
                var3.remove();
            }

            this.playerNetServerHandler.sendPacket(new S13PacketDestroyEntities(var2));
        }

        if (!this.loadedAreas.isEmpty())
        {
            ArrayList var6 = new ArrayList();
            Iterator var7 = this.loadedAreas.iterator();
            ArrayList var8 = new ArrayList();
            Area var5;

            while (var7.hasNext() && var6.size() < S26PacketMapAreaBulk.tsw_funci_149258_c())
            {
                AreaCoordIntPair var9 = (AreaCoordIntPair)var7.next();

                if (var9 != null)
                {
                    if (this.worldObj.TerrainObjectExists(var9.AreaXPos << 4, 0, var9.AreaZPos << 4))
                    {
                        var5 = this.worldObj.getAreaFromAreaCoords(var9.AreaXPos, var9.AreaZPos);

                        if (var5.tsw_funci_150802_k())
                        {
                            var6.add(var5);
                           var7.remove();
                        }
                    }
                }
                else
                {
                    var7.remove();
                }
            }

            if (!var6.isEmpty())
            {
                this.playerNetServerHandler.sendPacket(new S26PacketMapAreaBulk(var6));
                Iterator var10 = var8.iterator();

             

                var10 = var6.iterator();

                while (var10.hasNext())
                {
                    var5 = (Area)var10.next();
                    this.getServerForPlayer().getEntityTracker().tsw_funci_85172_a(this, var5);
                }
            }
        }
    }

    public void onUpdateEntity()
    {
        try
        {
            super.onUpdate();
        }
        catch (Throwable var4)
        {
        	System.out.println("[Server thread/ERROR]: "+var4.getMessage());
        }
    }

   

    /**
     * Called when the mob's health reaches 0.
     */
    public void onDeath(DamageSource funci_70645_1_)
    {
        this.tsw_funci_110142_aN().tsw_funci_94549_h();
    }

    /**
     * Called when the entity is attacked.
     */
    public boolean attackEntityFrom(DamageSource funci_70097_1_, float funci_70097_2_)
    {
        if (this.isEntityInvulnerable())
        {
            return false;
        }
        else
        {
            boolean var3 = this.tswServer.isDedicatedServer() && this.tswServer.isPVPEnabled() && "fall".equals(funci_70097_1_.damageType);

            if (!var3 && this.field_147101_bU > 0 && funci_70097_1_ != DamageSource.outOfWorld)
            {
                return false;
            }
            else
            {
                    Entity var4 = funci_70097_1_.getEntity();

                    if (var4 instanceof EntityPlayer)
                    {
                        return false;
                    }
                return super.attackEntityFrom(funci_70097_1_, funci_70097_2_);
            }
        }
    }


    /**
     * Called whenever an item is picked up from walking over it. Args: pickedUpEntity, stackSize
     */
    public void onItemPickup(Entity funci_71001_1_, int funci_71001_2_)
    {
        super.onItemPickup(funci_71001_1_, funci_71001_2_);
    }

    /**
     * Called when a player mounts an entity. e.g. mounts a pig, mounts a boat.
     */
    public void mountEntity(Entity funci_70078_1_)
    {
        super.mountEntity(funci_70078_1_);
        this.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this, this.ridingEntity));
        this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
    }

    /**
     * Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
     * and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
     */
    protected void updateFallState(double funci_70064_1_, boolean funci_70064_3_) {}

    /**
     * process player falling based on movement packet
     */
    public void handleFalling(double funci_71122_1_, boolean funci_71122_3_)
    {
        super.updateFallState(funci_71122_1_, funci_71122_3_);
    }

    /**
     * get the next window id to use
     */
    private void getNextWindowId()
    {
        this.currentWindowId = this.currentWindowId % 100 + 1;
    }

    /**
     * set current crafting inventory back to the 2x2 square
     */
    public void closeScreen()
    {
        //this.playerNetServerHandler.sendPacket(new S2EPacketCloseWindow(this.openContainer.windowId));
        this.closeContainer();
    }


    /**
     * Closes the container the player currently has open.
     */
    public void closeContainer()
    {
       
    }

    public void setEntityActionState(float funci_110430_1_, float funci_110430_2_, boolean funci_110430_3_, boolean funci_110430_4_)
    {
        if (this.ridingEntity != null)
        {
            if (funci_110430_1_ >= -1.0F && funci_110430_1_ <= 1.0F)
            {
                this.moveStrafing = funci_110430_1_;
            }

            if (funci_110430_2_ >= -1.0F && funci_110430_2_ <= 1.0F)
            {
                this.moveForward = funci_110430_2_;
            }

            this.isEntityJumping = funci_110430_3_;
            this.setCrouching(funci_110430_4_);
        }
    }

   
    public void mountEntityAndWakeUp()
    {
        if (this.riddenByEntity != null)
        {
            this.riddenByEntity.mountEntity(this);
        } 
    }

    public void setPlayerHealthUpdated()
    {
        this.lastHealth = -1.0E8F;
    }
 
    /**
     * Sets the position of the entity and updates the 'last' variables
     */
    public void setPositionAndUpdate(double funci_70634_1_, double funci_70634_3_, double funci_70634_5_)
    {
        this.playerNetServerHandler.setPlayerLocation(funci_70634_1_, funci_70634_3_, funci_70634_5_, this.rotationYaw, this.rotationPitch);
    }

    /**
     * Called when the player performs a critical hit on the Entity. Args: entity that was hit critically
     */
    public void onCriticalHit(Entity funci_71009_1_)
    {
        this.getServerForPlayer().getEntityTracker().tsw_funci_151248_b(this, new S0BPacketAnimation(funci_71009_1_, 4));
    }

    public void onEnchantmentCritical(Entity funci_71047_1_)
    {
        this.getServerForPlayer().getEntityTracker().tsw_funci_151248_b(this, new S0BPacketAnimation(funci_71047_1_, 5));
    }

    /**
     * Sends the player's abilities to the server (if there is one).
     */
    public void sendPlayerAbilities()
    {
        if (this.playerNetServerHandler != null)
        {
            this.playerNetServerHandler.sendPacket(new S39PacketPlayerAbilities(this.capAbilities));
        }
    }

    public WorldServer getServerForPlayer()
    {
        return (WorldServer)this.worldObj;
    }

    /**
     * Sets the player's game mode and sends it to them.
     */
    public void setGameType(WorldSettings.GameType funci_71033_1_)
    {
        this.theEditTerrainwwoItem.setGameType(funci_71033_1_);
        this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(3, (float)funci_71033_1_.getID()));
    }
 

    /**
     * Gets the player's IP address. Used in /banip.
     */
    public String getPlayerIP()
    {
        String var1 = this.playerNetServerHandler.netManager.getSocketAddress().toString();
        var1 = var1.substring(var1.indexOf("/") + 1);
        var1 = var1.substring(0, var1.indexOf(":"));
        return var1;
    }


    public void tsw_funci_147095_a(String funci_147095_1_)
    {
        this.playerNetServerHandler.sendPacket(new S3FPacketCustomPayload("SW|RPack", funci_147095_1_.getBytes(Charsets.UTF_8)));
    }

    /**
     * Return the position for this command sender.
     */
    public AreaCoordinates getPlayerCoordinates()
    {
        return new AreaCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY + 0.5D), MathHelper.floor_double(this.posZ));
    }

    public void tsw_funci_143004_u()
    {
        this.field_143005_bX = TheStructureWorldServer.getSystemTimeMillis();
    }

   

    public void tsw_funci_152339_d(Entity funci_152339_1_)
    {
        if (funci_152339_1_ instanceof EntityPlayer)
        {
            this.playerNetServerHandler.sendPacket(new S13PacketDestroyEntities(new int[] {funci_152339_1_.getEntityId()}));
        }
        else
        {
            this.destroyedItemsNetCache.add(Integer.valueOf(funci_152339_1_.getEntityId()));
        }
    }

    public long tsw_funci_154331_x()
    {
        return this.field_143005_bX;
    }


	@Override
	protected void readEntityFromSaveFile(SaveFileTagCompound funci_70037_1_) {
		// TODO Auto-generated method stub
		
	}


	@Override
	protected void writeEntityToSaveFile(SaveFileTagCompound funci_70014_1_) {
		// TODO Auto-generated method stub
		
	}


	@Override
	protected void entityInit() {
		// TODO Auto-generated method stub
		
	}
}
