package nl.thestructureworld.client.renderer.entity;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.bulletsandgrenades.BulletRenderer;
import nl.thestructureworld.client.renderer.terrain.Terrain;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;
import nl.thestructureworld.entity.EntityPlayer;

import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;
 
public class EntityRenderSmallTree extends BasicEntityRender
{
	private float moveX = 0F;
	private float moveZ = 0F;
	private boolean canMove = false;
	 
	public EntityRenderSmallTree(boolean moveAble,float refl,float damp, String modelID,float[] textureCoords,float[] position,float reflecY, float rotX, float rotY, float rotZ,float scale) 
    {
		super(new ModelBasic(false,2,10,refl,damp,"objectsandterrain/",new Vector4f(1F,2.5F,0F,0F),modelID,true,false),position,rotX,rotY,rotZ,reflecY,scale);
		this.textureCoords = textureCoords;
		this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.reflecY = reflecY;
        this.position.y -= 0.5F;
        this.scale = scale;
        this.model.skipAlpha = 0.5F;
        this.GenerateFromSeed();
        this.materialType = 4;
        this.model.Disable_CULL_FACE = false;
        this.canMove = moveAble;
        this.position.x += random.nextInt(45);
        this.position.z += random.nextInt(45);
    }
	
	public void GenerateFromSeed()
	{
		String coords = ""+(position.x*position.y*position.z);
		float C =  (seed.charAt(coords.length()/3))/(coords.charAt(seed.length()/5))-1;
		if(C < 0)
		{
			C = 0;
		}
		this.scale += C;
		this.rotY += C*1000F;
	}
	
	private boolean walkThroughTree = false;
	private float goToX = -666;
	private float goToZ = -666;
	private float moveXOld = 0F;
	private float moveZOld = 0F;
	private int shakeTimer = 0;
	
	protected float fallMotion = 0F;
	
	@Override
	public void updateRenderer()
    {
		if(this.fallMotion > 0.01F)
	    {
	    	this.fallMotion = 0.01F;
	    }
	 
	 	float fall = this.fallMotion + (0.015F * (TheStructureWorld.TheStructureWorld.theWorld.StructureWorldInfo.gravity / 10F));
	 	
		if((Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null)) < (this.position.y - fall) + 0.5F)
	 	{
	 		this.position.y -= fall;
	 		this.fallMotion = fall;
	 	}
		else if((Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null)) > (this.position.y + fall + fall) + 0.5F)
		{
			this.position.y += fall;
			this.fallMotion = fall;
		}
		else if((Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null)) < (this.position.y - 0.05F) + 0.5F)
		{
			this.position.y = (Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null));
			this.fallMotion = 0;
		}
		
		
		if(!this.walkThroughTree)
		{
			 if(this.rotX > 0F)
			 {
				 this.rotX -= 0.02F;
			 }
			 else  if(this.rotX < 0F)
			 {
				 this.rotX += 0.02F;
			 }
			 if(this.rotZ > 0F)
			 {
				 this.rotZ -= 0.02F;
			 }
			 else  if(this.rotZ < 0F)
			 {
				 this.rotZ += 0.02F;
			 }
		}
		
		if(TheStructureWorld.TheStructureWorld.thePlayer.hasMoved && this.canMove)
		{
		 EntityPlayer player = TheStructureWorld.TheStructureWorld.thePlayer;
		 if(!this.walkThroughTree && this.position.z > player.posZ - (2F) && this.position.z < player.posZ + (2F) && this.position.y > player.posY - (1F * this.scale) && this.position.y < player.posY + (1F * this.scale) && this.position.x > player.posX - (2F) && this.position.x < player.posX + (2F))
		 {
			 this.moveZ = -((float) player.motionX / 1.6F);
			 this.moveX = ((float) player.motionZ / 1.6F);
			 this.moveXOld = this.moveZ * 30F;
			 this.moveZOld = this.moveX * 30F;
			 if(this.moveXOld > 10F)
			 {
				 this.moveXOld = 10F;
			 }
			 if(this.moveXOld > -10F)
			 {
				 this.moveXOld = -10F;
			 }
			 
			 if(this.moveZOld > 10F)
			 {
				 this.moveZOld = 10F;
			 }
			 if(this.moveZOld > -10F)
			 {
				 this.moveZOld = -10F;
			 }
			 
			 if(this.moveX > 0.1F)
			 {
				 this.moveX = 0.1F;
			 }
			 else  if(this.moveX < -0.1F)
			 {
				 this.moveX = -0.1F;
			 }
			 
			 if(this.moveZ > 0.1F)
			 {
				 this.moveZ = 0.1F;
			 }
			 else if(this.moveZ < -0.1F)
			 {
				 this.moveZ = -0.1F;
			 }
			 this.walkThroughTree = true;
		 }
		}

		for(int i2=0;i2<22;++i2)
		{
		if(this.walkThroughTree)
		{
		 if(this.moveX > 0.001F)
		 {
			 this.moveX -= 0.0001F;
		 }
		 else if(this.moveX < -0.001F)
		 {
			 this.moveX += 0.0010F;
		 }
		 else
		 {
			 this.moveX = 0F;
		 }
		 
		 if(this.moveZ > 0.001F)
		 {
			 this.moveZ -= 0.0001F;
		 } 
		 else if(this.moveZ < -0.001F)
		 {
			 this.moveZ += 0.0001F;
		 }
		 else
		 {
			 this.moveZ = 0F;
		 }
		 }
		}
		 
		 for(int i=0;i<12;++i)
		 {
			if(this.walkThroughTree)
			{

		 if(this.moveX > -0.005F && this.moveX < 0.005F && (this.rotX > 0 || this.rotX < 0))
		 {
			 if(this.goToX == -666)
			 {
				 if(this.rotX < 0)
				 {
					 this.goToX = this.moveXOld;
				 }
				 else if(this.rotX > 0)
				 {
					 this.goToX = -this.moveXOld;
				 }
			 }
			  
			 if(this.rotX > this.goToX - 1F && this.rotX < this.goToX + 1F)
			 {
				 this.goToX = -(this.goToX / 1.4F);
				 ++this.shakeTimer;
				 if(this.shakeTimer > 3)
				 {
				 this.goToX = -666F; 
				 this.goToZ = -666F; 
				 this.moveX = 0; 
				 this.moveZ = 0; 
				 this.walkThroughTree = false;
				 }
			 }
			 else if(this.rotX < this.goToX - 1F)
			 {
				 float movement = 0.0025F * (this.goToX - this.rotX);
				 if(movement > 0.015F){movement = 0.015F;}
				 this.rotX += movement;
			 }
			 else if(this.rotX > this.goToX + 1F)
			 {
				 float movement = 0.0025F * (this.rotX - this.goToX);
				 if(movement > 0.015F){movement = 0.015F;}
				 this.rotX -= movement;
			 }
		 }
		 
		 if(this.moveZ > -0.005F && this.moveZ < 0.005F && (this.rotZ > 0 || this.rotZ < 0))
		 {
			 if(this.goToZ == -666F)
			 {
				 if(this.rotZ < 0)
				 {
					 this.goToZ = this.moveZOld;
				 }
				 else if(this.rotZ > 0)
				 {
					 this.goToZ = -this.moveZOld;
				 }
			 }
		
			 if(this.rotZ > this.goToZ - 0.1F && this.rotZ < this.goToZ + 0.1F)
			 {
				 this.goToZ = -(this.goToZ / 1.4F);
				 ++this.shakeTimer;
				 if(this.shakeTimer > 3)
				 {
				 this.goToX = -6669F; 
				 this.goToZ = -6669F; 
				 this.moveX = 0; 
				 this.moveZ = 0; 
				 this.walkThroughTree = false;
				 }
			 }
			 else if(this.rotZ < this.goToZ - 1F)
			 {
				 float movement = 0.0025F * (this.goToZ - this.rotZ);
				 if(movement > 0.015F){movement = 0.015F;}
				 this.rotZ += movement;
			 }
			 else if(this.rotZ > this.goToZ + 1F)
			 {
				 float movement = 0.0025F * (this.rotZ - this.goToZ);
				 if(movement > 0.015F){movement = 0.015F;}
				 this.rotZ -= movement;
			 }
		 }
		 if(this.walkThroughTree && this.moveX > -0.005F && this.moveX < 0.005F && this.rotX > -1.5F && this.rotX < 1.5F)
		 {
			 this.moveX = 0; 
		 }
		 else if(this.walkThroughTree)
		 {
			 this.rotX += this.moveX;
		 }
		 
		 if(this.walkThroughTree && this.moveZ > -0.005F && this.moveZ < 0.005F && this.rotZ > -1.5F && this.rotZ < 1.5F)
		 {
			 this.moveZ = 0; 
		 }
		 else if(this.walkThroughTree)
		 {
			 this.rotZ += this.moveZ;
		 }
		 }
    	}
    }
	
	 public static int treeRenderDistance = 5;
	 private int renderTree = 0;

		
	 @Override
	 public boolean renderModel(NormalMappingShader shader)
	 {
		 	GL11.glDisable(GL11.GL_BLEND);
			shader.loadTransformationMatrix(TheStructureWorld.TheStructureWorld.entityRenderer.camera.createTransformationMatrix(new Vector3f(this.getPosition().x,this.getPosition().y - this.reflecY,this.getPosition().z),this.getRotX(),this.getRotY(), this.getRotZ(), this.getScale()));
		 	GL11.glCallList(model.glListID);
			return true;
	 }
	
}