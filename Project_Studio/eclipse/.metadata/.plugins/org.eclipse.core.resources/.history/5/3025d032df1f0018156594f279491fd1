package nl.thestructureworld.client.renderer;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.KeyAndOtherSettings;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.terrainandobjects.TerrainDirt;
import nl.thestructureworld.terrainandobjects.TerrainObjectStone;
import nl.thestructureworld.terrainandobjects.ObjectTree;
import nl.thestructureworld.world.World;

public class RenderTerrain
{
	/**
	 * Draw the Object
	 */
	Tessellator modelDrawer = Tessellator.instance;
	
    /** The minimum X value for rendering (default 0.0). */
    private double renderMinX;

    /** The maximum X value for rendering (default 1.0). */
    private double renderMaxX;

    /** The minimum Y value for rendering (default 0.0). */
    private double renderMinY;

    /** The maximum Y value for rendering (default 1.0). */
    private double renderMaxY;

    /** The minimum Z value for rendering (default 0.0). */
    private double renderMinZ;

    /** The maximum Z value for rendering (default 1.0). */
    private double renderMaxZ;

	TheStructureWorld worldstructure = TheStructureWorld.TheStructureWorld;

	public static World serverWorld;
  
    public RenderTerrain(){}
    
    /**
     *  Renders an object using the given texture.
     */
    public void renderTerrainandObjectUsingTexture(TerrainObject o)
    {
    	this.renderMinX = o.XMin;
        this.renderMaxX = o.YMax;
        this.renderMinY = o.XMax;
        this.renderMaxY = o.ZMin;
        this.renderMinZ = o.YMin;
        this.renderMaxZ = o.ZMax;
    }

    /**
     *  Renders an object using the given texture.
     * @param worldObj 
     * @param quality 
     */
    public void renderAllTerrain(TerrainObject o, double x, double y, double z, int quality)
    {	
    	if(this.serverWorld != null)
    	{
    	String texture = ""+serverWorld.getTerrainObjectDataInteger(x, y, z);	
    	if(o == TerrainObject.air){this.renderSky(o, x, y, z);}
    	if(o == TerrainObject.stone){this.renderStone(o, x, y, z,quality/1388D);}
    	if(o == TerrainObject.GreenPipe){this.renderHalfCircleNeg(x, y-0.2, z, 0.05D,1,-15,2,false);}
    	if(o == TerrainObject.unnamedObject){this.renderUnnamedObject((float)x, (float)y+0.8F, (float)z);}
    	if(o == TerrainObject.DirtTerrain){this.renderGround(this.serverWorld, o, x, y, z, quality);}
    	if(o == TerrainObject.DecorativeCreeperBush){this.renderCreeperBush(x, y, z);}
    	
    	if(o.isPlant()){
    	float f =(Float.parseFloat(""+texture.charAt(0)/6F));
        float f2 =(Float.parseFloat(""+texture.charAt(0)/75F));
    	if(FileBasicJava.containsNumber(""+texture.charAt(0)))
    	{
    	if((""+texture.charAt(0)).contains("0")){modelDrawer.setTranslation(x+0.48-(f/30F),z-0.23+(f2/30F));}
    	if((""+texture.charAt(0)).contains("1")){modelDrawer.setTranslation(x-0.32+(f2/30F),z+0.23-(f2/30F));}
    	if((""+texture.charAt(0)).contains("2")){modelDrawer.setTranslation(x-0.24+(f2/30F),z+0.43-(f/30F));}
    	if((""+texture.charAt(0)).contains("3")){modelDrawer.setTranslation(x+0.33-(f/30F),z-0.33+(f2/30F));}
    	if((""+texture.charAt(0)).contains("4")){modelDrawer.setTranslation(x+0.31-(f/30F),z+0.13-(f/30F));}
    	if((""+texture.charAt(0)).contains("5")){modelDrawer.setTranslation(x-0.24+(f2/30F),z-0.33+(f/30F));}
    	if((""+texture.charAt(0)).contains("6")){modelDrawer.setTranslation(x-0.4+(f2/30F),z-0.43+(f/30F));}
    	if((""+texture.charAt(0)).contains("7")){modelDrawer.setTranslation(x+0.1+(f/30F),z+0.47-(f/30F));}
    	if((""+texture.charAt(0)).contains("8")){modelDrawer.setTranslation(x-0.1+(f2/30F),z+0.33-(f/30F));}
    	if((""+texture.charAt(0)).contains("9")){modelDrawer.setTranslation(x-0.3+(f2/30F),z-0.33+(f2/30F));}
    	modelDrawer.setTranslation(y-(0.1+(f2/10F)));
    	}
    	modelDrawer.setColorOpaque_F(0.4F+f2, 0F+f, 0F+f);
    	if(o == TerrainObject.SpikePlant){this.renderSpikePlant();}
    	if(o == TerrainObject.Reeds){this.renderReeds(y,f2);}
    	if(o == TerrainObject.SmallFern){this.renderSmallFern(y,texture);}
    	if(o == TerrainObject.SmallCrop){this.renderSmallCrop(y);}
    	if(o == TerrainObject.TreeLeaf){this.renderTreeLeaf();}
    	if(o == TerrainObject.SmallLeaf){this.renderSmallLeaf(y);}
    	if(o == TerrainObject.Fern){this.renderFerns(y,0);}
    	if(o == TerrainObject.SpikeFern){this.renderBushPlants(false,y,0,0,texture,"SpikeFern");}
    	if(o == TerrainObject.ThickLeave){this.renderBushPlants(false,y,0.1,0,texture,"ThickLeaf");}
    	if(o == TerrainObject.HighBush){this.renderBushPlants(true,y,0.0,0.2,texture,"HighBush");}
    	if(o == TerrainObject.Bush){this.renderBushPlants(false,y,0.4,0.2,texture,"Bush");}
    	if(o == TerrainObject.TreeBush){this.renderBushPlants(false,y,0.0,0.4,texture,"TreeBush");}
    	
    	if(o == TerrainObject.jungleGrass)
    	{
    		this.renderSmallGrass(x-0.6,y-0.1,z,0);
    		this.renderSmallGrass(x-0.3,y-0.1,z,0);
    		this.renderSmallGrass(x    ,y-0.1,z,0);
    		this.renderSmallGrass(x-0.6,y-0.1,z+0.25+(f/32),0);
    		this.renderSmallGrass(x-0.3,y-0.1,z+0.25+(f2/65),0);
    		this.renderSmallGrass(x    ,y-0.1,z+0.25+(f2/43),0);
    		this.renderSmallGrass(x-0.6,y-0.1,z-0.25-(f2/48),0);
    		this.renderSmallGrass(x-0.3,y-0.1,z-0.25-(f/86),0);
    		this.renderSmallGrass(x    ,y-0.1,z-0.25-(f2/39),0);
    	}
    	if(o == TerrainObject.jungleGrassSmall)
    	{
    		this.renderSmallGrass(x-0.6,y-0.1,z,-0.2);
    		this.renderSmallGrass(x-0.3,y-0.1,z,-0.2);
    		this.renderSmallGrass(x    ,y-0.1,z,-0.2);
    		this.renderSmallGrass(x-0.6,y-0.1,z+0.25+(f/32),-0.2);
    		this.renderSmallGrass(x-0.3,y-0.1,z+0.25+(f2/65),-0.2);
    		this.renderSmallGrass(x    ,y-0.1,z+0.25+(f2/43),-0.2);
    		this.renderSmallGrass(x-0.6,y-0.1,z-0.25-(f2/48),-0.2);
    		this.renderSmallGrass(x-0.3,y-0.1,z-0.25-(f/86),-0.2);
    		this.renderSmallGrass(x    ,y-0.1,z-0.25-(f2/39),-0.2);	
    	}
    	if(o == TerrainObject.jungleGrassNormal)
    	{
    		this.renderSmallGrass(x-0.6,y-0.1,z,-0.1);
    		this.renderSmallGrass(x-0.3,y-0.1,z,-0.1);
    		this.renderSmallGrass(x    ,y-0.1,z,-0.1);
    		this.renderSmallGrass(x-0.6,y-0.1,z+0.25+(f/32),-0.1);
    		this.renderSmallGrass(x-0.3,y-0.1,z+0.25+(f2/65),-0.1);
    		this.renderSmallGrass(x    ,y-0.1,z+0.25+(f2/43),-0.1);
    		this.renderSmallGrass(x-0.6,y-0.1,z-0.25-(f2/48),-0.1);
    		this.renderSmallGrass(x-0.3,y-0.1,z-0.25-(f/86),-0.1);
    		this.renderSmallGrass(x    ,y-0.1,z-0.25-(f2/39),-0.1);	
    	}
    	}}
    	}
    
   
    double grassLeftOrRight = 0;
	double grassMovement = 0.001;
	double grassMovementRandom = 0;
	
	 double cornLeftOrRight = 0;
	 double cornMovement = 0.001;
	 double cornMovementRandom = 0;
	
	public void grassSwingAnimation()
	{
		if(grassLeftOrRight > (-0.7-grassMovementRandom) && grassLeftOrRight < (-0.5)){grassMovement-=0.00001;}
    	if(grassLeftOrRight >  (0.5) && grassLeftOrRight <  (0.7+grassMovementRandom)){grassMovement+=0.00001;}
    	grassLeftOrRight -=grassMovement;grassLeftOrRight -=grassMovement;
	}
	
	public void cornSwingAnimation()
	{
		if(cornLeftOrRight > (-0.7-cornMovementRandom) && cornLeftOrRight < (-0.5)){cornMovement-=0.00001;}
    	if(cornLeftOrRight >  (0.5) && cornLeftOrRight <  (0.7+cornMovementRandom)){cornMovement+=0.00001;}
    	cornLeftOrRight -=cornMovement;cornLeftOrRight -=cornMovement;
	}

	
	public void randomGrassNummer()
	{
    	if(this.rand.nextInt(100)==0){double i = this.rand.nextInt(9)/30D;if((0.7+grassMovementRandom) < i ){grassMovementRandom = i;}}
       	if(this.rand.nextInt(100)==0){double i = this.rand.nextInt(9)/30D;if((0.7+cornMovementRandom) < i ){cornMovementRandom = i;}}
	}
	
    public void renderSmallGrass(double x,double y,double z,double TP)
    {  	   	
        modelDrawer.setTranslation(x,y,z);
    	modelDrawer.addVertexWithUV(0.6, 0.0,1.0,0.4+TP,  0.3);
    	modelDrawer.addVertexWithUV(0.6, 0.0,0.0,0.3+TP,  0.3);
    	modelDrawer.addVertexWithUV(1.0+grassLeftOrRight,   1.4,0.0+(cornLeftOrRight*1.3),0.3+TP,  0.2);
    	modelDrawer.addVertexWithUV(1.2+grassLeftOrRight, 0.8,1.0+(cornLeftOrRight*1.3),0.4+TP,  0.2);

    	modelDrawer.addVertexWithUV(0.65+(grassLeftOrRight*1.1), 1.1,0.994+(cornLeftOrRight*1.3),0.4+TP,     0.2);
    	modelDrawer.addVertexWithUV(0.25+(grassLeftOrRight*1.4), 1.2,-0.036+(cornLeftOrRight*1.3),0.3+TP,  0.2);
    	modelDrawer.addVertexWithUV(0.83, 0,0.1,0.3+TP,  0.3);
    	modelDrawer.addVertexWithUV(0.65, 0,1.1,0.4+TP,0.3);
    	
    	modelDrawer.addVertexWithUV(0.65, 0,1.1,0.4+TP,0.3);
    	modelDrawer.addVertexWithUV(0.83, 0,0.05,0.3+TP,0.3);
    	modelDrawer.addVertexWithUV(0.25+(grassLeftOrRight*1), 1.2,-0.04+(cornLeftOrRight*1.3),0.3+TP,0.2);
    	modelDrawer.addVertexWithUV(0.65+(grassLeftOrRight*1), 1.1,0.99+(cornLeftOrRight*1.3),0.4+TP,0.2);
 
    	modelDrawer.addVertexWithUV(0.02+(grassLeftOrRight*1.0), 1.3+0.3+(cornLeftOrRight*1.3),-0.15,0.4+TP,  0.2);
    	modelDrawer.addVertexWithUV(1.2+(grassLeftOrRight*1.0), 1.17,0.54+0.3+(cornLeftOrRight*1.3),0.3+TP,  0.2);
    	modelDrawer.addVertexWithUV(1.3, 0.0,0.42+0.3,0.3+TP,  0.3);
    	modelDrawer.addVertexWithUV(0.4, 0.0,0.6+0.3,0.4+TP,  0.3);
    	
    }
    
    public void renderBushPlants(boolean High,double y,double i,double v,String s,String name)
    {	
    	double F1=0.0;
    	double F2=0.0;
    	double H;
    	double YY = 0;
    	if(High)
    	{
    	H=(Float.parseFloat(""+s.charAt(0)/75F));	
    	}
    	else if(s.contains("1")||s.contains("8")||s.contains("4"))
    	{
    		F1=0.1;
    		F2=0.1;
    		H=0.0;
    		modelDrawer.setTranslation(y-0.2);
    	}
    	else
    	{
    		F1=0.0;
    		F2=0.0;
    		H=0.0;
    		if(name.contains("ThickLeaf")){YY = 0.2D;}
    		modelDrawer.setTranslation(y-0.4);
    	}
    	if(name.contains("SpikeFern"))
    	{
    		modelDrawer.addVertexWithUV(1.0, 0.41+YY,1.0,0.9,  0.1);
        	modelDrawer.addVertexWithUV(1.0, 0.41+YY,0.0,0.9,  0.0);
        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,0.0,1.0,  0.0);
        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,1.0,1.0,  0.1);	
    	}
    	if(name.equals("TreeBush"))
    	{
    		modelDrawer.addVertexWithUV(1.0, 0.4+YY,1.0,0.9,  0.5);
        	modelDrawer.addVertexWithUV(1.0, 0.4+YY,0.0,0.9,  0.4);
        	modelDrawer.addVertexWithUV(0.0, 0.4+YY,0.0,1,  0.4);
        	modelDrawer.addVertexWithUV(0.0, 0.4+YY,1.0,1,  0.5);	
        	modelDrawer.addVertexWithUV(1.0, 0.6+YY,1.0,0.9,  0.5);
        	modelDrawer.addVertexWithUV(1.0, 0.6+YY,0.0,0.9,  0.4);
        	modelDrawer.addVertexWithUV(0.0, 0.6+YY,0.0,1,  0.4);
        	modelDrawer.addVertexWithUV(0.0, 0.6+YY,1.0,1,  0.5);	
    	}
    	if(name.equals("Bush"))
    	{
    		modelDrawer.addVertexWithUV(1.0, 0.41+YY,1.0,0.5,  0.3);
        	modelDrawer.addVertexWithUV(1.0, 0.41+YY,0.0,0.5,  0.2);
        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,0.0,0.6,  0.2);
        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,1.0,0.6,  0.3);	
    	}
    	if(name.contains("ThickLeaf"))
    	{
    		modelDrawer.addVertexWithUV(1.0, 0.3+YY,1.0,0.7,  0.3);
        	modelDrawer.addVertexWithUV(1.0, 0.3+YY,0.0,0.7,  0.2);
        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,0.0,0.8,  0.2);
        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,1.0,0.8,  0.3);
        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,1.0,0.8,  0.3);
        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,0.0,0.8,  0.2);
        	modelDrawer.addVertexWithUV(1.0, 0.3+YY,0.0,0.7,  0.2);
        	modelDrawer.addVertexWithUV(1.0, 0.3+YY,1.0,0.7,  0.3);	
    	}
    	if(name.contains("HighBush"))
    	{
    	modelDrawer.setTranslation(y-0.4);
    	modelDrawer.addVertexWithUV(1.0, 0.5,1.0,0.8,  0.3);
    	modelDrawer.addVertexWithUV(1.0, 0.5,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.5,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.5,1.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.5,1.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.5,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.5,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.5,1.0,0.8,  0.3);
    	
    	modelDrawer.addVertexWithUV(1.1, 0.7,1.1,0.8,  0.3);
    	modelDrawer.addVertexWithUV(1.1, 0.7,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.7,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.7,1.1,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.7,1.1,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.7,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(1.1, 0.7,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(1.1, 0.7,1.1,0.8,  0.3);
    	
    	modelDrawer.addVertexWithUV(1.1, 0.9,1.0,0.8,  0.3);
    	modelDrawer.addVertexWithUV(1.1, 0.9,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.9,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.9,1.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.9,1.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.9,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(1.1, 0.9,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(1.1, 0.9,1.0,0.8,  0.3);
    	
    	modelDrawer.addVertexWithUV(1.0, 1.1,1.0,0.8,  0.3);
    	modelDrawer.addVertexWithUV(1.0, 1.1,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 1.1,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 1.1,1.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 1.1,1.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 1.1,0.0,0.9,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 1.1,0.0,0.8,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 1.1,1.0,0.8,  0.3);
    	}
    	modelDrawer.addVertexWithUV(0.5, 0.7+H,1.,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(0.5, 0.7+H,0.0,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.5, 0.7+H,0.0,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.5, 0.7+H,1.,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(0.8, 0.7+H,0.5,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(0.1, 0.7+H,0.5,		0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.1, 0.7+H,0.5,		0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.8, 0.7+H,0.5,		0.9-i+F2,0.1+v);
    	modelDrawer.addTranslation(0.105,0.16);  
    	
    	modelDrawer.addVertexWithUV(0., 0.7+H,0.7,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(0.788, 0.7+H,0.0,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.788, 0.7+H,0.0,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0., 0.7+H,0.7,		0.9-i+F2,0.1+v);         	
    	
    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(0.088, 0.7+H,0.0,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.088, 0.7+H,0.0,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);   
    	
    	modelDrawer.addTranslation(-0.2,0.16);  
    	modelDrawer.addVertexWithUV(0.3, 0.7+H,0.7,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(0.788, 0.7+H,-0.3,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.788, 0.2,-0.3,	1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.3, 0.2,0.7,		1-i-F1,0.1+v);
    	
    	modelDrawer.addVertexWithUV(0.3, 0.2,0.7,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(0.788, 0.2,-0.3,	1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.788, 0.7+H,-0.3,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.3, 0.7+H,0.7,		0.9-i+F2,0.1+v);  
    	
    	modelDrawer.addTranslation(0.5,-0.3);
    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);
    	modelDrawer.addVertexWithUV(-0.388, 0.7+H,0.3,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(-0.388, 0.2,0.3,	1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
    	
    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
    	modelDrawer.addVertexWithUV(-0.388, 0.2,0.3,	1-i-F1,0.0+v);
    	modelDrawer.addVertexWithUV(-0.388, 0.7+H,0.3,	0.9-i+F2,0.0+v);
    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);   
    }
    
    public void renderFerns(double y, float f2)
    {	
    	modelDrawer.setTranslation(y-0.2);  
    	modelDrawer.addVertexWithUV(1.0, 0.3,1.0,0.9,  0.4);
    	modelDrawer.addVertexWithUV(1.0, 0.3,0.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.3,0.0,1,  0.3);
    	modelDrawer.addVertexWithUV(0.0, 0.3,1.0,1,  0.4);
    	
    	modelDrawer.addVertexWithUV(0.0, 0.3,1.0,1,  0.4);
    	modelDrawer.addVertexWithUV(0.0, 0.3,0.0,1,  0.3);
    	modelDrawer.addVertexWithUV(1.0, 0.3,0.0,0.9,  0.3);
    	modelDrawer.addVertexWithUV(1.0, 0.3,1.0,0.9,  0.4);
    	
    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,1.,		0.9,0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,0.0,	0.9,0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1,0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1,0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1,0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1,0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,0.0,	0.9,0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,1.,		0.9,0.2);
    	modelDrawer.addVertexWithUV(0.8, 0.7+f2,0.5,		0.9,0.2);
    	modelDrawer.addVertexWithUV(0.1, 0.7+f2,0.5,		0.9,0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1,0.1);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1,0.2);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1,0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1,0.1);
    	modelDrawer.addVertexWithUV(0.1, 0.7+f2,0.5,		0.9,0.1);
    	modelDrawer.addVertexWithUV(0.8, 0.7+f2,0.5,		0.9,0.2);
    	modelDrawer.addTranslation(0.105,0.16);  
    	modelDrawer.addVertexWithUV(0., 0.7+f2,0.7,		0.9,0.2);
    	modelDrawer.addVertexWithUV(0.788, 0.7+f2,0.0,	0.9,0.1);
    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1,0.1);
    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1,0.2);
    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1,0.2);
    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1,0.1);
    	modelDrawer.addVertexWithUV(0.788, 0.7+f2,0.0,	0.9,0.1);
    	modelDrawer.addVertexWithUV(0., 0.7+f2,0.7,		0.9,0.2);         	
    	modelDrawer.addVertexWithUV(0.7, 0.7+f2,0.7,		0.9,0.2);
    	modelDrawer.addVertexWithUV(0.088, 0.7+f2,0.0,	0.9,0.1);
    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1,0.1);
    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1,0.2);
    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1,0.2);
    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1,0.1);
    	modelDrawer.addVertexWithUV(0.088, 0.7+f2,0.0,	0.9,0.1);
    	modelDrawer.addVertexWithUV(0.7, 0.7+f2,0.7,		0.9,0.2);    	
    }
    
    public void renderSmallLeaf(double y)
    {
    	modelDrawer.setTranslation(y-0.2); 
    	modelDrawer.addVertexWithUV(1.01, 0.51,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(1.01, 0.51,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.21,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.21,  1.0,  0.3,    0.2);
    	
    	modelDrawer.addVertexWithUV(0.99, 0.21,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(0.99, 0.21,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.51,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.51,  1.0,  0.3,    0.2);
    	
    	modelDrawer.addVertexWithUV(1.02, 0.21,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(1.02, 0.51,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.51,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.21,  1.0,  0.3,    0.2);
    	
    	modelDrawer.addVertexWithUV(1.02, 0.51,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(1.03, 0.21,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.03, 0.21,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.51,  1.0,  0.3,    0.2);
    }
    
    public void renderTreeLeaf()
    {
    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.2,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.2,  0.2);
    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.2,  0.2);
    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.2,  0.2);
    }
    
    public void renderSmallCrop(double y)
    {
    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.1,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.2,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.0,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,1.0,0,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.57,1.0,0.1,  0.2);
    	modelDrawer.addVertexWithUV(1.0, -0.13,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.0, -0.17,0.0,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.56,0.98,0,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.57,-0.063,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.27,-0.02,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, -0.098,1.0,0,  0.2);
    	modelDrawer.setTranslation(y-0.4);
    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0,  0.1);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0,  0.2);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0,  0.1);
    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.1,  0.2);
    }
    
    public void renderSmallFern(double y, String texture2)
    {
    	double i;
    	double i2 = 0.0D;
    	double i3 = 0.0D;
    	double i4 = 0.0D;
    	double i5 = 0.0D;
    	String texture = ""+texture2.charAt(0);
    	if((""+texture).contains("0")||(""+texture).contains("8")){i = 0.1;}
    	else if((""+texture).contains("1")){i = 0.2;}
    	else if((""+texture).contains("2")||(""+texture).contains("9")){i = 0.3;}
    	else if((""+texture).contains("3")||(""+texture).contains("6")){i = 0.5;}
    	else if((""+texture).contains("4")){i = 0.0;}
    	else{i = 0.4D;}
    	if(texture2.length() == 2)
    	{
    		if((""+texture2).contains("0")||(""+texture2).contains("8")){i2 = 0.1;}
        	else if((""+texture2).contains("1")){i2 = 0.2;}
        	else if((""+texture2).contains("2")||(""+texture2).contains("9")){i2 = 0.3;}
        	else if((""+texture2).contains("3")||(""+texture2).contains("6")){i2 = 0.5;}
        	else if((""+texture2).contains("4")){i2 = 0.0;}
        	else{i2 = 0.4D;}	
    	}
    	if(texture2.length() == 2)
    	{
    		if((""+texture2).contains("3")||(""+texture2).contains("9")){i3 = 0.1;}
        	else if((""+texture2).contains("1")){i3 = 0.2;}
        	else if((""+texture2).contains("2")||(""+texture2).contains("8")){i3 = 0.3;}
        	else if((""+texture2).contains("0")||(""+texture2).contains("4")){i3 = 0.5;}
        	else if((""+texture2).contains("6")){i3 = 0.0;}
        	else{i3 = 0.4D;}	
    	}
    	if(texture2.length() == 2)
    	{
    		if((""+texture2).contains("4")){i4 = 0.1;}
        	else if((""+texture2).contains("8")){i4 = 0.2;}
        	else if((""+texture2).contains("2")){i4 = 0.3;}
        	else if((""+texture2).contains("1")||(""+texture2).contains("6")){i4 = 0.5;}
        	else if((""+texture2).contains("0")){i4 = 0.0;}
        	else{i4 = 0.4D;}	
    	}
    	if((""+texture2).contains("8")){i5 = 0.1;}
        else if((""+texture2).contains("0")){i5 = 0.2;}
        else if((""+texture2).contains("2")){i5 = 0.3;}
        else if((""+texture2).contains("7")||(""+texture2).contains("6")){i5 = 0.5;}
        else if((""+texture2).contains("6")){i5 = 0.0;}
        else{i5 = 0.4D;}	
    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.3+i,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.2,0.0,0.3+i,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.0,0.4+i,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,1.0,0.4+i,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.57,1.0,    	    0.4+i2,  0.2);
    	modelDrawer.addVertexWithUV(1.0, -0.13,0.0, 	    0.4+i2,  0.1);
    	modelDrawer.addVertexWithUV(0.0, -0.17,0.0,       	0.3+i2,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.56,0.98, 		0.3+i2,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,			0.4+i2,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.57,-0.063,		0.4+i2,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.27,-0.02,		0.3+i2,  0.1);
    	modelDrawer.addVertexWithUV(0.0, -0.098,1.0,		0.3+i2,  0.2);
    	modelDrawer.setTranslation(y-0.4);
    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,		0.4+i3,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,		0.4+i3,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		0.3+i3,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		0.3+i3,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		0.3+i4,  0.2);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		0.3+i4,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,		0.4+i4,  0.1);
    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,		0.4+i4,  0.2);
    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,		0.4+i5,  0.2);
    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,		0.4+i5,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		0.3+i5,  0.1);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		0.3+i5,  0.2);
    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		0.3+i5,  0.2);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		0.3+i5,  0.1);
    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,		0.4+i5,  0.1);
    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,		0.4+i5,  0.2);
    }
    
    public boolean renderFastBush = true;
    public void renderCreeperBush(double x, double y, double z)
    {
    		double	XX = this.serverWorld.getTerrainObjectDataInteger(x, y, z)/10D;
    		if(this.renderFastBush && this.serverWorld.getTerrainObjectDataInteger(x, y, z) == 4)
    		{
    		modelDrawer.setTranslation(x, y-0.18, z-0.1);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.2);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.3);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.4);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.5);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.6);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.7);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.8);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
    		}
    		modelDrawer.setTranslation(x, y-0.2, z);
    		modelDrawer.addVertexWithUV(0.246, 1.19,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.246, 1.19,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.246, 0.194,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.246, 0.194,1.0,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.246, 0.194,1.0,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.246, 0.194,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.246, 1.19,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.246, 1.19,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.765, 0.19674917,1.0,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.765, 0.19674917,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.765, 1.2,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.765, 1.2,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.765, 1.2,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.765, 1.2,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.765, 0.19674917,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.765, 0.19674917,1.0,0.3+XX,0.1);
    		if(this.serverWorld.getTerrainObjectDataInteger(x, y, z) == 4)
    		{
    		modelDrawer.addVertexWithUV(0.9, 1.1166533,0.98,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.826, 1.1478585,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.13, 1.1152191,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.13, 1.1,0.98,0.3+XX,0.1);	
    		modelDrawer.addVertexWithUV(0.13, 1.1,0.98,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.13, 1.1152191,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.826, 1.1478585,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.9, 1.1166533,0.98,0.4+XX,0.1);
    		}
    		modelDrawer.addVertexWithUV(0.16, 1.19,0.035,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.88, 1.149,0.07,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.88, 0.16,0.07,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.16, 0.13,0.042,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.16, 0.13,0.042,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.88, 0.16,0.07,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.88, 1.149,0.07,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.16, 1.19,0.035,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
    }
    
  
    public void renderReeds(double y, float f2)
    {	
    	modelDrawer.setTranslation(y-0.2);   	
    	modelDrawer.addVertexWithUV(0.5+(grassLeftOrRight*0.1)+(cornLeftOrRight*0.1), 1.2+f2,1+(cornLeftOrRight*0.1),0.3,0.1);
    	modelDrawer.addVertexWithUV(0.5+(grassLeftOrRight*0.1)+(cornLeftOrRight*0.1), 1.2+f2,0.0+(cornLeftOrRight*0.1),0.3,0.0);
    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.5, 0.2,1,0.1,0.1);
    	
    	    	
    	modelDrawer.addVertexWithUV(1+(grassLeftOrRight*0.1)+(cornLeftOrRight*0.1), 1.2+f2,0.5+(cornLeftOrRight*0.1),0.3,0.1);
    	modelDrawer.addVertexWithUV(0+(grassLeftOrRight*0.1)+(cornLeftOrRight*0.1), 1.2+f2,0.5+(cornLeftOrRight*0.1),0.3,0.0);
    	modelDrawer.addVertexWithUV(0, 0.2,0.5,0.1,0.0);
    	modelDrawer.addVertexWithUV(1, 0.2,0.5,0.10,0.1);
    	
        	
    	
    }
    
    public void renderTree(double x, double y, double z)
    {
    	modelDrawer.addVertexWithUV(1+x, 1+y+0.2, 1+z, 1,1);
    	modelDrawer.addVertexWithUV(1+x, 1+y+0.2, 0+z, 1,0);
    	modelDrawer.addVertexWithUV(0+x, 1+y+0.2, 0+z, 0,0);
    	modelDrawer.addVertexWithUV(0+x, 1+y+0.2, 1+z,0,1);
    }
     
    public static List<ArrayListConsole> ArrayListConsole = new ArrayList<ArrayListConsole>();
    
    public static class ArrayListConsole
    {
    	public float x;
    	public float y;
    	public float z;
    	public String objectName = "";
    	public double X;
    	public double Y;
    	public int pointNumber;
    	public int ModelNumber;
    	public ArrayListConsole(float x,float y, float z,String name, double d, double dd,int n,int m)
    	{
    		this.x = x;
    		this.y = y;
    		this.z = z;
    		this.objectName = name;
    		this.X = d;
    		this.Y = dd;
    		this.pointNumber = n;
    		this.ModelNumber = m;
    	}
    }
   
   /**
    *Renders an object using the given texture.
    */
    public void renderUnnamedObject(float x, float y, float z)
    {	
	    //for(int id=0;id<this.ArrayListConsole.size();++id)
	    {	
	    	//if(KeyAndOtherSettings.Point == -1)
	    	{
	    	//KeyAndOtherSettings.MoveObject(this.ArrayListConsole.get(id));
	    	}
	    	//else if(this.ArrayListConsole.get(id).pointNumber == KeyAndOtherSettings.Point)
	    	{
	    	//KeyAndOtherSettings.MoveObject(this.ArrayListConsole.get(id));
	    	}
	    	//modelDrawer.addVertexWithUV(this.ArrayListConsole.get(id).x+x, this.ArrayListConsole.get(id).y+y, this.ArrayListConsole.get(id).z+z, this.ArrayListConsole.get(id).Y, this.ArrayListConsole.get(id).X);
	    }
	    
	    //for(int i=0;i<8;++i)
	    {
	    modelDrawer.addVertexWithUV(x+0.4,   y, z+0.2, 0D, 1D);
    	modelDrawer.addVertexWithUV(x+0.6,   y, z+0.2, 1D, 1D);
    	
    	modelDrawer.addVertexWithUV(x+0.2, 	 y, z, 1D, 0D);
    	modelDrawer.addVertexWithUV(x-0.2,       y, z, 0D, 0D);
	    }
    	
    }
    
    public void renderSky(TerrainObject o, double x, double y, double z)
    {	
    	modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, 20.0D+z, 0.9D, 0.94D);
    	modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, -20.0D+z, 0.9D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, 20.0D+z, 1.0D, 0.94D);
    	modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, 20.0D+z, 0.0D, 0.0D);
    	modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, 20.0D+z, 0.0D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, 20.0D+z, 1.0D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 0.0D+y, 20.0D+z, 1.0D, 0.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 0.0D+y, -20.0D+z, 1.0D, 0.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, -20.0D+z, 0.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, -20.0D+z, 0.0D, 0.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, -20.0D+z, 1.0D, 0.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, 20.0D+z, 0.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, 20.0D+z, 0.0D, 0.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 0.0D+y, 20.0D+z, 0.0D, 0.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 60.0D+y, 20.0D+z, 0.0D, 1.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 0.0D+y, -20.0D+z, 1.0D, 0.0D);
    }
       
    /**
     * Renders an object using the given texture.
     * @param worldObj 
     */
    public void renderGround(World world, TerrainObject o, double x, double y, double z, double q)
    {	
    	String texture = ""+serverWorld.getTerrainObjectDataInteger((int)x,(int)y,(int)z);
    	if(texture.length() < 3)
    	{
    		texture = ""+this.rand.nextInt(9)+""+this.rand.nextInt(9);
    	}
    	double randomX = 0.05D*Integer.parseInt(""+texture.charAt(0));
    	double randomY = 0.05D*Integer.parseInt(""+texture.charAt(1));
    	double Q = (q/500); 
    	
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 1  	    
    	 modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.25, 	0.05D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z, 		0.05D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z,			0.0D+randomX, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.25,  	0.0D+randomX, 0.05D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z, 		0.1D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z,		0.05D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.25, 0.05D+randomX-Q, 0.05D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.25, 	0.15D+randomX-Q, 0.05D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z, 		0.15D+randomX-Q, 0.0D+randomY);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z, 		0.1D+randomX-Q, 0.0D+randomY);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.25, 		 0.2D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z, 			 0.2D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z, 		 0.15D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.25,  0.15D+randomX-Q, 0.05D+randomY-Q);
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 2  	
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.5, 	0.05D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.25, 	0.05D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.25,	0.0D+randomX, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.5,  	0.0D+randomX, 0.1D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.25,	0.05D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.5, 	0.05D+randomX-Q, 0.1D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.5, 	0.15D+randomX-Q, 0.1D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.25, 	0.15D+randomX-Q, 0.05D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.5, 		 0.2D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.25, 		 0.2D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.25,  0.15D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.5,   0.15D+randomX-Q, 0.1D+randomY-Q);
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 3 	    
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.75, 	0.05D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.5, 	0.05D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.5,		0.0D+randomX, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.75,  	0.0D+randomX, 0.15D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.5,	0.05D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.75, 0.05D+randomX-Q, 0.15D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.75, 	0.15D+randomX-Q, 0.15D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.5, 	0.15D+randomX-Q, 0.1D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.75, 		 0.2D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.5, 		 0.2D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.5,   0.15D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.75,  0.15D+randomX-Q, 0.15D+randomY-Q);	  
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 4    
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+1, 		0.05D+randomX-Q, 0.2D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.75, 	0.05D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.75,	0.0D+randomX, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+1,  		0.0D+randomX, 0.2D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+1, 		0.1D+randomX-Q, 0.2D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.75,	0.05D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+1, 	0.05D+randomX-Q, 0.2D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+1, 		0.15D+randomX-Q, 0.2D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.75, 	0.15D+randomX-Q, 0.15D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+1, 	0.1D+randomX-Q, 0.2D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+1, 		 0.2D+randomX-Q, 0.2D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.75, 		 0.2D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.75,  0.15D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+1,   	 0.15D+randomX-Q, 0.2D+randomY-Q);		  
    }
    
    
    /**
     * Renders an object using the given texture.
     */
    public void renderSpikePlant()
    {	
    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.1,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.2,0.0,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.2,0.0,0.0,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.2,1.0,0.0,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.57,1.0,0.1,0.1);
    	modelDrawer.addVertexWithUV(1.0, -0.13,0.0,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.0, -0.17,0.0,0.0,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.56,0.98,0.0,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.1,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.57,-0.063,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.27,-0.02,0.0,0.0);
    	modelDrawer.addVertexWithUV(0.0, -0.098,1.0,0.0,0.1);
   }

    
    /**
     *  Renders an object using the given texture.
     */
    public void renderDiamond_Plate(TerrainObject o, double x, double y, double z)
    {	
    	   double var26 = x + this.renderMinX;
 	       double var28 = x + this.renderMaxX;
 	       double var32 = z + this.renderMinZ;
 	       double var34 = z + this.renderMaxZ;
 	       double var30 = y + this.renderMaxY;
 	       modelDrawer.addVertexWithUV(var28, var30, var34, 0.35D, 0.0D);
 	       modelDrawer.addVertexWithUV(var28, var30, var32, 0.35D, 0.05D);
 	       modelDrawer.addVertexWithUV(var26, var30, var32, 0.4D, 0.05D);
 	       modelDrawer.addVertexWithUV(var26, var30, var34, 0.4D, 0.0D);
    }
    
    /**
     *  Renders an object using the given texture.
     * @param quality 
     */
    public void renderStone(TerrainObject o, double x, double y, double z, double quality)
    {
    	if(o instanceof TerrainObjectStone)
    	{
    	   double var26 = x + this.renderMinX;
   	       double var28 = x + this.renderMaxX;
   	       double var32 = z + this.renderMinZ;
   	       double var34 = z + this.renderMaxZ;
   	       double var30 = y + this.renderMaxY;
   	       modelDrawer.addVertexWithUV(var28, var30, var34, 0.0D+quality, 0.0D+quality);
   	       modelDrawer.addVertexWithUV(var28, var30, var32, 0.05D-quality, 0.0D+quality);
   	       modelDrawer.addVertexWithUV(var26, var30, var32, 0.05D-quality, 0.05D-quality);
   	       modelDrawer.addVertexWithUV(var26, var30, var34, 0.0D+quality, 0.05D-quality);
    	} 
    }
    
    public Random rand = new Random();
    
    
    /**
     * Half circle generator:
     * @param x: x position 
     * @param y: y position 
     * @param z: z position 
     * @param width: width between the two circles that are already connected
     * @param r: the variety of the +-Y and +-Z position and when it is lower than 5(If you set it yourself), 
     * there is no noticeable difference between the 'rough bark'.
     * @param maxExtra: how many parts down the Y position will be rendered.
     */
    public void renderHalfCircleNeg(double x, double y, double z, double width,int r,int maxExtra,double textureNumber,boolean innerNext)
    {	{
     		double XMN = x + this.renderMinX;
            double XMX = x + this.renderMaxX;
            double ZMIN = z + this.renderMinZ+0.525;
            double ZMAX = z + this.renderMinZ-0.025+0.5F;
            double YMX4 = y + this.renderMaxY+0.1D;
            double YMX = y + this.renderMaxY+0.1D;
            double YMX2 = y + this.renderMaxY+0.1D;
            double YMX3 = y + this.renderMaxY+0.1D;
            double TX = 0.2D+(textureNumber*0.05D);
            double TX1 = 0.2D+textureNumber*0.05D;
            double TX3 = 0.25D+textureNumber*0.05D;
            double TX2= 0.25D+textureNumber*0.05D;
            double XXX = 0.05;
    	    double XExtra = 0.006;
    	    double inner = 0.0D;
    	    if(innerNext)
    	    {
    	    	inner = 0.05D;
    	    }
            double TY = 0.0D;
            double TY3 = 0.0D; 
            double TY1 = 0.003D;
            double TY2 = 0.003D;
            for(double extra = 0;extra>maxExtra;extra-=1)
       	    {
            ZMIN = ZMIN-XXX; 
            ZMAX = ZMAX+XXX; 
            extra = extra+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
            YMX = YMX+(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
            YMX2 = YMX2-(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
            modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN+XXX+0.1D,TX+inner, TY);
       	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1+inner, TY1);
    	    modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX3+inner, TY2);
            modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN+XXX+0.1D, TX2+inner, TY3);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN+XXX+0.1D,TX, TY);
            modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX1, TY1);
            modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX3, TY2);
            modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN+XXX, TX2, TY3);
       	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1, TY1);
       	    modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN+XXX+0.1D, TX, TY); 
       	    modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN+XXX,TX2, TY3);
       	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3, TY2);   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    	  	modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN+XXX,TX, TY);
       	    modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX1, TY1);
    	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3, TY2);
            modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN+XXX, TX2, TY3);
            TY  = TY1;
            TY3 = TY2;
            if(extra > -12)
            {
            TY1 = TY1+0.003D;
            TY2 = TY2+0.003D;
            }
            else
            {
            TY1 = TY1-0.003D;
            TY2 = TY2-0.003D;
            }
            YMX4 = YMX;
            XXX *= 0.999+(extra/100D);
       	   }}
        {
    	double XMN = x + this.renderMinX;
        double XMX = x + this.renderMaxX;
        double ZMIN = z + this.renderMinZ+0.525;
        double ZMAX = z + this.renderMinZ-0.025+0.5F;
        double YMX4 = y + this.renderMaxY+0.1D;
        double YMX = y + this.renderMaxY+0.1D;
        double YMX2 = y + this.renderMaxY+0.1D;
        double YMX3 = y + this.renderMaxY+0.1D;
        double TX = 0.2D+(textureNumber*0.05D);
        double TX1 = 0.2D+textureNumber*0.05D;
        double TX3 = 0.25D+textureNumber*0.05D;
        double TX2= 0.25D+textureNumber*0.05D;
        double XXX = 0.05;
	    double XExtra = 0.006;
	    double inner = 0.0D;
	    if(innerNext)
	    {
	    	inner = 0.05D;
	    }
        double TY = 0.0D;
        double TY3 = 0.0D; 
        double TY1 = 0.003D;
        double TY2 = 0.003D;
        for(double extra = 0;extra>maxExtra;extra-=1)
   	    {
        ZMIN = ZMIN+XXX; 
        ZMAX = ZMAX-XXX; 
        extra = extra+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
        YMX = YMX+(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
        YMX2 = YMX2-(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
        modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN-XXX+0.1D,TX, TY);
   	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1, TY1);
	    modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX3, TY2);
        modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN-XXX+0.1D, TX2, TY3);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN-XXX+0.1D,TX, TY);
        modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX1, TY1);
        modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX3, TY2);
        modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN-XXX, TX2, TY3);
   	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1, TY1);
   	    modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN-XXX+0.1D, TX, TY); 
   	    modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN-XXX,TX2, TY3);
   	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3, TY2);   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN-XXX,TX+inner, TY);
   	    modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX1+inner, TY1);
	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3+inner, TY2);
        modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN-XXX, TX2+inner, TY3);
        TY  = TY1;
        TY3 = TY2;
        if(extra > -12)
        {
        TY1 = TY1+0.003D;
        TY2 = TY2+0.003D;
        }
        else
        {
        TY1 = TY1-0.003D;
        TY2 = TY2-0.003D;
        }
        YMX4 = YMX;
        XXX *= 0.999+(extra/100D);
   	   } }
    }
      

   
  
   
 
   
}


       