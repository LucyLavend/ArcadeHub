package nl.miystengine.client.renderer.entity;

import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.gui.OptionMenu;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.basicmodels.ArrayListOBJModels;
import nl.miystengine.client.renderer.terrain.Terrain;
import nl.miystengine.client.shaders.Camera;
import nl.miystengine.client.shaders.normal.NormalMappingShader;
import nl.miystengine.client.water.WaterRender;
import nl.miystengine.entity.EntityPlayer;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import paulscode.sound.libraries.LibraryJavaSound.Exception;

public class LODSmallModel extends BasicEntityRender
{
	private int LOD_Texture = -1;
	private float distanceScale;
	private boolean renderNormalMap;
	
	public LODSmallModel(float circlecolliderLenght,String texture,String model,Object classType) 
	{
	        super(new ModelBasic(false,0,10,2F,2F,"objectsandterrain/" + texture,new Vector4f(1F,2.5F,0F,0F),texture,true,false),new float[]{0,0,0}, 0F, 0F, 0F, 0F, 1F);
	        this.textureCoords = new float[]{1,1,0,0};
	        this.classTypeName = classType.toString();
	        this.rotX = 0F;
	        this.rotY = 0F;
	        this.rotZ = 0F;
	        this.reflecY = 0F;
	        this.scale = 1F;
	        this.model.shineDamper = 2F;
	        this.model.skipAlpha = 0.5F;
	        this.textureName = texture;
	        this.materialType = 3;
	        this.canRoll = false;
	        this.canPush = false;
	        EntityRenderer.OBJModelList.add(new ArrayListOBJModels(model));
	        this.model.skipMainTextureCall = true;
	        this.model.glListID = this.getModelID(model); 
	        this.LOD_Texture = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/" + texture + "_Low.png");   
	        
	        if(this.LOD_Texture == -1)
	        {
	            this.LOD_Texture = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/" + texture + "_Low.png");      	
	        }
	}
	
	 public LODSmallModel(float circlecolliderLenght,String texture,Object classType) 
	 {
	        super(new ModelBasic(false,0,10,2F,2F,"objectsandterrain/" + texture,new Vector4f(1F,2.5F,0F,0F),texture,true,false),new float[]{0,0,0}, 0F, 0F, 0F, 0F, 1F);
	        this.textureCoords = new float[]{1,1,0,0};
	        this.classTypeName = classType.toString();
	        this.rotX = 0F;
	        this.rotY = 0F;
	        this.rotZ = 0F;
	        this.reflecY = 0F;
	        this.scale = 1F;
	        this.model.shineDamper = 2F;
	        this.model.skipAlpha = 0.5F;
	        this.textureName = texture;
	        this.materialType = 3;
	        this.canRoll = false;
	        this.canPush = false;
	        EntityRenderer.OBJModelList.add(new ArrayListOBJModels(texture));
	        this.model.skipMainTextureCall = true;
	        for(int i = 0;i < EntityRenderer.OBJModelList.size();++i)
	        {
	        	if(EntityRenderer.OBJModelList.get(i).nameOBJ.contains(texture))
	            {
	                this.model.glListID = EntityRenderer.OBJModelList.get(i).idModel;
	            }        
	        }
	        this.LOD_Texture = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/" + texture + "_Low.png");   
	    }
	 
	public LODSmallModel(int materialType,boolean renderNormalMap,String texture,String modelID,float[] textureCoords,float[] position) 
	{
        super(new ModelBasic(false,0,10,2F,2F,"objectsandterrain/"+texture,new Vector4f(1F,2.5F,0F,0F),modelID,true,false),position, 0F, 0F, 0F, 0F, 0.6F);
        this.textureCoords = textureCoords;
        this.rotX = 0F;
        this.rotY = 0F;
        this.rotZ = 0F;
        this.reflecY = 0F;
        this.scale = 1F;
        this.model.shineDamper = 2F;
        this.model.skipAlpha = 0.5F;
        this.materialType = materialType;
        this.canRoll = false;
        this.canPush = false;
        this.renderNormalMap = renderNormalMap;
        this.LOD_Texture = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/" + texture + "_Low.png");   
        EntityRenderer.OBJModelList.add(new ArrayListOBJModels(modelID));
        this.model.skipMainTextureCall = true;
        for(int i = 0;i < EntityRenderer.OBJModelList.size();++i)
        {
        	if(EntityRenderer.OBJModelList.get(i).nameOBJ.contains(modelID))
            {
                this.model.glListID = EntityRenderer.OBJModelList.get(i).idModel;
            }        
        }
	}
	

	@Override
	public void updateRenderer()
	{
		super.updateRenderer();
		this.applyGravityByWeight();
	}
	
	public void updateRenderFPS()
	{
		super.updateRenderFPS();
		if(MiystEngine.miystengine.theWorld.StructureWorldInfo.theGameType.getID() == 1)
		{
			Vector3f pos = MiystEngine.miystengine.entityRenderer.picker().getCurrentTerrainPoint();
				
			if(this.forgePickup)
	 		{
				if(pos != null)
				{
					this.position.x = pos.x;
					this.position.z = pos.z;
					this.position.y = Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false);
				}
	 		}
			
			if(this.placeAgain == 0 && Mouse.isButtonDown(0) && this.forgePickup)
			{
				this.forgePickup = false;
				this.alreadyPickedUp = false;
				this.addColor = new float[]{0F,0F,0F};
				this.placeAgain = 200;
			}
				
			if(!this.alreadyPickedUp && pos != null && this.position.y > pos.y - 5F && this.position.y < pos.y + 5F && this.position.z > pos.z - 2F && this.position.z < pos.z + 2F && this.position.x > pos.x - 2F && this.position.x < pos.x + 2F)
	     	{
				this.addColor = new float[]{1F,1F,1F};
				if(!MiystEngine.miystengine.thePlayer.isPlacingBuildable && this.placeAgain == 0 && Mouse.isButtonDown(1) && !this.forgePickup)
				{
					this.forgePickup = true;
					this.alreadyPickedUp = true;
					this.addColor = new float[]{1F,1F,1F};
					this.placeAgain = 200;
				}
	     	}
			else if(this.addColor[0] == 1F && this.addColor[1] == 1F && this.addColor[2] == 1F && !this.forgePickup)
			{
				this.addColor = new float[]{0F,0F,0F};
			}
		}
	}
	
	//Tree mesh not rendering the backpart
	//Mesh deformer for breaking down rocks
	//Load areas shouldn't search for txt file but only when the color on the map.png is different
	    
	 @Override
     public boolean renderModel(NormalMappingShader shader)
     {
    	super.renderModel(shader);
    	
    	EntityPlayer player = MiystEngine.miystengine.thePlayer;
    	
    	if(player.hasMoved)
    	{
    		distanceScale = this.getScale() - (Vector3f.sub(new Vector3f(Camera.camX,Camera.camY,Camera.camZ), this.position, null).lengthSquared() / (1000F * MiystEngine.miystengine.settings.LODdistanceSmall));
    	}
    	
    	if(distanceScale > 0)
        {
	    	if(MiystEngine.miystengine.settings.LODdistanceSmallTexture > 0 && this.position.z > player.posZ - MiystEngine.miystengine.settings.LODdistanceSmallTexture && this.position.z < player.posZ + MiystEngine.miystengine.settings.LODdistanceSmallTexture && 
	    	this.position.y > player.posY - 5F && this.position.y < player.posY + 5F && 
	    	this.position.x > player.posX - MiystEngine.miystengine.settings.LODdistanceSmallTexture && this.position.x < player.posX + MiystEngine.miystengine.settings.LODdistanceSmallTexture)
	    	{
	    		GL13.glActiveTexture(GL13.GL_TEXTURE13);
	    		GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.model.textureIDModel512x); 
	    		GL13.glActiveTexture(GL13.GL_TEXTURE12);
	    		if(this.renderNormalMap)
	    		{
	    			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.model.textureNormalMapping512x); 
	    		}
	    		else
	    		{
	    			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.noTexture);
	    		}
	    	}
	        else
	    	{
	        	GL13.glActiveTexture(GL13.GL_TEXTURE13);
	        	GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.LOD_Texture); 
	        	GL13.glActiveTexture(GL13.GL_TEXTURE12);
	        	if(this.renderNormalMap)
	    		{
	        		GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.model.textureNormalMapping512x); 
	    		}
	        	else
	        	{
	        		GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.noTexture);
	        	}
	    	}
	    	if(this.materialType == 6 || this.materialType == 18)
	    	{
	    		GL13.glActiveTexture(GL13.GL_TEXTURE12);
	    		GL11.glBindTexture(GL11.GL_TEXTURE_2D,WaterRender.waterNormalTexture);
	    	}
    	
	        shader.loadTransformationMatrix(MiystEngine.miystengine.entityRenderer.camera.createTransformationMatrix(new Vector3f(this.getPosition().x,this.getPosition().y - this.reflecY - (distanceScale / 5F),this.getPosition().z),this.getRotX(),this.getRotY(), this.getRotZ(), distanceScale));
	        GL11.glCallList(model.glListID);
        }
        return true;
     }
}