package nl.thestructureworld.client.renderer.terrain;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.IngameMenuAndOptionsGui;
import nl.thestructureworld.client.gui.console.ObjectList;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.ObjectRenderer;
import nl.thestructureworld.client.renderer.entity.BasicEntityRender;
import nl.thestructureworld.client.renderer.entity.EntityRockRenderer;
import nl.thestructureworld.client.renderer.entity.LODBasicModel;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListTerrain;
import nl.thestructureworld.client.renderer.entity.plants.EntityPineTree;
import nl.thestructureworld.client.renderer.entity.plants.EntityRenderSmallTree;
import nl.thestructureworld.client.shaders.CameraAndPlayerAnimations;
import nl.thestructureworld.client.shaders.Loader;
import nl.thestructureworld.client.shaders.RawModel;
import nl.thestructureworld.client.water.WaterRender;
import nl.thestructureworld.client.water.WaterTile;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.server.management.TheStructureWorldServer;
import nl.thestructureworld.world.World;

public class Terrain 
{
	public static String seed = "0";
	public float X = -5.5F;
	public float Z = -5.5F;
	public static BufferedImage worldMap;
	public static BufferedImage worldMapPos;
	public static Random rand = new Random();
	public static World world = TheStructureWorld.theWorld;
	public static String worldFolderName;
	static float heightR = 154;
	static int heightG = 1;
	static float heightB = 0;
	static float heightA = 0;
	public float Height = 0;
	static float heightStandard = 154;
    public static List<ArrayListBlendMap> blendMapList = new ArrayList<ArrayListBlendMap>();
    public static String folderName = "";
    private int seedNumber;
    
    public static String areacode4;
    public static String areacode5;
    public static String areacode6;
    public static String areacode7;
    public static String areacode8;
    public static String areacode9;
    public static String areacode10;
    public static String areacode11;
    public static String areacode12;
    
	public Terrain(String folderName,int seed)
	{
		objects();
	
		if(seed != -1)
        {
        	this.seed = seed + "";
        	this.seedNumber = seed;
        }
		else
		{
	        if(this.seed.contains("NOTSET"))
	        {
	        	this.seed = "" + rand.nextInt(999999999);
	        	this.seedNumber = Integer.parseInt(this.seed);
	        }
		}
		
		if(TheStructureWorld.TheStructureWorld.theWorld != null && TheStructureWorld.TheStructureWorld.theWorld.getStructureWorldInfo() != null)
        {
        	this.seed = TheStructureWorld.TheStructureWorld.theWorld.getStructureWorldInfo().seed;
        }

		heightGenerator = new HeightGenerator(seedNumber);
		this.folderName = folderName;
		try
		{
			worldFolderName = folderName;
			worldMap = ImageIO.read(new File(FileBasicJava.source+"/The Structure World/saves/"+folderName+"/blendMap.png"));
			worldMapPos = ImageIO.read(new File(FileBasicJava.source+"/The Structure World/saves/"+folderName+"/ObjectMapPosAndID.png"));
		}
		catch(IOException e)
		{
			System.out.println("Warning: No world Map found!");
			System.out.println("Location: "+FileBasicJava.source+"/The Structure World/saves/"+folderName+"/blendMap.png");
		}
		this.seedNumber = 0;
	}
	
	/**
	 * Float Array for Biome Data:
	 * Using Texture:
	 * Float 1: 1-3  How much Terrain Texture 1 will be random generated(Grass)
	 * Float 2: 1-3  How much Terrain Texture 2 will be random generated(Mossy Rock)
	 * Float 3: 1-3  How much Terrain Texture 3 will be random generated(Yellow Clay)
	 * @Comment: These '()' are the Basic Textures used now.
	 * 
	 * Roughness Terrain: 
	 * Float 1: (Grass)
	 * Float 2: (Mossy Rock)
	 * Float 3: (Yellow Clay)
	 */
	public static float[] biomeDifferences = 
	new float[]{
		3,2,7,
		1F,1.2F,1F,
		0F
	};
	
	static int width = 2500;
	static int height = 2500;
	private boolean generateSpawnisland = true;
	
	public Graphics2D genearteTerrain(boolean generateSpawnisland, Graphics2D gr,String areaCode,int x ,int z,float heightStandard)
	{
		gr.setColor(new Color(0F * 0.00392156862745098F, 0F * 0.00392156862745098F, 0F, 1F));
		gr.drawRect(x, z, 1, 1);
  		return gr;
	}
	
	/**
	 * Generates either a Flat World (Can be Edited in Forge Mode) or the Standard World but that can be altered before creating the World
	 * @param seed: A random number generated by the game....
	 * @param worldName: Name of the World and the Folder Name
	 * @param flatworld: Flat World for Custom Maps/Forge Mode Maps
	 * @param biomeDifferences: see biomeDifferences.....
	 * 
	 * 
	 * removeTerrainTypes: World Generates: 0 = background terrain(Dirt), 1 = texture terrain 1(Grass), 2 = texture terrain 2(Moss Rock),3 = texture terrain 3(Yellow Clay)
	 */
	public void createWorldmap(int seed,String worldName,int worldType,float[] biomeDifferences)
	{  
	  FileBasicJava.createFolder(FileBasicJava.sources+"/saves/"+worldName+"/",true);
	  FileBasicJava.createFolder(FileBasicJava.sources+"/saves/"+worldName+"/objects",true);
      BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
      Graphics2D g2d = bufferedImage.createGraphics(); 
      rand.setSeed(seed);
      //Generate Meters, 0.1 Meters and add blendmaps
      for(int x = 0;x <= width;++x)
      {
    	  for(int z = 0;z <= height;++z)
          {
    		  int removeTerrainTypes = 0;
    		  int removeBlendTypes = 0;
    		  
    		  
    		  if(rand.nextInt(250) == 0)
    		  {
    			  int wholeListRandomSpawner = rand.nextInt(RenderListObjects.size());
	    		  if(rand.nextInt(RenderListObjects.get(wholeListRandomSpawner).rarety * 100) == 0)
	    		  {
	    			  heightB = wholeListRandomSpawner + 1;
	    		  }
    		  }
    		 
    		  if(worldType == 0 || worldType == 1)
    		  {
    			  //Random 'small' heights
	    		  int smallHeights = (int) (100F + ((Terrain.heightGenerator.generateHeight(x,z) - ((int)Terrain.heightGenerator.generateHeight(x,z))) * 100F));	
	    		  try
	          	  {
	    			  if(worldType == 0)
	    			  {
	    				  g2d.setColor(new Color((150 + ((int)Terrain.heightGenerator.generateHeight(x,z))) * 0.00392156862745098F, (smallHeights  + (returnHeight(x,z) * 30F)) * 0.00392156862745098F, heightB * 0.00392156862745098F, 1F));
	    			  }
	    			  else
	    			  {
	    				  g2d.setColor(new Color((150 + ((int)Terrain.heightGenerator.generateHeight(x,z))) * 0.00392156862745098F, (smallHeights  + (returnHeight(x,z) * 80F)) * 0.00392156862745098F, heightB * 0.00392156862745098F, 1F));
	    		      }
	          		  g2d.fillRect(x, z, 1, 1);
	          	  }
	          	  catch(Exception e)
	          	  {
	          		e.printStackTrace();
	          	  }
          	  	  heightR = heightStandard;
    		  }
    		  else if(worldType == 2)
    		  {
    			  String code = "" + ((x + 2) * (z + 1) * seed);
    			  //Random 'small' heights
	    		  int smallHeights = (int) (100F + ((Terrain.heightGenerator.generateHeight(x,z) - ((int)Terrain.heightGenerator.generateHeight(x,z))) * 100F));	
	    		  try
	          	  {
	          		  g2d.setColor(new Color((150 + ((int)Terrain.heightGenerator.generateHeight(x,z))) * 0.00392156862745098F, smallHeights * 0.00392156862745098F, heightB * 0.00392156862745098F, 1F));
	          		  g2d.fillRect(x, z, 1, 1);
	          	  }
	          	  catch(Exception e)
	          	  {
	          		e.printStackTrace();
	          	  }
          	  	  heightR = heightStandard;
    		  }
    		  else
    		  {
    			  g2d.setColor(new Color(heightR * 0.00392156862745098F, heightG * 0.00392156862745098F, heightB * 0.00392156862745098F, 1F));
            	  g2d.fillRect(x, z, 1, 1);
         	  } 
          }
      }

      FileBasicJava.writeBasic(new String[]{"none"}, FileBasicJava.sources+"/saves/"+worldName+"/World_Settings.txt");
      
      //Create PNG and save it
      File file = new File(FileBasicJava.sources+"/saves/"+worldName+"/blendMap.png");
      try 
      {
		ImageIO.write(bufferedImage, "png", file);
		heightR = 154;
		heightG = 1;
		heightB = 0;
		heightA = 0;
		RedValueFix = 0;
		GreenValueFix = 0;
		ValueFixTimer = 0;
	  } 
      catch(IOException e) 
      {
		e.printStackTrace();
	  }
      
      
      //r		0 - 99   z	   2 == solid
      //g		0 - 99   x	   2 == has plant growing
      //b		id
      //a       id
      
      //rotation1
      //256
      //256
      //256
      //grass type
      
      //rotation2
      //105
      //105
      //105
      //grass type
      
      
      File fileObjectmap = new File(FileBasicJava.sources+"/saves/"+worldName+"/ObjectMapPosAndID.png");
      BufferedImage bufferedImageObjects = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
      Graphics2D g2dO = bufferedImageObjects.createGraphics(); 
      try 
      {
		ImageIO.write(bufferedImageObjects, "png", fileObjectmap);
      } 
      catch (IOException e) 
      {
		e.printStackTrace();
      }
	}
	
	static int RedValueFix;
	static int GreenValueFix;
	static int ValueFixTimer;
	static HeightGenerator heightGenerator;
	
	/**
	 * Generates little bumps in the terrain to make it more natural.(Takes in the World Seed and X/Z so it will always be the same bump...)
	 * @param X The x position of one of the 9 areas, which contain 11 by 11 'meters'.
	 * @param Z The z position of one of the 9 areas, which contain 11 by 11 'meters'.
	 * @return a float beneath 0.
	 */
	public static float returnHeight(int X,int Z)
	{
			seed = "46981563762728";
			int XZCode=(X * 3 * Z) * X + (Z * 3 * 7 + X) * Z;
			
			if(XZCode < 0)
			{
				XZCode = -XZCode;
			}
			
			int codeAt=Integer.parseInt((XZCode + "").replace("-", "").substring(0,1));
			
			int height = XZCode %= 5 + (Double.parseDouble(seed.substring(codeAt,codeAt+1)) / 10);
		
			return Float.parseFloat("0." + height);
	}
	
	/**
	 * Calculate the Normals to generate shadows...
	 * @param X The x position of one of the 9 areas, which contain 11 by 11 'meters'.
	 * @param Z The z position of one of the 9 areas, which contain 11 by 11 'meters'.
	 * @return
	 */
	public Vector3f calculateNormal(int x,int z)
	{
		Vector3f normal = new Vector3f((returnHeight(x-1,z+1)-returnHeight(x+1,z+ 1))+0.001F,0.6F,(returnHeight(x-1,z-1)-returnHeight(x-1,z+1))+0.001F);
		normal.normalise();
		return new Vector3f(normal.x * 2,normal.y * 2,normal.z * 2);
	}
	
	public static float getHeightFromMap(int x,int z)
	{
		if(worldMap != null && x > 0  && z > 0 && z < worldMap.getHeight() && x < worldMap.getWidth())
		{	
			String getHeightFromGreen = "" + (0xFF & (worldMap.getRGB(x,z) >> 8));
			int terrains;
			float hsm = Float.parseFloat((getHeightFromGreen.charAt(getHeightFromGreen.length()-1) + "")) / 10F;
			
			if(getHeightFromGreen.length() != 1 && getHeightFromGreen.length() <= 3)
			{
				terrains = Integer.parseInt((getHeightFromGreen.charAt(getHeightFromGreen.length()-2) + ""));
			}
			else
			{
				terrains = 0;
			}
			return (0xFF & (worldMap.getRGB(x,z) >> 16)) + hsm;
		}
		else
		{
			return 154F;
		}
	}
	
	public static Random random = new Random();
	  
	public static float getHeightFromMap(int x,int z,boolean loadObjects)
	{
		if(x < 6 || x > width - 6 || z < 6 || z > width - 6)
		{
			return heightStandard + returnHeight(z,x);
		}
		else if(worldMap != null && x > 0  && z > 0 && z < worldMap.getHeight() && x < worldMap.getWidth())
		{	
			return ((0xFF & (worldMap.getRGB(x,z) >> 8)) / 100F) +  (0xFF & (worldMap.getRGB(x,z) >> 16));
		}
		else
		{
			return ((0xFF & (worldMap.getRGB(x,z) >> 8)) / 100F) +  (0xFF & (worldMap.getRGB(x,z) >> 16));
		}	
		//int red = 0xFF & ( argb >> 16);
		//int alpha = 0xFF & (argb >> 24);
		//int blue = 0xFF & (argb >> 0 );
		//int green = 0xFF & (argb >> 8 );
	}
	public static List<ArrayListRequest> RenderListObjects = new ArrayList<ArrayListRequest>();
	
	public void objects()
	{
			//Generation
			float[] thinTreeStats = new float[]{100F,160F,20,0};
			//End

	 	  	Terrain.RenderListObjects.add(new ArrayListRequest(new LODBasicModel(18,"plants/trees/Thin_Tree",LODBasicModel.class),thinTreeStats, true,new Vector3f(0,0,0)));

	 		Terrain.RenderListObjects.add(new ArrayListRequest(new EntityPineTree(18,"plants/trees/Pine_Tree",EntityPineTree.class),thinTreeStats, true,new Vector3f(0,0,0)));

	}
	
	public static float getHeightForRender(int x,int z,boolean loadObjects,int area)
	{
		if(loadObjects && (x > 6 && x < width - 6 && z > 6 && z < width - 6))
		{
			//File files = FileBasicJava.loadFileFromFolder(FileBasicJava.source+"/The Structure World/saves/"+folderName+"/objects/" + (int)x + " " + (int)z + ".txt");
			//if(files.exists())
			int getEntity = (0xFF & (worldMap.getRGB(x,z) >> 0));
			if(getEntity > 0 && RenderListObjects.size() > getEntity)
			{
				for(int id = 0;id<ObjectRenderer.ObjectsOwnTexture.size();++id)
		        {
					try
					{
						if(ObjectRenderer.ObjectsOwnTexture.get(id).entity.deleteMe && ObjectRenderer.ObjectsOwnTexture.get(id).entity.classTypeName.equals(RenderListObjects.get(getEntity - 1).entityClass))
						{
							ObjectRenderer.ObjectsOwnTexture.get(id).entity.position = new Vector3f(x,155.5F,z);	
							if(area == 4)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode4;
							}
							else if(area == 5)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode5;
							}
							else if(area == 6)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode6;
							}
							else if(area == 7)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode7;
							}
							else if(area == 8)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode8;
							}
							else if(area == 9)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode9;
							}
							else if(area == 10)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode10;
							}
							else if(area == 11)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode11;
							}
							else if(area == 12)
							{
								ObjectRenderer.ObjectsOwnTexture.get(id).entity.areaCode = areacode12;
							}
							ObjectRenderer.ObjectsOwnTexture.get(id).entity = ObjectRenderer.ObjectsOwnTexture.get(id).entity.generateData(ObjectRenderer.ObjectsOwnTexture.get(id).entity);
							ObjectRenderer.ObjectsOwnTexture.get(id).entity.materialType = RenderListObjects.get(getEntity - 1).material;
							ObjectRenderer.ObjectsOwnTexture.get(id).entity.textureName = RenderListObjects.get(getEntity - 1).texture;
							ObjectRenderer.ObjectsOwnTexture.get(id).entity.deleteMe = false;
							EntityRenderer.nmr.spawnEntity(RenderListObjects.get(getEntity - 1).entity);
							break;
						}
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
		        }
			}
			
		}
		
		if(x < 6 || x > width - 6 || z < 6 || z > width - 6)
		{
			return heightStandard + returnHeight(z,x);
		}
		else if(worldMap != null && x > 0  && z > 0 && z < worldMap.getHeight() && x < worldMap.getWidth())
		{	
			return ((0xFF & (worldMap.getRGB(x,z) >> 8)) / 100F) +  (0xFF & (worldMap.getRGB(x,z) >> 16));
		}
		else
		{
			return ((0xFF & (worldMap.getRGB(x,z) >> 8)) / 100F) +  (0xFF & (worldMap.getRGB(x,z) >> 16));
		}	
		//int red = 0xFF & ( argb >> 16);
		//int alpha = 0xFF & (argb >> 24);
		//int blue = 0xFF & (argb >> 0 );
		//int green = 0xFF & (argb >> 8 );
	}

	
	/**
	 * @param zStart Start of the area
	 * @param xStart Start of the area
	 * @param b 
	 * @param ArrayListTerrain
	 * @return: the 11 by 11 area with texture and Normals
	 */
	public RawModel generateTerrain(int zStart,int xStart, boolean b,int area)
	{   
		int distance = TheStructureWorld.TheStructureWorld.entityRenderer.renderDistance * 2;
		int count =  (11 + distance) *  (11 + distance);
		float[] vertices=new float[count*3];
		float[] normals=new float[count*3];
		float[] textureCoords=new float[count*2];
		int[] indices=new int[count*6];
		int vertexPointer=0;
		int pointer=0;
		for(int xx=0;xx <= 10 + distance;++xx)
		{
			for(int zz=0;zz <= 10 + distance;++zz)
			{	
				this.Height = getHeightForRender(zz+zStart,xx+xStart,b,area);

			    vertices[vertexPointer*3+0] = zz;
				vertices[vertexPointer*3+1] = this.Height;
				vertices[vertexPointer*3+2] = xx;	
				Vector3f normal = calculateNormal(zz+zStart,xx+xStart);
				normals[vertexPointer*3] =   normal.x;
				normals[vertexPointer*3+1] = normal.y;
				normals[vertexPointer*3+2] = normal.z;
				textureCoords[vertexPointer*2] = (xx+xStart) * 0.1F;
				textureCoords[vertexPointer*2+1] = (zz+zStart) * 0.1F;
				vertexPointer++;
				
				if(xx < 10 + distance)
				{
					if(zz < 10 + distance)
					{
						int x = (xx * (11 + distance)) + zz;
						int z = ((xx + 1) * (11 + distance)) + zz;
						indices[pointer++] = x;
						indices[pointer++] = z;
						indices[pointer++] = x+1;
						indices[pointer++] = x+1;
						indices[pointer++] = z;
						indices[pointer++] =  z+1;	
					}
				}
			}
		}
		
		return new Loader().loadToVAO(vertices, textureCoords, normals, indices);
	}
	
	/**
	 * Remove color from Texture
	 * @param textureInput
	 * @param skipColor
	 */
	public static void removePixelsFromTexture(String textureInput,float[] skipColor)
	{
		try 
		{
			BufferedImage texture = ImageIO.read(new File(FileBasicJava.source+"/The Structure World/"+ textureInput +".png"));
			int width = texture.getWidth();
			int height = texture.getHeight();
			
			BufferedImage terrainFixerImageFinal = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
   	      	Graphics2D graphics2DterrainFixer = terrainFixerImageFinal.createGraphics(); 
   	      
			for(int x = 0;x < width;++x)
		    {
		    	  for(int z = 0;z < height;++z)
		          {   
		    		 try 
		 			 {
		    			float red = (0xFF & (texture.getRGB(x,z) >> 16));
		    			float green = (0xFF & (texture.getRGB(x,z) >> 8));
		    			float blue = (0xFF & (texture.getRGB(x,z) >> 0));
		    			float alpha = 0xFF & (texture.getRGB(x,z) >> 24);
		    		    //if(alpha < 3)
		    		    //graphics2DterrainFixer.setColor(new Color(255F * 0.00392156862745098F,255F * 0.00392156862745098F ,255F * 0.00392156862745098F , 0F * 0.00392156862745098F));
		    		    //graphics2DterrainFixer.fillRect(x, z, 1, 1); 	   
		    		    if(red != skipColor[0] && green != skipColor[1] && blue != skipColor[2])
		    		    {
		    		    	graphics2DterrainFixer.setColor(new Color(red * 0.00392156862745098F,green * 0.00392156862745098F ,blue * 0.00392156862745098F , alpha * 0.00392156862745098F));
		    		    	graphics2DterrainFixer.fillRect(x, z, 1, 1); 
		    		    }
		    		    else
		    		    {
		    		    	graphics2DterrainFixer.setColor(new Color(255F * 0.00392156862745098F,255F  * 0.00392156862745098F,255F * 0.00392156862745098F , 0F * 0.00392156862745098F));
		    		    	graphics2DterrainFixer.fillRect(x, z, 1, 1); 
		    		    }
		 			 } 
					 catch (Exception e) 
					 {
						e.printStackTrace();
					 }
		 		}
		     }
		     graphics2DterrainFixer.dispose();
		     try 
			 {
		    	 File file = new File(FileBasicJava.source+"/The Structure World/"+ textureInput +"_Fixed.png");
		    	 ImageIO.write(terrainFixerImageFinal, "png", file);
			 } 
			 catch (IOException e) 
			 {
				e.printStackTrace();
			 }
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		
	}
	

}