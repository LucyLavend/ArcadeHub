package nl.thestructureworld.client.renderer;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.Callable;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.GameProfile;
import nl.thestructureworld.client.KeyAndOtherSettings;
import nl.thestructureworld.client.MouseControl;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.CreateStructureWorldGui;
import nl.thestructureworld.client.gui.GuiInventory;
import nl.thestructureworld.client.gui.IngameGui;
import nl.thestructureworld.client.gui.IngameMenuAndOptionsGui;
import nl.thestructureworld.client.gui.MainMenuGui;
import nl.thestructureworld.client.gui.ScaledResolution;
import nl.thestructureworld.client.model.ModelBook;
import nl.thestructureworld.client.multiplayer.WorldClient;
import nl.thestructureworld.client.renderer.basicmodels.RenderPipes;
import nl.thestructureworld.client.renderer.entity.BasicEntityRender;
import nl.thestructureworld.client.renderer.entity.EntityHoverRockRender;
import nl.thestructureworld.client.renderer.entity.EntityPlantRender;
import nl.thestructureworld.client.renderer.entity.EntityRenderFenceBasic;
import nl.thestructureworld.client.renderer.entity.EntityRockRenderer;
import nl.thestructureworld.client.renderer.entity.EntitySpiderSentinelRender;
import nl.thestructureworld.client.renderer.entity.EntityWoodObjectRender;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.entity.NormalMappingRenderer;
import nl.thestructureworld.client.renderer.terrain.MaterialADSS;
import nl.thestructureworld.client.renderer.terrain.RenderTerrain;
import nl.thestructureworld.client.renderer.terrain.Terrain;
import nl.thestructureworld.client.renderer.terrain.TerrainRenderer;
import nl.thestructureworld.client.renderer.terrain.TessellatorModel;
import nl.thestructureworld.client.renderer.texture.TextureManager;
import nl.thestructureworld.client.resources.IResourceManager;
import nl.thestructureworld.client.resources.IResourceManagerReloadListener;
import nl.thestructureworld.client.shaders.Light;
import nl.thestructureworld.client.shaders.Loader;
import nl.thestructureworld.client.shaders.Matrix;
import nl.thestructureworld.client.shaders.OBJLoader;
import nl.thestructureworld.client.shaders.RawModel;
import nl.thestructureworld.client.shaders.StaticShader;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;
import nl.thestructureworld.client.shaders.sky.SkyBoxRenderer;
import nl.thestructureworld.client.shaders.sky.SkyRenderer;
import nl.thestructureworld.client.shaders.terrain.TerrainShader;
import nl.thestructureworld.client.shaders.water.WaterShader;
import nl.thestructureworld.client.water.WaterFrameBuffers;
import nl.thestructureworld.client.water.WaterRenderer;
import nl.thestructureworld.client.water.WaterTile;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.EntityPlayer;
import nl.thestructureworld.entity.EntityPlayerSP;
import nl.thestructureworld.entity.EntitySpider;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.terrainandobjects.Material;
import nl.thestructureworld.tileentity.TileEntity;
import nl.thestructureworld.util.AxisAlignedBB;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.util.MouseFilter;
import nl.thestructureworld.util.MovingObjectPosition;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.util.ResourceLocation;
import nl.thestructureworld.util.Vec3;
import nl.thestructureworld.world.IWorldAccess;
import nl.thestructureworld.world.World;
import nl.thestructureworld.world.WorldServer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.BufferUtils;
import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.ARBOcclusionQuery;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.EXTTextureFilterAnisotropic;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.opengl.OpenGLException;
import org.lwjgl.util.glu.Cylinder;
import org.lwjgl.util.glu.Project;
import org.lwjgl.util.glu.Sphere;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import com.google.common.collect.Maps;
import com.google.gson.JsonSyntaxException;

//V-22 Osprey
//City of Teotihuacan
//Leaellynasaura

//The Alpha and The Omega are like light and darkness: one is needed so the other can exist.
//Take on of them away and there will be chaos.
//Others to much or the lack of the others.
//They can be recreated but it will come with a price.

//Tapejara
//https://www.youtube.com/watch?v=ZAS5b1UrIMI&t=1s compy sound

/**
 * Remove TextureAtlasSprite, not used anymore!!!!
 * Weather Effect in World.java
 * WorldAreaManager areBiomesViable need change? -> New Biome system in the make(Game readd biome from map texture)
 * TheStructureWorldServer needs removing unused code
 * TheStructureWorldServer func_147138_a to send data
 * NBTTagCompound Needs t0 be cleaned
 * EntityPlayerMP has unused code
 * @author cefas
 *
 */

public class EntityRenderer implements IWorldAccess
{
    public static WaterShader shaderW;
    public static TerrainShader ShaderT;
    public static NormalMappingShader shaderNormal;
    public static NormalMappingRenderer nmr;
    public static WaterRenderer waterRenderer;
    public static TerrainRenderer terrainRenderer;
    public static SkyRenderer skyRenderer;
	public static WorldRenderer worldRenderer = new WorldRenderer();
	public List tileEntities = new ArrayList();
    public static WorldClient theWorld;

    /** All render lists (fixed length 4) */
    public static RenderList allRenderLists = new RenderList();

    /**
     * The offset used to determine if a renderer is one of the sixteenth that are being updated this frame
     */
    int frustuttwheckOffset;
    
    public static boolean anaglyphEnable;

    /** A reference to the TheStructureWorld object. */
    public static TheStructureWorld ttw;
  
     /** Pointed entity */
    private Entity pointedEntity;

    private float debugCamYaw;
    private float prevDebugCamYaw;
    private float debugCamPitch;
    private float prevDebugCamPitch;
    private float debugCamFOV;
    private float prevDebugCamFOV;
   
    /** FOV modifier hand */
    private float fovModifierHand;

    /** FOV modifier hand prev */
    private float fovModifierHandPrev;

    /** FOV multiplier temp */
    private float fovMultiplierTemp;

    private double cameraYaw;
    private double cameraPitch;

    /** Previous frame time in milliseconds */
    private long prevFrameTime;


    private Random random;

    /**
     * Debug view direction (0=OFF, 1=Front, 2=Right, 3=Back, 4=Left, 5=TiltLeft, 6=TiltRight)
     */
    public int debugViewDirection;
   
    public EntityRenderer(TheStructureWorld p_i45076_1_)
    {
        this.prevFrameTime = TheStructureWorld.getSystemTime();
        this.random = new Random();
        this.ttw = p_i45076_1_;
    }

    /**
     * Updates the entity renderer
     */
    public void updateRenderer()
    {
        this.updateFovModifierHand();
        this.prevDebugCamYaw = this.debugCamYaw;
        this.prevDebugCamPitch = this.debugCamPitch;
        this.prevDebugCamFOV = this.debugCamFOV;
        if (this.ttw.renderViewEntity == null)
        {
            this.ttw.renderViewEntity = this.ttw.thePlayer;
        }
     }
    
    public static float mouseOverX,mouseOverY=155,mouseOverZ;

    /**
     * Finds what TerrainObject or object the mouse is over at the specified partial tick time. Args: partialTickTime
     */
    public void getMouseOver(float t)
    {
        if (this.ttw.renderViewEntity != null)
        {
            if (this.ttw.theWorld != null)
            {
                this.ttw.pointedEntity = null;
                double var2 = (double)this.ttw.playerController.getTerrainObjectReachDistance();
                this.ttw.objectMouseOver = this.ttw.renderViewEntity.rayTrace(var2, t);
                double var4 = var2;
                Vec3 var6 = this.ttw.renderViewEntity.getPosition(t);
                if (this.ttw.playerController.extendedReach())
                {
                    var2 = 6.0D;
                    var4 = 6.0D;
                }
                else
                {
                    if (var2 > 3.0D)
                    {
                        var4 = 3.0D;
                    }
                    var2 = var4;
                }
                if (this.ttw.objectMouseOver != null)
                {
                    var4 = this.ttw.objectMouseOver.hitVec.distanceTo(var6);
                }
                Vec3 var7 = this.ttw.renderViewEntity.getLook(t);
                Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
                this.pointedEntity = null;
                Vec3 var9 = null;
                float thisplayer = 1.0F;
                List var11 = this.ttw.theWorld.getEntitiesWithinAABBExcludingEntity(this.ttw.renderViewEntity, this.ttw.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)thisplayer, (double)thisplayer, (double)thisplayer));
                double var12 = var4; 
                for (int var14 = 0; var14 < var11.size(); ++var14)
                {
                    Entity var15 = (Entity)var11.get(var14);
                    if (var15.canBeCollidedWith())
                    {
                        float var16 = var15.getCollisionBorderSize();
                        AxisAlignedBB var17 = var15.boundingBox.expand((double)var16, (double)var16, (double)var16);
                        MovingObjectPosition var18 = var17.calculateIntercept(var6, var8);
                        if (var17.isVecInside(var6))
                        {
                            if (0.0D < var12 || var12 == 0.0D)
                            {
                                this.pointedEntity = var15;
                                var9 = var18 == null ? var6 : var18.hitVec;
                                var12 = 0.0D;
                            }
                        }
                        else if (var18 != null)
                        {
                            double var19 = var6.distanceTo(var18.hitVec);
                            if (var19 < var12 || var12 == 0.0D)
                            {
                                if (var15 == this.ttw.renderViewEntity.ridingEntity)
                                {
                                    if (var12 == 0.0D)
                                    {
                                        this.pointedEntity = var15;
                                        var9 = var18.hitVec;
                                    }
                                }
                                else
                                {
                                    this.pointedEntity = var15;
                                    var9 = var18.hitVec;
                                    var12 = var19;
                                }
                            }
                        }
                    }
                }
                if (this.pointedEntity != null && (var12 < var4 || this.ttw.objectMouseOver == null))
                {
                    this.ttw.objectMouseOver = new MovingObjectPosition(this.pointedEntity, var9);
                    if (this.pointedEntity instanceof EntityLivingBase)
                    {
                        this.ttw.pointedEntity = this.pointedEntity;
                    }
                }
            }
        }
    }

    /**
     * Update FOV modifier hand
     */
    private void updateFovModifierHand()
    {
        EntityPlayerSP var1 = (EntityPlayerSP)this.ttw.renderViewEntity;
        this.fovMultiplierTemp = var1.getFOVMultiplier();
        this.fovModifierHandPrev = this.fovModifierHand;
        this.fovModifierHand += (this.fovMultiplierTemp - this.fovModifierHand) * 0.5F;

        if (this.fovModifierHand > 1.5F)
        {
            this.fovModifierHand = 1.5F;
        }

        if (this.fovModifierHand < 0.1F)
        {
            this.fovModifierHand = 0.1F;
        }
    }

    /**
     * Changes the field of view of the player depending on if they are underwater or not
     */
    public float getFOVModifier(boolean p_78481_2_)
    {
        if (this.debugViewDirection > 0)
        {
            return 90.0F;
        }
        else
        {
            EntityPlayer var3 = (EntityPlayer)this.ttw.renderViewEntity;
            float var4 = 70.0F;

            if (p_78481_2_)
            {
                var4 = this.ttw.gameSettings.fovSetting;
                var4 *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev);
            }

            if (var3.getHealth() <= 0.0F)
            {
                float renderWorld = (float)var3.deathTime;
                var4 /= (1.0F - 500.0F / (renderWorld + 500.0F)) * 2.0F + 1.0F;
            }
            return var4 + this.prevDebugCamFOV + (this.debugCamFOV - this.prevDebugCamFOV);
        }
    }

    private void hurtCameraEffect(float p_78482_1_)
    {
        EntityLivingBase var2 = this.ttw.renderViewEntity;
        float var3 = (float)var2.hurtTime - p_78482_1_;
        float var4;

        if (var2.getHealth() <= 0.0F)
        {
            var4 = (float)var2.deathTime + p_78482_1_;
            GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
        }

        if (var3 >= 0.0F)
        {
            var3 /= (float)var2.maxHurtTime;
            var3 = MathHelper.sin(var3 * var3 * var3 * var3 * (float)Math.PI);
            var4 = var2.attackedAtYaw;
            GL11.glRotatef(-var4, 0.0F, 1.0F, 0.0F);
            GL11.glRotatef(-var3 * 14.0F, 0.0F, 0.0F, 1.0F);
            GL11.glRotatef(var4, 0.0F, 1.0F, 0.0F);
        }
    }
    
    public static float FOV;
    public static float Aspect;
    public static float zNear;
    public static float zFar;
    public static float yawn = 0;
    public static float pitch = 0;
   
    /**
     * sets up projection, view effects, camera position/rotation
     */
    private void setupCameraTransform(float i)
    {
        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glLoadIdentity();
        float var3 = 0.07F;
        Project.gluPerspective(this.getFOVModifier(true), (float)this.ttw.displayWidth / (float)this.ttw.displayHeight, zNear, zFar);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        GL11.glLoadIdentity();
        this.hurtCameraEffect(i);
        if(this.ttw.thePlayer.setEarthquake > 0)
        {
            float var6 = 5.0F / (i * i + 5.0F) - i * 0.04F;
            var6 *= var6;
            GL11.glRotatef(((float)i) * 20F, 0.0F, 1.0F, 1.0F);
            GL11.glScalef(1.0F / var6, 1.0F, 1.0F);
            GL11.glRotatef(-((float)i) * 20F, 0.0F, 1.0F, 1.0F);
        }
        EntityLivingBase var2 = this.ttw.renderViewEntity;
        if (!this.ttw.gameSettings.debugCamEnable)
        {
        	this.pitch = var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * i;
        	this.yawn = var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * i + 180.0F;
            GL11.glRotatef(pitch, 1.0F, 0.0F, 0.0F);
            GL11.glRotatef(yawn, 0.0F, 1.0F, 0.0F);
        }
    }
 
    /**
     * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
     */
    public void updateCameraAndRender(float ticker)
    {  
        TheStructureWorld.TheStructureWorld.framebuffer.bindFramebuffer(true);
        GL11.glEnable(GL11.GL_TEXTURE_2D);
        boolean var2 = Display.isActive();
        if (!var2 && this.ttw.gameSettings.pauseOnLostFocus && (!Mouse.isButtonDown(1)))
        {
            if (TheStructureWorld.getSystemTime() - this.prevFrameTime > 500L)
            {
                this.ttw.displayInGameMenu();
            }
        }
        else
        {
            this.prevFrameTime = TheStructureWorld.getSystemTime();
        }
        if (this.ttw.inGameHasFocus && var2)
        {
            this.ttw.mouseHelper.mouseXYChange();
            float var3 = this.ttw.gameSettings.mouseSensitivity * 0.6F + 0.2F;
            float var4 = var3 * var3 * var3 * 8.0F;
            float renderWorld = (float)this.ttw.mouseHelper.deltaX * var4;
            float var6 = (float)this.ttw.mouseHelper.deltaY * var4;
            byte var7 = 1;

            if (this.ttw.gameSettings.invertMouse)
            {
                var7 = -1;
            }
            this.ttw.thePlayer.setAngles(renderWorld, var6 * (float)var7);
        }
        if (!this.ttw.skipRenderWorld)
        {
            final ScaledResolution sr = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
            int w = sr.getScaledWidth();
            int h = sr.getScaledHeight();
            final int X = Mouse.getX() * w / this.ttw.displayWidth;
            final int Z = h - Mouse.getY() * h / this.ttw.displayHeight - 1;
            if (this.ttw.theWorld != null)
            {
            	this.renderWorld(ticker);
            	 if (!this.ttw.gameSettings.hideGUI || this.ttw.currentScreen != null)
                {
                    GL11.glAlphaFunc(GL11.GL_GREATER, 0.5F);
                    this.ttw.ingameGUI.renderGameOverlay(ticker, this.ttw.currentScreen != null, X, Z);
                }	
                if(this.secondspassed){this.secondspassed=false;}
            }
            else
            {
                GL11.glViewport(0, 0, this.ttw.displayWidth, this.ttw.displayHeight);
                GL11.glMatrixMode(GL11.GL_PROJECTION);
                GL11.glLoadIdentity();
                GL11.glMatrixMode(GL11.GL_MODELVIEW);
                GL11.glLoadIdentity();
                this.setupOverlayRendering();
            }

            if (this.ttw.currentScreen != null )
            {
                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
                try
                {
                  this.ttw.currentScreen.drawScreen(X, Z);
                }
                catch (Throwable var12)
                {
                    System.out.println("[Client thread/ERROR]: "+var12.getMessage());
                }
            }
        }
        GL11.glPushMatrix(); 
        GL11.glEnable(GL30.GL_CLIP_DISTANCE1);  
        //this.reflection();
        //this.refraction();
        GL11.glDisable(GL30.GL_CLIP_DISTANCE1);
        GL11.glPopMatrix();
     }

    
    public static WorldServer serverWorld;
    public static int onWorldLoaded = 0;
    public int WindStrengh = 1;
    
    public static boolean refreshArea4 = false;
    public static boolean refreshArea5 = false;
    public static boolean refreshArea6 = false;
    public static boolean refreshArea7 = false;
    public static boolean refreshArea8 = false;
    public static boolean refreshArea9 = false;
    public static boolean refreshArea10 = false;
    public static boolean refreshArea11 = false;
    public static boolean refreshArea12 = false;
    public static List<WaterTile> waterList = new ArrayList<WaterTile>();
    public static RawModel crate =   OBJLoader.loadObjModel("crate", new Loader());
    public static RawModel fern =    OBJLoader.loadObjModel("fern", new Loader());
    public static RawModel barrel =  OBJLoader.loadObjModel("barrel", new Loader());
    public static RawModel tree =    OBJLoader.loadObjModel("tree", new Loader());
    
    
    /**
     * The distance Normal Maps are calculated and which texture has to be used based on distance.
     * The normals are coming from a special texture and makes an object more detailed but it comes with fps drops.
     * Far away 
     */
    public static int NormalrenderDistance = 4;
    
    
    public static List<Light> light = new ArrayList<Light>();
    public static Terrain terrain;
    public static float[] skyColor;
	public static float fogDensity = 0.0007F;
	public static float fogGradient = 1.5F;
	public static List<ArrayListGLListObjects> modelList = new ArrayList<ArrayListGLListObjects>();
	public static WaterFrameBuffers buffer = new WaterFrameBuffers();
	public static float walkAnimation = 0F;	
	public static boolean incdecWalkAnimation = false;
	public static float drunkWalk = 0;
    public static float walkCrouchOrLayingDown = 1F;
    public static float sunColor = 0.1F;
    
	public void setFogColor(float[] color3F)
	{
		skyColor = new float[]{color3F[0],color3F[1],color3F[2],1F};	
	}
	
	public static void walkAnimation(EntityLivingBase base)
	{
		if(TheStructureWorld.TheStructureWorld.currentScreen==null)
		{
		if(((EntityPlayer)base).isCrouching()){walkCrouchOrLayingDown=0.2F;}
		else if(((EntityPlayer)base).isLayingdown()){walkCrouchOrLayingDown=0.01F;}
		else if(walkCrouchOrLayingDown != 1&&!((EntityPlayer)base).isCrouching()&&!((EntityPlayer)base).isLayingdown()){walkCrouchOrLayingDown=1F;}
		if(((EntityPlayer)base).walkType == 1){drunkWalk = 10;}
		else if(((EntityPlayer)base).walkType == 2&&walkAnimation>0.01F){drunkWalk=10;}
		else if(((EntityPlayer)base).walkType == 3&&walkAnimation<-0.01F){drunkWalk=10;}else{drunkWalk=0;}
		if(!incdecWalkAnimation){walkAnimation-= 0.01F;}
		if( incdecWalkAnimation){walkAnimation+= 0.01F;}
		if(!((EntityPlayer)base).isRunning()&&walkAnimation>0.08F+(drunkWalk/100)){incdecWalkAnimation=false;}
		if(!((EntityPlayer)base).isRunning()&&walkAnimation<-(0.08F+(drunkWalk/100))){incdecWalkAnimation=true;}
		if(((EntityPlayer)base).isRunning()&&walkAnimation>0.1F+(drunkWalk/100)){incdecWalkAnimation=false;}
		if(((EntityPlayer)base).isRunning()&&walkAnimation<-(0.1F+(drunkWalk/100))){incdecWalkAnimation=true;}
	}}
	
	public boolean terrainChanged = false;
    public static boolean loadOneTime = false;
    public int refershShaders = 0;
	
	public void renderWorld(float ticker)
    { 
		int time = (60*IngameGui.Hours)+IngameGui.minutes;
		EntityLivingBase base = this.ttw.renderViewEntity;
		if(System.nanoTime() > this.second+10000000)
        {
        this.secondspassed = true;
        this.second = System.nanoTime();
        }
		if(this.secondspassed)
	    {
		if(Keyboard.isKeyDown(Keyboard.KEY_F1)||this.terrainChanged)
		{
			this.worldRenderer.clearTerrain();
			this.terrain = new Terrain();
        	this.worldRenderer.terrain = new RenderTerrain(); 
			this.specialRefresh=true;
			((EntityPlayer)base).hasMoved=true;
			this.updateArea();
			this.terrainChanged = false;
		}
		else if(((EntityPlayer)base).hasMoved)
        {
        if(((EntityPlayer)base).hasMoved && ((EntityPlayer)base).onGround)
        {
        EntityRenderer.walkAnimation(((EntityPlayer)base));
        }
        else if(EntityRenderer.walkAnimation>0.01F)
        {
        EntityRenderer.walkAnimation-= 0.01F;
        }
        else if(EntityRenderer.walkAnimation<-0.01F)
        {
        EntityRenderer.walkAnimation+= 0.01F;
    	}
        
        }
		MouseControl.setTime();
		if(this.waterRenderer!=null){this.waterRenderer.updateWater();}
		GameProfile.AdminCommands();
		if(MouseControl.getObject==-1&&MouseControl.getWaterObject==-1&&TheStructureWorld.TheStructureWorld.canEditTerrain>0){--TheStructureWorld.TheStructureWorld.canEditTerrain;}       
	    }
		
		if(loadOneTime){ModelBasic.loadTerraintextures("blendMap","objectsandterrain/Ground/Stone","objectsandterrain/Ground/Grass "+IngameMenuAndOptionsGui.basicTerrain,"objectsandterrain/Ground/Sand "+IngameMenuAndOptionsGui.basicTerrain,"objectsandterrain/Ground/Ground Terrain "+IngameMenuAndOptionsGui.basicTerrain);loadOneTime=false;}
		
		
		if(((EntityPlayer)base).hasMoved){this.updateArea();}
		MouseControl.controlForgeObjects();
        if(MouseControl.changeTime){
		if(IngameGui.Hours<12){sunColor = time*0.00138F;}
		else{sunColor=(1440-time)*0.00138F;}}
		
        if(light.size()>0&&sunColor>0.03F&&sunColor<0.9F)
		{
		this.light.get(0).setColour(new Vector3f(sunColor,sunColor,sunColor));
		}

		this.setFogColor(new float[]{sunColor,sunColor,sunColor});
		Matrix.setCamposAndPitch((float)nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraX,(float)nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraY+(EntityRenderer.walkAnimation*EntityRenderer.walkCrouchOrLayingDown),(float)nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraZ, EntityRenderer.pitch,EntityRenderer.walkAnimation*(EntityRenderer.drunkWalk));  
		this.getMouseOver(ticker);
        GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
        GL11.glClearColor(this.skyColor[0], this.skyColor[1], this.skyColor[2], this.skyColor[3]);
        this.setupCameraTransform(ticker);
        if(this.serverWorld == null){this.serverWorld = TheStructureWorldServer.getServer().worldServer();}
        if(Keyboard.isKeyDown(Keyboard.KEY_F3)&&this.refershShaders==0)
        {
        this.refershShaders=100;
        this.ShaderT = new TerrainShader(TerrainShader.VERTEX_FILEN,TerrainShader.FRAGMENT_FILEN);
        this.terrainRenderer = new TerrainRenderer(this.ShaderT,this.nmr.projectionMatrix);
        ((EntityPlayer)base).hasMoved = true;
        }
        if(this.refershShaders>0){--this.refershShaders;}
        if(this.onWorldLoaded == 0)
        {	
        	this.terrain = new Terrain();
        	this.worldRenderer.terrain = new RenderTerrain(); 
        	this.ttw.thePlayer.coordCode = (int)(this.ttw.thePlayer.posX+this.ttw.thePlayer.posY+this.ttw.thePlayer.posZ);
        	this.light.add(new Light(new float[]{0,1000,0},new float[]{1F,1F,1F}));
        	KeyAndOtherSettings.getServerPlayer();
        	FOV = 110.0F;
            Aspect = (float)this.ttw.displayWidth / (float)this.ttw.displayHeight;
        	zNear = 0.1F;
        	zFar = 600F;
        	RenderTerrain terrain = new RenderTerrain();
        	RenderPipes pipe = new RenderPipes();
        	this.nmr = new NormalMappingRenderer();
        	this.shaderW = new WaterShader();
            this.ShaderT = new TerrainShader(TerrainShader.VERTEX_FILEN,TerrainShader.FRAGMENT_FILEN);
            this.shaderNormal = new NormalMappingShader();
        	
        	NormalMappingRenderer.projectionMatrix();
         	this.waterRenderer = new WaterRenderer(new Loader(),this.shaderW,this.nmr.projectionMatrix);
         	this.terrainRenderer = new TerrainRenderer(this.ShaderT,this.nmr.projectionMatrix); 
         	//104,204,232
         	this.waterList.add(new WaterTile("",9,154.5F,1.5F,new float[]{104,204,255,1F},1F,0.6F,1F,0.1F));
            this.worldRenderer.updateTerrain(base);
            ModelBasic.saveModelInList(97, terrain.skybox());
            ModelBasic.saveModelInList(98, terrain.sun());
            ModelBasic.saveModelInList(99, terrain.moon());
            ModelBasic.saveModelInList(100, fern);
            ModelBasic.saveModelInList(101, tree);
            
            
            this.nmr.addEntity(new EntityPlantRender(101,new float[]{5,5,0,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,1F));     	
            
            //this.nmr.addEntity(new EntityPlantRender(101,new float[]{10,10,6,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,0.25F));     	
            
            //this.nmr.addEntity(new EntityPlantRender(new float[]{10,10,1,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,0.2F));     	
            //this.nmr.addEntity(new EntityPlantRender(new float[]{10,10,2,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,0.09F));     	
            //this.nmr.addEntity(new EntityPlantRender(new float[]{10,10,3,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,0.3F));     	
            //this.nmr.addEntity(new EntityPlantRender(new float[]{10,10,4,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,0.2F));     	
            //this.nmr.addEntity(new EntityPlantRender(new float[]{10,10,5,0},new float[]{(float)this.random.nextInt(20),(float)this.random.nextInt(20)},0,0,0,0,0.2F));     	
            //this.nmr.addEntity(new EntityRenderFenceBasic(new ModelBasic(0,terrain.renderFence(false),10,0.7F,0F, "/objectsandterrain/objects/military_metal_fence",new Vector4f(0.5F,1.5F,0,0),102,false,false),new float[]{0.5F,0},0,0,0,0,1F));     	
            //this.nmr.addEntity(new EntityWoodObjectRender(175,0.5F,new ModelBasic(0,crate,                10,0.1F,0.4F,"objectsandterrain/crates/military_crate 1024x",new Vector4f(0.5F,1.5F,0F,0F),99,false,false), new float[]{0.5F,0.5F},0,0,0,0,0.005F));
            //this.nmr.addEntity(new EntityRenderFenceBasic(new ModelBasic(0,terrain.renderFence(true),10,0.7F,0F, "/objectsandterrain/objects/military_metal_fence",new Vector4f(0.5F,1.5F,0,0),102,false,false),new float[]{0,0},0,0,0,0,1F));     	
            //this.nmr.addEntity(new EntityRenderFenceBasic(new ModelBasic(0,terrain.renderFence(true),10,0.1F,0F, "/objectsandterrain/objects/military_fence 1024x",new Vector4f(0.5F,1.5F,0,0),102,false,false),new float[]{0,0},0,0,0,0,1F));     	
            //this.nmr.addEntity(new EntityWoodObjectRender( 75,0.5F,new ModelBasic(0,crate,                10,0.1F,0F,"objectsandterrain/crates/crate 1024x",new Vector4f(0.5F,1.5F,0F,0F),99,false,false), new float[]{0.5F,0.5F},0,0,0,0,0.005F));
            
            //this.nmr.addEntity(new EntitySpiderSentinelRender(new ModelBasic(false,0,EntitySpiderSentinelRender.renderSpiderSentinel(),1F,0.0F,2F,"/objectsandterrain/objects/Fixer 512x",new Vector4f(0.5F,1.5F,0F,0F),100,false,false), new float[]{0,0},0,0,0,0,0.5F));     	
            
            //this.nmr.addEntity(new BasicEntityRender(new ModelBasic(true,2, pipe.renderPipe(0.05F,5F,2F,5F,4F,0F,0F),10,1F,ticker, "/objectsandterrain/AgarthianMetal",new Vector4f(0,0.5F,0,0),102,true,true), new float[]{0,0},0,0,0,0,0.5F));     	
            //this.nmr.addEntity(new EntityPlantRender(new ModelBasic(terrain.renderSmallTree(),0.9F,2,0,1.0F,"/objectsandterrain/Plant/white flower tree",new Vector4f(1F,1.5F,0,0),100,false,false), new float[]{0,0},0,0,this.random.nextInt(360),0,2F));     	
            //this.nmr.addEntity(new EntityPlantRender(new ModelBasic(terrain.renderSmallTree(),0.9F,2,0,1.0F,"/objectsandterrain/Plant/white flower round tree",new Vector4f(1F,1.5F,0,0),100,false,false), new float[]{0,0},0,0,this.random.nextInt(360),0,2F));     	
        	
            
            
            //this.nmr.addEntity(new EntityRockRenderer(new ModelBasic(true,0,terrain.renderRock(),9,0F,0, "objectsandterrain/objects/rock",new Vector4f(0.5F,1.5F,0F,0F),105,false,false), new float[]{0,0},0,0,0,0,1F));
            //this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,0,terrain.renderPath(),9,0F,0, "objectsandterrain/objects/path",new Vector4f(0.5F,1.5F,0F,0F),105,false,false), new float[]{0,0},0,0,0,0,1F));
            
            //this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,terrain.renderNest(),5,0.1F,"/objectsandterrain/plant/512x/nest",1.5F,101,false,false), new float[]{0,0},0,0,0,0,1F));     	
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"objectsandterrain/plant/512x/pointer",0F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));     	
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/fanpalm",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.15F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/splitter",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/papyfrond",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/palm",0.5F,102,false,true),new float[]{0,154F,0},0,0,0,0,0.25F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(false,fern,10,0.3F,"/objectsandterrain/plant/small/grass",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/split_leaf_2",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/split_leaf",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/split_leaf_blackpoint",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/aralia",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/areca",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/banleaf",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/paradiser",0.5F,102,false,true), new float[]{0,154F,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/small/ferny",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.1F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/giant_splitleaf",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.2F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/autumer",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/round_leaf",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/phantom_fern",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/fern",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
          	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/fern2",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
          	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/thick_leaf",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
          	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/leahter_leaf",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/leafs",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));
        	//this.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,fern,10,0.3F,"/objectsandterrain/plant/lilly_leaf",0.5F,102,false,true), new float[]{0,0},0,0,0,0,0.25F));





                    	
            ((EntityPlayer)base).hasMoved = true;
            ((EntityPlayer)base).X = -66666666;
            ((EntityPlayer)base).Z = -66666666;
            this.specialRefresh=true;
            this.updateArea(); 
        }  
        if(this.onWorldLoaded==3)
        {
        this.skyRenderer = new SkyRenderer(this.nmr.projectionMatrix);
        } 
        if(this.worldRenderer!=null)
        {
        this.allRenderLists.setupRenderList(base.lastTickPosX+(base.posX-base.lastTickPosX)*ticker,base.lastTickPosY+(base.posY-base.lastTickPosY)*ticker,base.lastTickPosZ+(base.posZ-base.lastTickPosZ)*ticker);
        }
        GL11.glEnable(GL11.GL_ALPHA_TEST);
        GL11.glEnable(GL11.GL_DEPTH_TEST);
        
        this.nmr.render(new Vector4f(0,1,0,200), light,true);
        
        if(ModelBasic.texturebackground>0&&this.terrainRenderer!=null)
        {
        this.terrainRenderer.render(terrain,light,null,10,true);
        }
        
        this.waterRenderer.render(this.waterList); 
        
        if(this.onWorldLoaded<5)
        {
        ++this.onWorldLoaded;
        }
        else
        {
        this.skyRenderer.render(light,false);
        }
     }
	
    private long second = 0;
    public static boolean secondspassed = false;
	public static float waterHeight = 150F;
	
	public void reflection()
	{
		if(this.terrain!=null&&this.light!=null&&this.terrainRenderer!=null)
		{
		float distance = (2*((float)nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraY-waterHeight));        	
		buffer.bindReflectionFrameBuffer();
	    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
	    GL11.glDisable(GL11.GL_DEPTH_TEST);
	    Matrix.pitch(true);
	    Matrix.setCamY((float)nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraY-distance);
	    this.nmr.render(new Vector4f(0,1,0,-waterHeight+0.05F), light,true);
	    this.terrainRenderer.render(terrain,light,new Vector4f(0,1,0,-waterHeight+0.05F),1,true);
	    if(this.onWorldLoaded<5){++this.onWorldLoaded;}
        else{this.skyRenderer.render(light,true);}
	    buffer.unbindCurrentFrameBuffer();
	    Matrix.setCamY((float)nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraY);
	    Matrix.pitch(false);
	 	}
	}
	 
	public void refraction()
	{
		if(this.terrain!=null&&this.light!=null&&this.terrainRenderer!=null)
		{
		buffer.bindRefractionFrameBuffer();
	    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
	    GL11.glDisable(GL11.GL_DEPTH_TEST);
	    this.nmr.render(new Vector4f(0,-1,0,waterHeight), light,true);
	    this.terrainRenderer.render(terrain,light,new Vector4f(0,-1,0,waterHeight),1,false);
	    if(this.onWorldLoaded<5){++this.onWorldLoaded;}
        buffer.unbindCurrentFrameBuffer();
		}
	}
	
	public void updateArea()
	{
        this.moveArea(1, 5, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListPlant5,this.worldRenderer.ArrayListStone5);
        this.moveArea(1, 4, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListPlant4,this.worldRenderer.ArrayListStone4);
        this.moveArea(1, 6, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListPlant6,this.worldRenderer.ArrayListStone6);
        //
        this.moveArea(1, 12, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListPlant12,this.worldRenderer.ArrayListStone12);
        this.moveArea(1, 7, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListPlant7,this.worldRenderer.ArrayListStone7);
        this.moveArea(1, 11, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListPlant11,this.worldRenderer.ArrayListStone11);
        //
        this.moveArea(1, 9, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListPlant9,this.worldRenderer.ArrayListStone9);
        this.moveArea(1, 8, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListPlant8,this.worldRenderer.ArrayListStone8);
        this.moveArea(1, 10, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListPlant10,this.worldRenderer.ArrayListStone10);
        //
        this.moveArea(2, 6, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListPlant6,this.worldRenderer.ArrayListStone6);
        this.moveArea(2, 4, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListPlant4,this.worldRenderer.ArrayListStone4);
        this.moveArea(2, 5, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListPlant5,this.worldRenderer.ArrayListStone5);
        //
        this.moveArea(2, 11, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListPlant11,this.worldRenderer.ArrayListStone11);
        this.moveArea(2, 7, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListPlant7,this.worldRenderer.ArrayListStone7);
        this.moveArea(2, 12, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListPlant12,this.worldRenderer.ArrayListStone12);
        //
        this.moveArea(2, 10, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListPlant10,this.worldRenderer.ArrayListStone10);
        this.moveArea(2, 8, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListPlant8,this.worldRenderer.ArrayListStone8);
        this.moveArea(2, 9, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListPlant9,this.worldRenderer.ArrayListStone9);
        //
        this.moveArea(3, 8, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListPlant8,this.worldRenderer.ArrayListStone8);
        this.moveArea(3, 4, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListPlant4,this.worldRenderer.ArrayListStone4);
        this.moveArea(3, 7, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListPlant7,this.worldRenderer.ArrayListStone7);
        //
        this.moveArea(3, 9, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListPlant9,this.worldRenderer.ArrayListStone9);
        this.moveArea(3, 5, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListPlant5,this.worldRenderer.ArrayListStone5);
        this.moveArea(3, 12, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListPlant12,this.worldRenderer.ArrayListStone12);
        //
        this.moveArea(3, 10, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListPlant10,this.worldRenderer.ArrayListStone10);
        this.moveArea(3, 6, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListPlant6,this.worldRenderer.ArrayListStone6);
        this.moveArea(3, 11, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListPlant11,this.worldRenderer.ArrayListStone11);
        //
        this.moveArea(4, 7, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListPlant7,this.worldRenderer.ArrayListStone7);
        this.moveArea(4, 4, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListPlant4,this.worldRenderer.ArrayListStone4);
        this.moveArea(4, 8, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListPlant8,this.worldRenderer.ArrayListStone8);
        
        this.moveArea(4, 11, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListPlant11,this.worldRenderer.ArrayListStone11);
        this.moveArea(4, 6, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListPlant6,this.worldRenderer.ArrayListStone6);
        this.moveArea(4, 10, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListPlant10,this.worldRenderer.ArrayListStone10);
        //
        this.moveArea(4, 9, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListPlant9,this.worldRenderer.ArrayListStone9);
        this.moveArea(4, 5, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListPlant5,this.worldRenderer.ArrayListStone5);
        this.moveArea(4, 12, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListPlant12,this.worldRenderer.ArrayListStone12);	
        if(this.specialRefresh){this.specialRefresh = false;}
	}
	
	public static boolean specialRefresh = false;
	
	public void moveArea(int side,int areaNumber,List<ArrayListTerrain> listAfter,List<ArrayListTerrain> listTLoad,List<ArrayListTerrain> listPLoad,List<ArrayListTerrain> listSLoad)
	{
		EntityLivingBase base = this.ttw.renderViewEntity;
		boolean refresh;
		if(side==1&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&(((EntityPlayer)base).posX-6) < Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]) && Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]) < Integer.parseInt(listAfter.get(0).AreaCode.split("_")[0])){refresh = true;}
		else if(side==2&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&(((EntityPlayer)base).posX+6) > Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]) && Integer.parseInt(listAfter.get(0).AreaCode.split("_")[0]) < Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0])){refresh = true;}
		else if(side==3&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&(((EntityPlayer)base).posZ+6) > Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]) && Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[1]) < Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1])){refresh = true;}
		else if(side==4&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&(((EntityPlayer)base).posZ-6) < Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]) && Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]) < Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[1])){refresh = true;}
		else{refresh = false;}
		if(refresh||this.specialRefresh)
		{
		String[] coordsZ = listAfter.get(0).AreaCode.split("_");
		String[] coordsX = listTLoad.get(0).AreaCode.split("_");
		if(refresh||this.specialRefresh){if(areaNumber==4){this.worldRenderer.clear4();}if(areaNumber==5){this.worldRenderer.clear5();}if(areaNumber==6){this.worldRenderer.clear6();}if(areaNumber==7){this.worldRenderer.clear7();}if(areaNumber==8){this.worldRenderer.clear8();}if(areaNumber==9){this.worldRenderer.clear9();}if(areaNumber==10){this.worldRenderer.clear10();}if(areaNumber==11){this.worldRenderer.clear11();}if(areaNumber==12){this.worldRenderer.clear12();}}
		
		List<ArrayListTerrain> ground;List<ArrayListTerrain> plant;List<ArrayListTerrain> stone;
		if(areaNumber==4)
		{
		ground = this.worldRenderer.ArrayListTerrain4;plant = this.worldRenderer.ArrayListPlant4;stone = this.worldRenderer.ArrayListTerrain4;
		}
		else if(areaNumber==5)
		{
		ground = this.worldRenderer.ArrayListTerrain5;plant = this.worldRenderer.ArrayListPlant5;stone = this.worldRenderer.ArrayListTerrain5;
		}
		else if(areaNumber==6)
		{
		ground = this.worldRenderer.ArrayListTerrain6;plant = this.worldRenderer.ArrayListPlant6;stone = this.worldRenderer.ArrayListTerrain6;
		}
		else if(areaNumber==7)
		{
		ground = this.worldRenderer.ArrayListTerrain7;plant = this.worldRenderer.ArrayListPlant7;stone = this.worldRenderer.ArrayListTerrain7;
		}
		else if(areaNumber==8)
		{
		ground = this.worldRenderer.ArrayListTerrain8;plant = this.worldRenderer.ArrayListPlant8;stone = this.worldRenderer.ArrayListTerrain8;
		}
		else if(areaNumber==9)
		{
		ground = this.worldRenderer.ArrayListTerrain9;plant = this.worldRenderer.ArrayListPlant9;stone = this.worldRenderer.ArrayListTerrain9;
		}
		else if(areaNumber==10)
		{
		ground = this.worldRenderer.ArrayListTerrain10;plant = this.worldRenderer.ArrayListPlant10;stone = this.worldRenderer.ArrayListTerrain10;
		}
		else if(areaNumber==11)
		{
		ground = this.worldRenderer.ArrayListTerrain11;plant = this.worldRenderer.ArrayListPlant11;stone = this.worldRenderer.ArrayListTerrain11;
		}
		else if(areaNumber==12)
		{
		ground = this.worldRenderer.ArrayListTerrain12;plant = this.worldRenderer.ArrayListPlant12;stone = this.worldRenderer.ArrayListTerrain12;
		}
		else{ground = listAfter;plant = listPLoad;stone = listSLoad;}
		if(side==1){this.worldRenderer.splitIntoAreas(areaNumber,plant,stone,ground,base,base,Integer.parseInt(coordsX[0])-10,Integer.parseInt(coordsZ[1]));}
		else if(side==2){this.worldRenderer.splitIntoAreas(areaNumber,plant,stone,ground,base,base,Integer.parseInt(coordsX[0])+10,Integer.parseInt(coordsZ[1]));}
		else if(side==3){this.worldRenderer.splitIntoAreas(areaNumber,plant,stone,ground,base,base,Integer.parseInt(coordsX[0]),Integer.parseInt(coordsZ[1])+10);}
		else if(side==4){this.worldRenderer.splitIntoAreas(areaNumber,plant,stone,ground,base,base,Integer.parseInt(coordsX[0]),Integer.parseInt(coordsZ[1])-10);}		
		}  
	}

    /**
     * Setup orthogonal projection for rendering GUI screen overlays
     */
    public void setupOverlayRendering()
    {
        ScaledResolution var1 = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
        GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glLoadIdentity();
        GL11.glOrtho(0.0D, var1.getScaledWidth_double(), var1.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        GL11.glLoadIdentity();
        GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
    }
    
    /**
     * set null to clear
     */
    public void setWorldAndLoadRenderers(WorldClient wordclient)
    {
        if (this.theWorld != null)
        {
            this.theWorld.removeWorldAccess(this);
        }
        this.theWorld = wordclient;
        if (wordclient != null)
        {
        	wordclient.addWorldAccess(this);
            this.loadRenderers();
        }
    }

    /**
     * Loads all the renderers and sets up the basic settings usage
     */
    public void loadRenderers()
    {
        if (this.theWorld != null)
        {
            this.tileEntities.clear();
        }
    }


    
    /**
     * Plays the specified sound. Arg: soundName, x, y, z, volume, pitch
     */
    public void playSound(String p_72704_1_, double p_72704_2_, double p_72704_4_, double p_72704_6_, float p_72704_8_, float p_72704_9_) {}

    /**
     * Plays sound to all near players except the player reference given
     */
    public void playSoundToNearExcept(EntityPlayer p_85102_1_, String p_85102_2_, double p_85102_3_, double p_85102_5_, double p_85102_7_, float p_85102_9_, float p_85102_10_) {}

  

    /**
     * Called on all IWorldAccesses when an entity is created or loaded. On client worlds, starts downloading any
     * necessary textures. On server worlds, adds the entity to the entity tracker.
     */
    public void onEntityCreate(Entity p_72703_1_) {}

    /**
     * Called on all IWorldAccesses when an entity is unloaded or destroyed. On client worlds, releases any downloaded
     * textures. On server worlds, removes the entity from the entity tracker.
     */
    public void onEntityDestroy(Entity p_72709_1_) {}


    public void broadcastSound(int p_82746_1_, int p_82746_2_, int p_82746_3_, int p_82746_4_, int p_82746_5_)
    {
        Random var6 = this.theWorld.rand;

        switch (p_82746_1_)
        {
            case 1013:
            case 1018:
                if (this.ttw.renderViewEntity != null)
                {
                    double var7 = (double)p_82746_2_ - this.ttw.renderViewEntity.posX;
                    double var9 = (double)p_82746_3_ - this.ttw.renderViewEntity.posY;
                    double var11 = (double)p_82746_4_ - this.ttw.renderViewEntity.posZ;
                    double var13 = Math.sqrt(var7 * var7 + var9 * var9 + var11 * var11);
                    double var15 = this.ttw.renderViewEntity.posX;
                    double var17 = this.ttw.renderViewEntity.posY;
                    double var19 = this.ttw.renderViewEntity.posZ;

                    if (var13 > 0.0D)
                    {
                        var15 += var7 / var13 * 2.0D;
                        var17 += var9 / var13 * 2.0D;
                        var19 += var11 / var13 * 2.0D;
                    }

                    if (p_82746_1_ == 1013)
                    {
                        //this.theWorld.playSound(var15, var17, var19, "", 1.0F, 1.0F, false);
                    }
                    else if (p_82746_1_ == 1018)
                    {
                        //this.theWorld.playSound(var15, var17, var19, "", 5.0F, 1.0F, false);
                    }
                }

            default:
        }
    }  
}
