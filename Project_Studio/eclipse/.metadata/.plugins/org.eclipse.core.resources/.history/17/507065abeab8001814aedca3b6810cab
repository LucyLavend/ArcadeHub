package nl.thestructureworld.client.renderer.entity;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import nl.thestructureworld.account.MouseControl;
import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.IngameGui;
import nl.thestructureworld.client.gui.IngameMenuAndOptionsGui;
import nl.thestructureworld.client.renderer.ArrayListGLListObjects;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListEntity;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListIDModels;
import nl.thestructureworld.client.renderer.texture.TextureManager;
import nl.thestructureworld.client.shaders.Light;
import nl.thestructureworld.client.shaders.Matrix;
import nl.thestructureworld.client.shaders.RawModel;
import nl.thestructureworld.client.shaders.StaticShader;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;

import org.lwjgl.opengl.EXTTextureFilterAnisotropic;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

public class NormalMappingRenderer
{
	public NormalMappingShader shader;
	public static List<ArrayListEntity> ObjectsEntityRenderList = new ArrayList<ArrayListEntity>();
	public static List<ArrayListIDModels> ListIDModels = new ArrayList<ArrayListIDModels>();
	public static Matrix4f projectionMatrix = new Matrix4f();
	public int nonormalMap = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/No NormalMap.png");
	private Matrix4f viewMatrix;	
	
	public NormalMappingRenderer() 
	{	
		this.shader = new NormalMappingShader();
		projectionMatrix();
		shader.start();
		shader.loadProjectionMatrix(projectionMatrix);
		shader.connectTextureUnits();
		shader.stop();
	}
	
	public static void projectionMatrix()
	{
		float aspectRatio = nl.thestructureworld.client.renderer.EntityRenderer.Aspect;
        float y_scale = (float) ((1f / Math.tan(Math.toRadians(nl.thestructureworld.client.renderer.EntityRenderer.FOV / 2f))) * aspectRatio);
        float x_scale = y_scale / aspectRatio;
        float frustum_length = nl.thestructureworld.client.renderer.EntityRenderer.zFar - nl.thestructureworld.client.renderer.EntityRenderer.zNear;
        
		projectionMatrix.m00 = x_scale;
        projectionMatrix.m11 = y_scale;
        projectionMatrix.m22 = -((nl.thestructureworld.client.renderer.EntityRenderer.zFar + nl.thestructureworld.client.renderer.EntityRenderer.zNear) / frustum_length);
        projectionMatrix.m23 = -1;
        projectionMatrix.m32 = -((2 * nl.thestructureworld.client.renderer.EntityRenderer.zNear * nl.thestructureworld.client.renderer.EntityRenderer.zFar) / frustum_length);
        projectionMatrix.m33 = 0;	
	}
	
	 public void addEntity(BasicEntityRender entity)
	 {
		 ObjectsEntityRenderList.add(new ArrayListEntity(entity));
	 }

	 
	 public void render(Vector4f clipPlane, List<Light> lights,boolean hasNormals) 
	 {
		    viewMatrix = Matrix.createViewMatrix();
			shader.start();	
			shader.loadClipPlane(clipPlane);
			shader.loadSkyColor(EntityRenderer.skyColor,EntityRenderer.fogDensity,EntityRenderer.fogGradient);
			shader.loadViewMatrix(viewMatrix);
			shader.loadLights(lights, viewMatrix);
			
			
			if(ObjectsEntityRenderList.size()>0)
			{
			BasicEntityRender entityForT = ObjectsEntityRenderList.get(0).entity;
			GL13.glActiveTexture(GL13.GL_TEXTURE0);
			
		  	if(IngameMenuAndOptionsGui.ObjectTexture==0)
			{
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,entityForT.getModel().textureIDModel512x);
			}
			else if(IngameMenuAndOptionsGui.ObjectTexture==1)
			{
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,entityForT.getModel().textureIDModel256x);
			}
			else if(IngameMenuAndOptionsGui.ObjectTexture==2)
			{
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,entityForT.getModel().textureIDModel128x);
			}
			else if(IngameMenuAndOptionsGui.ObjectTexture==3)
			{
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,entityForT.getModel().textureIDModel64x);
			}
			GL13.glActiveTexture(GL13.GL_TEXTURE1);
			shader.hasNormal(entityForT.hasNormals);	
			if(hasNormals && entityForT.hasNormals == 0)
			{
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,entityForT.getModel().textureNormalMapping512x);
			}
			else if(entityForT.hasNormals == 1)
			{
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.nonormalMap);
			}
			
			
			for(int id = 0;id<ObjectsEntityRenderList.size();++id)
	        {
				ModelBasic model = ObjectsEntityRenderList.get(id).entity.getModel();
				shader.loadSkipAlpha(model.skipAlpha);
				shader.loadMinmaxlight(model.minmaxlight);
				BasicEntityRender renderEntity = ObjectsEntityRenderList.get(id).entity;
				renderEntity.updateRenderer();
				if(renderEntity.textureType!=4)
				{
				BasicEntityRender entity = ObjectsEntityRenderList.get(id).entity;
				shader.addLight(model.addLight);
				shader.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
				shader.loadFakeLightning(model.fakeLightning);
				shader.loadShineVariables(model.shineDamper, model.reflectivity);
				if(model.transparency)
				{
			    GL11.glEnable(GL11.GL_BLEND);
		        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
		       	}
				if(model.Disable_CULL_FACE){GL11.glEnable(GL11.GL_CULL_FACE);}else if(!model.Disable_CULL_FACE){GL11.glDisable(GL11.GL_CULL_FACE);} 
			  	
				if(entity.deleteMe)
			    {
				ObjectsEntityRenderList.remove(id);
		        }
				if(!entity.deleteMe)
			    {
				
				if(entity.ObjectDistance < 2F){
				if(EntityRenderer.terrain!=null&& MouseControl.getObject>-1 && id==MouseControl.getObject)
		        {
				entity.setPosition(new Vector3f(EntityRenderer.mouseOverX+entity.x,EntityRenderer.mouseOverY+entity.y,EntityRenderer.mouseOverZ+entity.z));
				entity.coordCode = (int)(entity.position.x+entity.position.z+entity.position.y);
				if(MouseControl.rotateObjectY == -666F){MouseControl.rotateObjectY=entity.rotY;}else{
				entity.rotY = MouseControl.rotateObjectY;}
				if(MouseControl.rotateObjectX == -666F){MouseControl.rotateObjectX=entity.rotX;}else{
				entity.rotZ = MouseControl.rotateObjectX;}
				if(MouseControl.rotateObjectZ == -666F){MouseControl.rotateObjectZ=entity.rotZ;}else{
				entity.rotZ = MouseControl.rotateObjectZ;}
		        }}
				
				if(MouseControl.isButtonDown == 1&&MouseControl.world.objectMouseOver.TerrainObjectX+2 > EntityRenderer.nmr.ObjectsEntityRenderList.get(id).entity.position.x  && MouseControl.world.objectMouseOver.TerrainObjectX-2 < EntityRenderer.nmr.ObjectsEntityRenderList.get(id).entity.position.x)
				{
				if(MouseControl.world.objectMouseOver.TerrainObjectZ+2 > EntityRenderer.nmr.ObjectsEntityRenderList.get(id).entity.position.z  && MouseControl.world.objectMouseOver.TerrainObjectZ-2 < EntityRenderer.nmr.ObjectsEntityRenderList.get(id).entity.position.z)
				{
					TheStructureWorld.TheStructureWorld.canEditTerrain=100;
					MouseControl.getObject = id;
					return;
				}}
				
				if(EntityRenderer.terrain!=null&&(int)entity.y==EntityRenderer.mouseOverY&&(int)entity.x==EntityRenderer.mouseOverX&&(int)entity.z==EntityRenderer.mouseOverZ)
				{
				IngameGui.nearbyObject = true;	
				}
				else {IngameGui.nearbyObject = false;}
				//if(ObjectsEntityRenderList.size()-1==id)
				if(entity.renderModel(shader)){}
				else
				{
				shader.loadDistance(entity.ObjectDistance,1F);
				Matrix4f transformationMatrix = Matrix.createTransformationMatrix(entity.getPosition(),entity.modelY, entity.getRotX(),entity.getRotY(), entity.getRotZ(), entity.getScale());
				shader.loadTransformationMatrix(transformationMatrix);
				GL11.glCallList(model.glListID);
				}
				if(!model.Disable_CULL_FACE)
				{
				GL11.glDisable(GL11.GL_CULL_FACE);
				}
				if(model.transparency)
				{
			    GL11.glDisable(GL11.GL_BLEND);
		        GL11.glDepthMask(true);
		        }
			    }
				}
	        }
			}
			shader.stop();
		}
	 
	 public static int createModelList = 0;
	 
	public void cleanUp(){shader.cleanUp();}
}
