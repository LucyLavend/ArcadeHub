package nl.thestructureworld.client.renderer.entity;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.imageio.ImageIO;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.renderer.ArrayListGLListObjects;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.terrain.TessellatorModel;
import nl.thestructureworld.client.renderer.texture.TextureManager;
import nl.thestructureworld.client.shaders.RawModel;

import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;
 
public class ModelBasic 
{
    public RawModel rawModel;
    public int glListID = 100;
    public float shineDamper = 0.3F;
    public float reflectivity = 0.05F;
    public boolean Disable_CULL_FACE = false;
    public boolean fakeLightning = false;
    public boolean transparency = false;
    public int textureIDModel512x = 0;
    public int textureIDModel256x = 0;
    public int textureIDModel128x = 0;
    public int textureIDModel64x = 0;
    public int textureNormalMapping512x = -1;
    public int textureNormalMapping256x = -1;
    public int textureNormalMapping128x = -1;
    public static int textureID = 0;
    public static int textureID2 = 0;
    public static int textureID3 = 0;
    public static int texturebackground = 0;
    public static int textureblendmap = 0;
    private int normalMap;
	public Vector4f minmaxlight;
	public int hasNormals;
	public static float fixTexture = 0.6F;
	public static float repeat = 2F;
	public static int textureSize;
	public static int texturebackgroundLow = 0;
	public float addLight = 0F;
	public float skipAlpha = 0F;
	
	/**
	 * Add model with the following parameters:
	 * @param transparency: Main Texture (alpha) transparency is shown when Model rendered.
	 * @param normal: game will search for normal texture map and used.(Tfile: /objectsandterrain/objects/Fixer 512x; Normal Map Texture: /objectsandterrain/objects/Fixer 512x NormalMap)
	 * @param model: Load the RawModel
	 * @param shineDamper: effect light has on object.
	 * @param reflectivity: reflect light and how much.
	 * @param addLight: Make the object light up.
	 * @param Tfile: /  Texture location.
	 * @param minmaxlight: minimum light that effects object, maximum light that effects Object, Alpha in NormalMap Texture and how much light will be added to that area on the model.
	 * @param glListID: 
	 * @param Disable_CULL_FACE: Render the model on both sides
	 * @param fakeLightning: light added with no darker or lighter spots.
	 */
	public ModelBasic(boolean transparency,int normal,RawModel model, float shineDamper,float reflectivity,float addLight,String Tfile,Vector4f vector4f,int glListID,boolean Disable_CULL_FACE,boolean fakeLightning)
    {
		this.transparency = transparency;
    	this.hasNormals = normal;
    	this.textureFile = Tfile;
        this.rawModel = model;
        this.glListID = glListID;
        this.Disable_CULL_FACE = Disable_CULL_FACE;
        this.fakeLightning = fakeLightning;
        this.shineDamper = shineDamper;
        this.reflectivity = reflectivity;
        this.minmaxlight = vector4f;
        this.addLight = addLight;
        if(normal != 2)
        {
        this.textureNormalMapping512x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile+" NormalMap"+".png");
        } 
        this.textureIDModel512x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile+".png");   
        this.textureIDModel256x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "512x")+".png");   
        this.textureIDModel128x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "256x")+".png");   
        this.textureIDModel64x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "128x")+".png");   
        GL11.glNewList(12, GL11.GL_COMPILE);
        
        GL11.glEndList();
    }
	
	public ModelBasic(RawModel model,float skipAlpha, float shineDamper,float reflectivity,float addLight,String Tfile,Vector4f minmaxlight,int glListID,boolean Disable_CULL_FACE,boolean fakeLightning)
    {
		this.skipAlpha = skipAlpha;
    	this.hasNormals = 2;
    	this.textureFile = Tfile;
    	this.addLight = addLight;
        this.rawModel = model;
        this.glListID = glListID;
        this.Disable_CULL_FACE = Disable_CULL_FACE;
        this.fakeLightning = fakeLightning;
        this.shineDamper = shineDamper;
        this.reflectivity = reflectivity;
        this.minmaxlight = minmaxlight;
        this.textureIDModel512x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile+".png");   
        this.textureIDModel256x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "512x")+".png");   
        this.textureIDModel128x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "256x")+".png");   
        this.textureIDModel64x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "128x")+".png");   
      }
    
	public ModelBasic(RawModel model, float shineDamper,float reflectivity,float addLight,String Tfile,Vector4f minmaxlight,int glListID,boolean Disable_CULL_FACE,boolean fakeLightning)
    {
    	this.hasNormals = 2;
    	this.textureFile = Tfile;
    	this.addLight = addLight;
        this.rawModel = model;
        this.glListID = glListID;
        this.Disable_CULL_FACE = Disable_CULL_FACE;
        this.fakeLightning = fakeLightning;
        this.shineDamper = shineDamper;
        this.reflectivity = reflectivity;
        this.minmaxlight = minmaxlight;
        this.textureIDModel512x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile+".png");   
        this.textureIDModel256x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "512x")+".png");   
        this.textureIDModel128x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "256x")+".png");   
        this.textureIDModel64x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "128x")+".png");   
      }
	
	public ModelBasic(int normal,RawModel model, float shineDamper,float reflectivity,float addLight,String Tfile,Vector4f minmaxlight,int glListID,boolean Disable_CULL_FACE,boolean fakeLightning)
    {
    	this.hasNormals = normal;
    	this.textureFile = Tfile;
        this.rawModel = model;
        this.glListID = glListID;
        this.Disable_CULL_FACE = Disable_CULL_FACE;
        this.fakeLightning = fakeLightning;
        this.shineDamper = shineDamper;
        this.reflectivity = reflectivity;
        this.minmaxlight = minmaxlight;
        this.addLight = addLight;
        if(normal != 2)
        {
        this.textureNormalMapping512x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile+" NormalMap"+".png");
        }   
        this.textureIDModel512x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile+".png");   
        this.textureIDModel256x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "512x")+".png");   
        this.textureIDModel128x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "256x")+".png");   
        this.textureIDModel64x = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+Tfile.replace("1024x", "128x")+".png");   
    }
	
    public ModelBasic(RawModel model, String texture)
    {
        this.rawModel = model;
        this.textureID  = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+texture+".png");
    }
    
    public static void loadTerraintextures(String textureBlendmap,String textureR,String textureG, String textureB,String background)
    {
    	if(textureblendmap==0)
        {
    	texturebackgroundLow = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/Ground/Ground Terrain Low.png");
        textureblendmap = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+textureBlendmap+".png");
        textureID  = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+textureR+".png");
        textureID2  = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+textureG+".png");
        textureID3  = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+textureB+".png"); 
        texturebackground  = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/"+background+".png"); 
        textureSize = TheStructureWorld.TheStructureWorld.getTextureManager().textureSize;
        if(textureSize == 5120)
        {
        	fixTexture = 0.6F;
        }
        else if(textureSize == 2560)
        {
        	fixTexture = 0.8F;
        }
        else if(textureSize == 1024 || textureSize == 512)
        {
        	fixTexture = 1F;
        }}	
		TextureManager.loadMipmap(2, false);
    }
    
    public ModelBasic(RawModel model)
    {
        this.rawModel = model;
    }
    
    public String textureFile;
    
    
    
    public RawModel getRawModel() 
    {
        return rawModel;
    }
 
    public int getNormalMap() 
    {
		return normalMap;
	}

	public void setNormalMap(int normalMap) 
	{
		this.normalMap = normalMap;
	}


	public void setTransparency(boolean transparency) 
	{
		this.transparency = transparency;
	}
	
	public boolean isHasTransparency() 
	{
		return this.transparency;
	}
}