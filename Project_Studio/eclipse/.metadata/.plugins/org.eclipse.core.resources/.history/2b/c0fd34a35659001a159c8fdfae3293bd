package nl.miystengine.world;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.Callable;
import nl.miystengine.client.ExceptionA;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.ObjectRenderer;
import nl.miystengine.client.renderer.entity.BasicEntityRender;
import nl.miystengine.entity.Entity;
import nl.miystengine.entity.EntityLivingBase;
import nl.miystengine.entity.EntityPlayer;

import nl.miystengine.server.management.MiystEngineServer;

import nl.miystengine.util.MathHelper;

import nl.miystengine.util.ReportedException;


public abstract class World
{
    public boolean scheduledUpdatesAreImmediate;
    public List loadedEntityList = new ArrayList();
    public List unloadedEntityList = new ArrayList();
    public List field_147482_g = new ArrayList();
    private List field_147484_a = new ArrayList();
    private List field_147483_b = new ArrayList();
    public List playerEntities = new ArrayList();
    private long cloudColour = 16777215L;
    public int skylightSubtracted;
    protected int updateLCG = (new Random()).nextInt();
    public String difficultySetting;
  
    
    /** The WorldProvider instance that World uses. */
    public final WorldProvider provider;
    protected List worldAccesses = new ArrayList();
    public float Gravity = 9.81F;
    public StructureWorldInfo StructureWorldInfo;
    public boolean findingSpawnPoint;
    private final Calendar theCalendar = Calendar.getInstance();

    /** This is set to true for client worlds, and false for server worlds. */
    public boolean isClient;

    /** Positions to update */
    protected Set activeAreaSet = new HashSet();

    /** number of ticks until the next random ambients play */
    private int ambientTickCountdown;
    public ArrayList collidingBoundingBoxes;

    int[] lightUpdateTerrainObjectList;

    public World(String worldname, WorldProvider gen_functioni_i45368_3_, StructureWorldInfo i)
    {
        this.ambientTickCountdown = MiystEngine.miystengine.rand.nextInt(12000);
        this.collidingBoundingBoxes = new ArrayList();
        this.lightUpdateTerrainObjectList = new int[32768];
        this.StructureWorldInfo = i;
        this.difficultySetting = this.StructureWorldInfo.getDifficulty();
        this.provider = gen_functioni_i45368_3_;
        gen_functioni_i45368_3_.registerWorld(this);
        this.Gravity = this.StructureWorldInfo.gravity;
     }

    public World(String gen_functioni_i45369_2_, StructureWorldInfo i, WorldProvider gen_functioni_i45369_4_)
    {
        this.ambientTickCountdown = MiystEngine.miystengine.rand.nextInt(12000);
        this.collidingBoundingBoxes = new ArrayList();
        this.lightUpdateTerrainObjectList = new int[32768];
        this.StructureWorldInfo = i;
        this.provider = new WorldProvider();
        if (this.StructureWorldInfo == null)
        {
            this.StructureWorldInfo = i;
        }
        else
        {
            this.StructureWorldInfo.setWorldName(gen_functioni_i45369_2_);
        }
        this.provider.registerWorld(this);
      
        if (!this.StructureWorldInfo.isInitialized())
        {
            try
            {
                this.initialize(i);
            }
            catch (Throwable var10)
            {
              	System.out.println("[Client thread/ERROR]: "+var10.getMessage());
            }

            this.StructureWorldInfo.setServerInitialized(true);
        }
        this.Gravity = this.StructureWorldInfo.gravity;
    }

   
    protected void initialize(StructureWorldInfo gen_functioni_72963_1_)
    {
        this.StructureWorldInfo.setServerInitialized(true);
    }

    /**
     * Sets a new spawn location by finding an uncovered TerrainObject at a random (x,z) location in the Area.
     */
    public void setSpawnLocation()
    {
        this.setSpawnLocation(8, 64, 8);
    }


    /**
     * Returns whether a TerrainObject exists at world coordinates x, y, z
     */
    public boolean TerrainObjectExists(int gen_functioni_72899_1_, int gen_functioni_72899_2_, int gen_functioni_72899_3_)
    {
        return gen_functioni_72899_2_ >= 0 && gen_functioni_72899_2_ < 256 ? this.AreaExists(gen_functioni_72899_1_ >> 4, gen_functioni_72899_3_ >> 4) : false;
    }

    /**
     * Checks if any of the Areas within distance (argument 4) BasicEntityRender of the given TerrainObject exist
     */
    public boolean doAreasNearAreaExist(int gen_functioni_72873_1_, int gen_functioni_72873_2_, int gen_functioni_72873_3_, int gen_functioni_72873_4_)
    {
        return this.checkAreasExist(gen_functioni_72873_1_ - gen_functioni_72873_4_, gen_functioni_72873_2_ - gen_functioni_72873_4_, gen_functioni_72873_3_ - gen_functioni_72873_4_, gen_functioni_72873_1_ + gen_functioni_72873_4_, gen_functioni_72873_2_ + gen_functioni_72873_4_, gen_functioni_72873_3_ + gen_functioni_72873_4_);
    }

    /**
     * Checks between a min and max all the Areas inbetween actually exist. Args: minX, minY, minZ, maxX, maxY, maxZ
     */
    public boolean checkAreasExist(int gen_functioni_72904_1_, int gen_functioni_72904_2_, int gen_functioni_72904_3_, int gen_functioni_72904_4_, int gen_functioni_72904_5_, int gen_functioni_72904_6_)
    {
        if (gen_functioni_72904_5_ >= 0 && gen_functioni_72904_2_ < 256)
        {
            gen_functioni_72904_1_ >>= 4;
            gen_functioni_72904_3_ >>= 4;
            gen_functioni_72904_4_ >>= 4;
            gen_functioni_72904_6_ >>= 4;

            for (int var7 = gen_functioni_72904_1_; var7 <= gen_functioni_72904_4_; ++var7)
            {
                for (int var8 = gen_functioni_72904_3_; var8 <= gen_functioni_72904_6_; ++var8)
                {
                    if (!this.AreaExists(var7, var8))
                    {
                        return false;
                    }
                }
            }

            return true;
        }
        else
        {
            return false;
        }
    }

    /**
     * Returns whether a Area exists at Area coordinates x, y
     */
    protected boolean AreaExists(int gen_functioni_72916_1_, int gen_functioni_72916_2_)
    {
        return true;
    }

   
    /**
     * Called to place all entities as part of a world
     */
    public boolean spawnEntityInWorld(Entity gen_functioni_72838_1_)
    {
        int var2 = MathHelper.floor_double(gen_functioni_72838_1_.posX / 16.0D);
        int var3 = MathHelper.floor_double(gen_functioni_72838_1_.posZ / 16.0D);
        boolean var4 = gen_functioni_72838_1_.forceSpawn;

        if (gen_functioni_72838_1_ instanceof EntityPlayer)
        {
            var4 = true;
        }

        if (!var4 && !this.AreaExists(var2, var3))
        {
            return false;
        }
        else
        {
            if (gen_functioni_72838_1_ instanceof EntityPlayer)
            {
                EntityPlayer var5 = (EntityPlayer)gen_functioni_72838_1_;
                this.playerEntities.add(var5);
            }
            this.loadedEntityList.add(gen_functioni_72838_1_);
            return true;
        }
    }


    /**
     * Schedule the entity for removal during the next tick. Marks the entity dead in anticipation.
     */
    public void removeEntity(Entity gen_functioni_72900_1_)
    {
        gen_functioni_72900_1_.setDead();

        if (gen_functioni_72900_1_ instanceof EntityPlayer)
        {
            this.playerEntities.remove(gen_functioni_72900_1_);
        }
    }

   

    /**
     * Adds a IEntityAccess to the list of worldAccesses
     */
    public void addWorldAccess(EntityRenderer gen_functioni_72954_1_)
    {
        this.worldAccesses.add(gen_functioni_72954_1_);
    }

    /**
     * Removes a worldAccess from the worldAccesses object
     */
    public void removeWorldAccess(EntityRenderer gen_functioni_72848_1_)
    {
        this.worldAccesses.remove(gen_functioni_72848_1_);
    }
    

    /**
     * Updates (and cleans up) entities and tile entities
     */
    public void updateEntities(boolean stopeverythingbutplayer)
    {
    	 int var1;
        Entity var2;

        
        this.loadedEntityList.removeAll(this.unloadedEntityList);
        int var3;
        int var14;

        for (var1 = 0; var1 < this.unloadedEntityList.size(); ++var1)
        {
            var2 = (Entity)this.unloadedEntityList.get(var1);
            var3 = var2.AreaCoordX;
            var14 = var2.AreaCoordZ;

            if (var2.addedToArea && this.AreaExists(var3, var14))
            {
            }
        }

        for (var1 = 0; var1 < this.unloadedEntityList.size(); ++var1)
        {
        }

        this.unloadedEntityList.clear();
        
        
        for (var1 = 0; var1 < this.loadedEntityList.size(); ++var1)
        {
            var2 = (Entity)this.loadedEntityList.get(var1);
            if(!stopeverythingbutplayer || (stopeverythingbutplayer && !(var2 instanceof EntityPlayer)))
            {
           
            if (!var2.isDead)
            {
                try
                {
                    this.updateEntity(var2);
                }
                catch (Throwable t)
                {
                  	System.out.println("[Client thread/ERROR]Entity List in World: "+t.getMessage());
                  	t.printStackTrace();
                }
            }
            if (var2.isDead)
            {
                var3 = var2.AreaCoordX;
                var14 = var2.AreaCoordZ;

                if (var2.addedToArea && this.AreaExists(var3, var14))
                {
                }

                this.loadedEntityList.remove(var1--);
           }
            }}
        Iterator var9 = this.field_147482_g.iterator();

        if (!this.field_147483_b.isEmpty())
        {
            this.field_147482_g.removeAll(this.field_147483_b);
            this.field_147483_b.clear();
        }
    }

  

    /**
     * Will update the entity in the world if the Area the entity is in is currently loaded. Args: entity
     */
    public void updateEntity(Entity gen_functioni_72870_1_)
    {
        this.updateEntityWithOptionalForce(gen_functioni_72870_1_, true);
    }

    /**
     * Will update the entity in the world if the Area the entity is in is currently loaded or its forced to update.
     * Args: entity, forceUpdate
     */
    public void updateEntityWithOptionalForce(Entity gen_functioni_72866_1_, boolean gen_functioni_72866_2_)
    {
        int var3 = MathHelper.floor_double(gen_functioni_72866_1_.posX);
        int var4 = MathHelper.floor_double(gen_functioni_72866_1_.posZ);
        byte var5 = 32;

        if (!gen_functioni_72866_2_ || this.checkAreasExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5))
        {
            gen_functioni_72866_1_.lastTickPosX = gen_functioni_72866_1_.posX;
            gen_functioni_72866_1_.lastTickPosY = gen_functioni_72866_1_.posY;
            gen_functioni_72866_1_.lastTickPosZ = gen_functioni_72866_1_.posZ;
            gen_functioni_72866_1_.prevRotationYaw = gen_functioni_72866_1_.rotationYaw;
            gen_functioni_72866_1_.prevRotationPitch = gen_functioni_72866_1_.rotationPitch;

            if (gen_functioni_72866_2_ && gen_functioni_72866_1_.addedToArea)
            {
                ++gen_functioni_72866_1_.ticksExisted;
                gen_functioni_72866_1_.onUpdate();
            }
            

        
            if (Double.isNaN(gen_functioni_72866_1_.posX) || Double.isInfinite(gen_functioni_72866_1_.posX))
            {
                gen_functioni_72866_1_.posX = gen_functioni_72866_1_.lastTickPosX;
            }

            if (Double.isNaN(gen_functioni_72866_1_.posY) || Double.isInfinite(gen_functioni_72866_1_.posY))
            {
                gen_functioni_72866_1_.posY = gen_functioni_72866_1_.lastTickPosY;
            }

            if (Double.isNaN(gen_functioni_72866_1_.posZ) || Double.isInfinite(gen_functioni_72866_1_.posZ))
            {
                gen_functioni_72866_1_.posZ = gen_functioni_72866_1_.lastTickPosZ;
            }

            if (Double.isNaN((double)gen_functioni_72866_1_.rotationPitch) || Double.isInfinite((double)gen_functioni_72866_1_.rotationPitch))
            {
                gen_functioni_72866_1_.rotationPitch = gen_functioni_72866_1_.prevRotationPitch;
            }

            if (Double.isNaN((double)gen_functioni_72866_1_.rotationYaw) || Double.isInfinite((double)gen_functioni_72866_1_.rotationYaw))
            {
                gen_functioni_72866_1_.rotationYaw = gen_functioni_72866_1_.prevRotationYaw;
            }

            int var6 = MathHelper.floor_double(gen_functioni_72866_1_.posX / 16.0D);
            int var7 = MathHelper.floor_double(gen_functioni_72866_1_.posY / 16.0D);
            int var8 = MathHelper.floor_double(gen_functioni_72866_1_.posZ / 16.0D);

            if (!gen_functioni_72866_1_.addedToArea || gen_functioni_72866_1_.AreaCoordX != var6 || gen_functioni_72866_1_.AreaCoordY != var7 || gen_functioni_72866_1_.AreaCoordZ != var8)
            {
                if (gen_functioni_72866_1_.addedToArea && this.AreaExists(gen_functioni_72866_1_.AreaCoordX, gen_functioni_72866_1_.AreaCoordZ))
                {
                }

                if (this.AreaExists(var6, var8))
                {
                    gen_functioni_72866_1_.addedToArea = true;
                }
                else
                {
                    gen_functioni_72866_1_.addedToArea = false;
                }
            }
        }
    }

    /**
     * This string is 'All: (number of loaded entities)' Viewable by press ing F3
     */
    public String getDebugLoadedEntities()
    {
        return "All: " + this.loadedEntityList.size();
    }

 
    public boolean tsw_gen_functioni_147469_q(int gen_functioni_147469_1_, int gen_functioni_147469_2_, int gen_functioni_147469_3_)
    {
       return false;
    }

    public void setAllowedSpawnTypes(boolean gen_functioni_72891_1_, boolean gen_functioni_72891_2_){}


    /**
     * Runs through the list of updates to run and ticks them
     */
    public boolean tickUpdates(boolean gen_functioni_72955_1_)
    {
        return false;
    }
 
    /**
     * Accessor for world Loaded Entity List
     */
    public List getLoadedEntityList()
    {
        return this.loadedEntityList;
    }

   
    /**
     * adds entities to the loaded entities list, and loads thier skins.
     */
    public void addLoadedEntities(List gen_functioni_72868_1_)
    {
        this.loadedEntityList.addAll(gen_functioni_72868_1_);
    }

    /**
     * Adds a list of entities to be unloaded on the next pass of World.updateEntities()
     */
    public void unloadEntities(List gen_functioni_72828_1_)
    {
        this.unloadedEntityList.addAll(gen_functioni_72828_1_);
    }

    /**
     * If on MP, sends a quitting packet.
     */
    public void sendQuittingDisconnectingPacket() {}

    /**
     * Checks whether the session lock file was modified by another process
     */
    public void checkSessionLock() throws ExceptionA
    {
       
    }

    public long getTotalWorldTime()
    {
        return this.StructureWorldInfo.getWorldTotalTime();
    }
    

	public void setWorldTime(int parseInt) 
	{
		this.StructureWorldInfo.setWorldTime(parseInt);
	}

    /**
     * Returns the coordinates of the spawn point
     */
    public float[] getSpawnPoint()
    {
        return new float[]{this.StructureWorldInfo.getSpawnX(), this.StructureWorldInfo.getSpawnY(), this.StructureWorldInfo.getSpawnZ()};
    }

    public void setSpawnLocation(int x, int y, int z)
    {
        this.StructureWorldInfo.setSpawnPosition(x, y, z);
    }

    /**
     * Gets the World's StructureWorldInfo instance
     */
    public StructureWorldInfo getStructureWorldInfo()
    {
        return this.StructureWorldInfo;
    }

    /**
     * set by !Area.getAreLevelsEmpty
     */
    public boolean extendedLevelsInAreaCache()
    {
        return false;
    }

    /**
     * returns a calendar object containing the current date
     */
    public Calendar getCurrentDate()
    {
        if (this.getTotalWorldTime() % 600L == 0L)
        {
            this.theCalendar.setTimeInMillis(MiystEngineServer.getSystemTimeMillis());
        }

        return this.theCalendar;
    }

    
    /**
     * Used in StructureWorldInfo.
     * Updates time,temperature ,Creature spawns etc. 
     */
    public void tick() 
	{
        this.StructureWorldInfo.updateWorld(this);
    }

   
}
