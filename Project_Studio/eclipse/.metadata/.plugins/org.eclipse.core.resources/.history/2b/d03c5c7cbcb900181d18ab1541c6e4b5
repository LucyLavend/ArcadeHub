package nl.thestructureworld.client.gui;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.GameProfile;
import nl.thestructureworld.client.KeyAndOtherSettings;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.multiplayer.NetHandlerPlayClient;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.OpenGlHelper;
import nl.thestructureworld.client.renderer.Tessellator;
import nl.thestructureworld.client.renderer.texture.ITextureObject;
import nl.thestructureworld.client.shaders.Loader;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.InventoryPlayer;
import nl.thestructureworld.item.ItemData;
import nl.thestructureworld.terrainandobjects.Material;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.util.Direction;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.util.MovementInputFromOptions;
import nl.thestructureworld.util.ResourceLocation;
import nl.thestructureworld.world.EnumSkyTerrainObject;
import nl.thestructureworld.world.area.Area;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;

public class IngameGui extends Gui
{
    private final Random rand = new Random();
    private final TheStructureWorld thestructureworld;

    /** Previous frame vignette brightness (slowly changes by 1% each frame) */
    public float prevVignetteBrightness = 1.0F;


    /** The ItemData that is currently being highlighted */
    private ItemData highlightingItemData;

    public IngameGui(TheStructureWorld t)
    {
        this.thestructureworld = t;
    }
    
    @Override
    public boolean doesGuiPauseGame()
    {
        return false;
    }
    
     public int timePassed = 0;
	 private float rotate;
	 private float rotate2;
     public static Calendar cal = Calendar.getInstance();
     public int ScanPosX = 0;
     public int ScanPosY = 0;
     
     public class ArrayListConsole
     {
     	public float x;
     	public float y;
     	public String text;

     	public ArrayListConsole(float xP1,float yP1, String s)
     	{
     		this.x = xP1;
     		this.y = yP1;
     		this.text = s;
     	}
     }

     public static int Hours;
     public static int minutes;
     public static int seconds;
     public static int addTime = 0;
     public boolean showGui = true;
     public int showGuiTimer = 0;
     public FontRenderer font;
     
     public static boolean nearbyObject = false;
     
    /**
     * Render the in-game overlay..
     */
    public void renderGameOverlay(float bright, boolean p_73830_2_, int p_73830_3_, int p_73830_4_) 
    {
        ScaledResolution var5 = new ScaledResolution(this.thestructureworld, this.thestructureworld.displayWidth, this.thestructureworld.displayHeight);
        int w = var5.getScaledWidth();
        int h = var5.getScaledHeight();
        if(this.thestructureworld.fontRenderer!=null&&this.font==null){this.font=this.thestructureworld.fontRenderer;}
        this.thestructureworld.entityRenderer.setupOverlayRendering();
        GL11.glEnable(GL11.GL_BLEND);
        if(this.showGui){
        //this.renderDarkness(this.thestructureworld.thePlayer.getBrightness(bright), w, h);
        //this.renderScreen(w, h);
        }
        if(nearbyObject){
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/Menu/button.png",0,true);  
        Tessellator var4 = Tessellator.instance;
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, 350D, 0.0D, 0.0D, 0.1D);
        var4.addVertexWithUV(50D, 350D, 0.0D, 0.12D, 0.1D);
        var4.addVertexWithUV(50D, 300.0D, 0.0D, 0.12D, 0.0D);
        var4.addVertexWithUV(0.0D, 300.0D, 0.0D, 0.0D, 0.0D);
        var4.draw();
        var4.startDrawingQuads();
        var4.addVertexWithUV(50.0D, 350D, 0.0D, 0.0D, 0.2D);
        var4.addVertexWithUV(75D, 350D, 0.0D, 0.12D, 0.2D);
        var4.addVertexWithUV(75D, 305.0D, 0.0D, 0.12D, 0.1D);
        var4.addVertexWithUV(50.0D, 305.0D, 0.0D, 0.0D, 0.1D);
        var4.draw();
        }
        
        if(Keyboard.isKeyDown(Keyboard.KEY_P)&&this.showGuiTimer==0)
        {
        this.thestructureworld.displayGuiScreen(new ShaderEditorGui());
        this.showGuiTimer=200;
        }
        
        if(Keyboard.isKeyDown(Keyboard.KEY_F2)&&this.showGuiTimer==0)
        {
        if(this.showGui){this.showGui=false;}	
        else if(!this.showGui){this.showGui=true;}	
        this.showGuiTimer=200;
        }
        if(this.showGuiTimer>0){--this.showGuiTimer;}
        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
        GL11.glDisable(GL11.GL_LIGHTING);
        GL11.glEnable(GL11.GL_ALPHA_TEST);
        GL11.glPushMatrix();
        if(GameProfile.consoleOpened)
        {
        if(GameProfile.text == "Help Command")	
        {
        	GameProfile.ShowHelp = 500;
        	GameProfile.text = "";
        }
        if(GameProfile.ShowHelp > 0)
        {
        	GameProfile.ShowHelp -= 0.1D;
        	if(KeyAndOtherSettings.helpCommand(GameProfile.ShowHelp) != "")
        	{
        		GameProfile.text = KeyAndOtherSettings.helpCommand(GameProfile.ShowHelp);
        	}
        	else if(GameProfile.ShowHelp < 3)
        	{
        		GameProfile.text = "";
        	}
        } 
        this.drawString(font,"<Console> :"+GameProfile.text, 2, 4, 14737632);
        }
        GameProfile.openorclosechat();
        this.drawString(this.thestructureworld.fontRenderer,""+TheStructureWorld.getTheStructureWorld().debugFPS, 2, 54, 14737632);
        this.drawString(font, "x: "+Double.valueOf(this.thestructureworld.thePlayer.posX), 2, 64, 14737632);
        this.drawString(font, "y: "+Double.valueOf(this.thestructureworld.thePlayer.posY), 2, 72, 14737632);
        this.drawString(font, "z: "+Double.valueOf(this.thestructureworld.thePlayer.posZ), 2, 80, 14737632);
        this.drawString(font, "Direction: " +  this.getLookDirection(), 2, 88, 14737632);  
        int t = (int)((float)this.thestructureworld.thePlayer.worldObj.getWorldTime()/100);
        int days = ((t/60)/24);
        Hours = (t/60) - (((t/60)/24)*24);
        minutes = (t)-(Hours*60)-(days*60*24);
        String fakeSeconds = (""+(int)System.currentTimeMillis());
        seconds= Integer.parseInt(fakeSeconds.substring(fakeSeconds.length()-3, fakeSeconds.length()-2));
        
        
        //360   
        
        this.drawString(font,"Days: "+days+" Hours: "+Hours+" Minutes: "+minutes+" Seconds: "+seconds, 2, 96, 14737632);
        GL11.glPopMatrix();
    }
    
    
    
    public static String getLookDirection()
    {
    	int Compass = MathHelper.floor_double((double)(TheStructureWorld.getTheStructureWorld().thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
    	return Direction.directions[Compass];
    }

    
    public double HeartBeatTexture = 0;
    public int wasRunning = 0;
    
   
    
    private void renderScreen(int x, int y)
    {
    	GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
        GL11.glDisable(GL11.GL_DEPTH_TEST);
        GL11.glDisable(GL11.GL_ALPHA_TEST);
        GL11.glDepthMask(false);
        OpenGlHelper.glBlendFunc(770, 771, 1, 0);
        Tessellator var4 = Tessellator.instance;
        GL11.glPushMatrix();
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/Empty Weapon Slots.png",0,true); 
        GL11.glTranslatef(250F, 220F, 0);
        GL11.glScalef(1F, 0.75F, 1F);
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, y/1.8D, 0.0D, 0.0D, 1D);
        var4.addVertexWithUV(x/3D, y/1.8D, 0.0D, 1.0D, 1D);
        var4.addVertexWithUV(x/3D, 0.0D, 0.0D, 1.0D, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
        var4.draw();
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/Glass_Crack.png",0,true); 
        GL11.glTranslatef(100F, 20F, 0);
        GL11.glScalef(0.5F, 0.5F, 0.5F);
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, y/1.8D, 0.0D, 0.0D, 1D);
        var4.addVertexWithUV(x/3D, y/1.8D, 0.0D, 1.0D, 1D);
        var4.addVertexWithUV(x/3D, 0.0D, 0.0D, 1.0D, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
        var4.draw();
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/Heart-Beat and Grenades.png",0,true); 
        GL11.glTranslatef(225F, 125F, 0);
        GL11.glScalef(2F, 1.25F, 2F);
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, y/1.8D, 0.0D, 0.0D, 1D);
        var4.addVertexWithUV(x/3D, y/1.8D, 0.0D, 1.0D, 1D);
        var4.addVertexWithUV(x/3D, 0.0D, 0.0D, 1.0D, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
        var4.draw();
        GL11.glPopMatrix();
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/heart beat monitor/Heart_Beat_"+(int)this.HeartBeatTexture+".png",0,true); 
        if(EntityRenderer.secondspassed){
        if(this.HeartBeatTexture < 30)
        {
        	if(TheStructureWorld.TheStructureWorld.thePlayer.getHealth() < 50 || TheStructureWorld.TheStructureWorld.thePlayer.isRunning()){if(this.wasRunning<500){++this.wasRunning;}this.HeartBeatTexture += 0.05D;}
        	if(TheStructureWorld.TheStructureWorld.thePlayer.getHealth() < 25  || this.wasRunning > 0 || TheStructureWorld.TheStructureWorld.thePlayer.isRunning()){this.HeartBeatTexture += 0.05D;}
        	if(TheStructureWorld.TheStructureWorld.thePlayer.getHealth() < 15 || this.wasRunning > 150){this.HeartBeatTexture += 0.05D;}
        	if(TheStructureWorld.TheStructureWorld.thePlayer.getHealth() < 5){this.HeartBeatTexture += 0.05D;}
        	this.HeartBeatTexture += 0.1D;
        	if(this.wasRunning > 0)
        	{
        		--this.wasRunning;
        	}
        	
        }
        else 
        {
        	this.HeartBeatTexture = 0;
        }}
        GL11.glPushMatrix();
        GL11.glTranslatef(558F, 332F, 0);
        GL11.glScalef(3F, 2.25F, 3F);
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, y/18D, 0.0D,  0, 1D);
        var4.addVertexWithUV(x/15D, y/18D, 0.0D, 1, 1D);
        var4.addVertexWithUV(x/15D, 0.0D, 0.0D,  1, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, 0.0D,   0, 0.0D);
        var4.draw();
        GL11.glPopMatrix();
        
        GL11.glPushMatrix();
        GL11.glScaled(1.2D, 1.2D, 1.2D);
        //this.focus(483-this.ScanPosX, 187-this.ScanPosY);
        GL11.glPopMatrix();
        for(int i=0;i<3;++i)
        {
        	++this.rotate;++this.rotate2;++this.rotate2;++this.rotate2;
        }
        GL11.glDepthMask(true);
        GL11.glEnable(GL11.GL_DEPTH_TEST);
        GL11.glEnable(GL11.GL_ALPHA_TEST);
     }
    
    public void renderreflection(int X,int Y)
    {
    	GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
    	GL11.glPushMatrix();
    	GL11.glTranslatef(X, Y, 0);
        GL11.glPushMatrix();
        //this.drawTextured(0, 0, 200,200,0,0, EntityRenderer.buffer.getRefractionDepthTexture());
        GL11.glPopMatrix();
        GL11.glPopMatrix();
    }

    public void renderrefraction(int X,int Y)
    {
    	GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
    	GL11.glPushMatrix();
    	GL11.glTranslatef(X, Y, 0);
        GL11.glPushMatrix();
        //this.drawTextured(0, 0, 200,200,0,0, EntityRenderer.buffer.getRefractionDepthTexture());
        GL11.glPopMatrix();
        GL11.glPopMatrix();
    }
    
    public void focus(int X,int Y)
    {
    	GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
    	GL11.glPushMatrix();
    	GL11.glTranslatef(X, Y, 0);
        GL11.glPushMatrix();
        GL11.glTranslatef(50.0F, 50.0F, 0);
        GL11.glRotatef(0,0,0,1);
        GL11.glTranslatef(-15F, -15F, 0);
        this.drawTextured(0, 0, 30,30,0,0, "/gui/Focus.png");
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        GL11.glTranslatef(50.0F, 50.0F, 0);
        GL11.glRotatef(this.rotate,0,0,1);
        GL11.glTranslatef(-15F, -15F, 0);
        this.drawTextured(0, 0, 30,30,0,0, "/gui/Focus Rotate.png");
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        GL11.glTranslatef(50.0F, 50.0F, 0);
        GL11.glRotatef(this.rotate2,0,0,1);
        GL11.glTranslatef(-15F, -15F, 0);
        this.drawTextured(0, 0, 30,30,0,0, "/gui/Focus Rotate Inner.png");
        GL11.glPopMatrix();
        GL11.glPopMatrix();
    }
    
    public void drawTextured(double x, double y, double widht,double height, double moveX,double moveY,int texture)
    {
    	GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
        float var7 = 0.00390625F;
        float var8 = 0.00390625F;
        Tessellator tes = Tessellator.instance;
        tes.startDrawingQuads();
        tes.addVertexWithUV(x + moveX, y + height + moveY, this.zLevel,0, 1);
        tes.addVertexWithUV((x + widht)+moveX, (y + height)+ moveY, this.zLevel, 1, 1);
        tes.addVertexWithUV((x + widht)+moveX, y + moveY, this.zLevel, 1, 0);
        tes.addVertexWithUV(x + moveX , y + moveY, this.zLevel, 0, 0);
        tes.draw();
    }
   
    
    public void drawTextured(double x, double y, double widht,double height, double moveX,double moveY,String texture)
    {
    	this.thestructureworld.getTextureManager().bindTexture(texture,0,true);
        float var7 = 0.00390625F;
        float var8 = 0.00390625F;
        Tessellator tes = Tessellator.instance;
        tes.startDrawingQuads();
        tes.addVertexWithUV(x + moveX, y + height + moveY, this.zLevel,0, 1);
        tes.addVertexWithUV((x + widht)+moveX, (y + height)+ moveY, this.zLevel, 1, 1);
        tes.addVertexWithUV((x + widht)+moveX, y + moveY, this.zLevel, 1, 0);
        tes.addVertexWithUV(x + moveX , y + moveY, this.zLevel, 0, 0);
        tes.draw();
    }
    
    /**
     * Renders the vignette. Args: vignetteBrightness, width, height
     */
    private void renderDarkness(float Brightness, int x, int y)
    {
    	Brightness = 1.0F - Brightness;

        if (Brightness < 0.0F)
        {
        	Brightness = 0.0F;
        }

        if (Brightness > 1.0F)
        {
        	Brightness = 1.0F;
        }
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/vignette.png",1,true); 
        this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(Brightness - this.prevVignetteBrightness) * 0.01D);
        GL11.glDisable(GL11.GL_DEPTH_TEST);
        GL11.glDepthMask(false);
        OpenGlHelper.glBlendFunc(0, 769, 1, 0);
        GL11.glColor4f(this.prevVignetteBrightness-0.2F, this.prevVignetteBrightness-0.2F, this.prevVignetteBrightness-0.2F, 1.0F);
        Tessellator var4 = Tessellator.instance;
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, (double)y, -90.0D, 0.0D, 1.0D);
        var4.addVertexWithUV((double)x, (double)y, -90.0D, 1.0D, 1.0D);
        var4.addVertexWithUV((double)x, 0.0D, -90.0D, 1.0D, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
        var4.draw();
        GL11.glDepthMask(true);
        GL11.glEnable(GL11.GL_DEPTH_TEST);
        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
        OpenGlHelper.glBlendFunc(770, 771, 1, 0);
    }
    


    /**
     * The update tick for the ingame UI
     */
    public void updateTick()
    {     
       
    }
    
  
}
