package nl.thestructureworld.client.shaders.terrain;

import java.util.List;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.shaders.Light;
import nl.thestructureworld.client.shaders.ShaderProgram;
import nl.thestructureworld.client.shaders.tutmaydelete.Matrix;

import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;


public class TerrainShader extends ShaderProgram
{
	private int maxLights = 8;
	private static final String VERTEX_FILE = FileBasicJava.sourceShaders+"terrain/terrainVertexShader.txt";
	private static final String FRAGMENT_FILE = FileBasicJava.sourceShaders+"terrain/terrainFragmentShader.txt"; 
	private int location_transformationMatrix;
	private int location_projectionMatrix;
	private int location_viewMatrix;
	private int location_shineDamper;
	private int location_reflectivity;
	private int location_textureRepeating;
	private int location_skyColor;
	private int location_fogDensity;
	private int location_fogGradient;
	private int location_blendmap;
	private int location_backGroundTexture;
	private int location_rTexture;
	private int location_gTexture;
	private int location_bTexture;	   
    private int location_lightPosition[]= new int[this.maxLights];;
    private int location_lightColour[]= new int[this.maxLights];;
    
	public TerrainShader() 
	{
		super(VERTEX_FILE, FRAGMENT_FILE);
	}

	@Override
	protected void bindAttributes() 
	{
		super.bindAttribute(0, "position");
		super.bindAttribute(1, "textureCoordinates");
		super.bindAttribute(2, "normal");
	}

	@Override
	protected void getAllUniformLocations() 
	{
		location_transformationMatrix = super.getUniformLocation("transformationMatrix");
		location_projectionMatrix = super.getUniformLocation("projectionMatrix");
		location_viewMatrix = super.getUniformLocation("viewMatrix");
	    location_lightPosition = new int[this.maxLights];
		location_lightColour = new int[this.maxLights];
		location_shineDamper = super.getUniformLocation("shineDamper");
		location_reflectivity = super.getUniformLocation("reflectivity");
		location_textureRepeating = super.getUniformLocation("textureRepeating");
		location_skyColor = super.getUniformLocation("skyColor");
		location_fogDensity = super.getUniformLocation("fogDensity");
		location_fogGradient = super.getUniformLocation("fogGradient");
		location_blendmap = super.getUniformLocation("blendmap");
		location_backGroundTexture = super.getUniformLocation("backgroundTexture");
		location_rTexture = super.getUniformLocation("rTexture");
		location_gTexture = super.getUniformLocation("gTexture");
		location_bTexture = super.getUniformLocation("bTexture");
		for(int i=0;i<this.maxLights;++i)
        {
        	location_lightPosition[i] = super.getUniformLocation("lightPosition["+i+"]");
   	        location_lightColour[i] = super.getUniformLocation("lightColour["+i+"]");
        }
	}
	
	public void connecttextureUnit()
	{
		super.loadInt(location_backGroundTexture, 0);
		super.loadInt(location_rTexture, 1);
		super.loadInt(location_gTexture, 2);
		super.loadInt(location_bTexture, 3);
		super.loadInt(location_blendmap, 4);
	}
	
	public void loadShineVariables(float damper,float reflectivity)
	{
		super.loadFloat(location_shineDamper, damper);
		super.loadFloat(location_reflectivity, reflectivity);
	}
	
	public void loadTextureRepeating(float textureRepeating)
	{
		super.loadFloat(location_textureRepeating, textureRepeating);
	}
	
	public void loadTransformationMatrix(Matrix4f matrix)
	{
		super.loadMatrix(location_transformationMatrix, matrix);
	}
	
	public static Light sun = new Light(new float[]{0,2000,0},new float[]{1F,1F,1F});
    public int list = 0;
	
	public void loadLight(List<Light> lights)
	{
		if(list<=5){lights.add(this.sun);list+=1;}
		for(int i=0;i<maxLights;i++)
		{
			
            if(i<lights.size())
            {
                super.loadVector(location_lightPosition[i], lights.get(i).getPosition());
                super.loadVector(location_lightColour[i], lights.get(i).getColour()); 
            }
            else
            {
            	System.out.print("hhgghgh");
                super.loadVector(location_lightPosition[i], new Vector3f(0, 0, 0));
                super.loadVector(location_lightColour[i], new Vector3f(0, 0, 0));
            }
        }
	}
	
	public void loadViewMatrix()
	{
		Matrix4f viewMatrix = Matrix.createViewMatrix();
		super.loadMatrix(location_viewMatrix, viewMatrix);
	}
	
	public void loadProjectionMatrix(Matrix4f projection)
	{
		super.loadMatrix(location_projectionMatrix, projection);
	}

	public void loadSkyColor(float[] rgb,float fogDensity, float fogGradient)
	{
	    	super.loadVector(location_skyColor,new Vector4f(rgb[0]*0.00392156862745098F,rgb[1]*0.00392156862745098F,rgb[2]*0.00392156862745098F,rgb[3]));
	    	super.loadFloat(location_fogDensity,fogDensity);
	    	super.loadFloat(location_fogGradient,fogGradient);
	}
}
