package nl.miystengine.server.management;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufOutputStream;
import io.netty.buffer.Unpooled;
import io.netty.handler.codec.base64.Base64;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.Proxy;
import java.security.KeyPair;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.Callable;
import javax.imageio.ImageIO;
import nl.miystengine.client.ExceptionA;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.GameProfile;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.gui.MainMenuGui;
import nl.miystengine.entity.EntityPlayer;
import nl.miystengine.entity.PlayerMPEntity;
import nl.miystengine.util.IProgressUpdate;
import nl.miystengine.util.MathHelper;
import nl.miystengine.util.ReportedException;

import nl.miystengine.world.StructureWorldInfo;
import nl.miystengine.world.World;
import nl.miystengine.world.WorldServer;
import nl.miystengine.world.SettingsOfStructureWorld;
import org.apache.commons.lang3.Validate;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.common.base.Charsets;

public abstract class MiystEngineServer implements Runnable
{
    private static MiystEngineServer Server;
    private final File anvilFile;
    private final List tickables = new ArrayList();
    private final NetworkSystem networksystem;
    public final ServerStatusResponse serverstatusresponse = new ServerStatusResponse();
    private static final Logger logger = LogManager.getLogger();
    private int serverPort = -1;
    public WorldServer worldServers;
    public ServerConfigurationManager serverConfigManager;
    private boolean serverRunning = true;
    private boolean serverStopped;
    private int tickCounter;
    protected final Proxy serverProxy;

    /**
     * The task the server is currently working on(and will output on outputPercentRemaining).
     */
    public String currentTask;

    /** The percentage of the current task finished so far. */
    public int percentDone;

    /** True if the server is in online mode. */
    private boolean onlineMode = false;

    /** True if the server has animals turned on. */
    private boolean canSpawnAnimals;

    /** Indicates whether PvP is active on the server or not. */
    private boolean pvpEnabled;

    /** Determines if flight is allowed or not. */
    private boolean allowFlight;

    /** Maximum build height. */
    private int buildLimit;
    private int field_143008_E = 0;
    public final long[] tickTimeArray = new long[100];

    /** Stats are [dimension][tick%100] system.nanoTime is stored. */
    public long[][] timeOfLastDimensionTick;
    private KeyPair serverKeyPair;

    /** Username of the server owner (for integrated servers) */
    private String serverOwner;
    private String folderName;
    private String worldName;
    private int enableBadSpots;
    /**
     * If true, there is no need to save Areas or stop the server, because that is already being done.
     */
    public boolean worldIsBeingDeleted;
    private String field_147141_M = "";
    private boolean serverIsRunning;

    /**
     * Set when warned for "Can't keep up", which triggers again after 15 seconds.
     */
    private long timeOfLastWarning;
    private String userMessage;
    private boolean startProfiling;
    private boolean isGamemodeForced;
    private long field_147142_T = 0L;
   
    public MiystEngineServer(File gen_functioni_i46400_1_, Proxy gen_functioni_i46400_2_)
    {
        Server = this;
        this.serverProxy = gen_functioni_i46400_2_;
        this.anvilFile = gen_functioni_i46400_1_;
        this.networksystem = new NetworkSystem(this);
    }

    /**
     * Initialises the server and starts it.
     */
    protected abstract boolean startServer() throws IOException;


    /**
     * Typically "menu.convertingLevel", "menu.loadingLevel" or others.
     */
    protected synchronized void setUserMessage(String gen_functioni_71192_1_)
    {
        this.userMessage = gen_functioni_71192_1_;
    }

    public synchronized String getUserMessage()
    {
        return this.userMessage;
    }

    protected void initialWorldAreaLoad()
    {
        boolean var1 = true;
        boolean var2 = true;
        boolean var3 = true;
        boolean var4 = true;
        int var5 = 0;
        this.setUserMessage("Generating Terrain");
        WorldServer var7 = this.worldServers;
        float[] var8 = var7.getSpawnPoint();
        long var9 = getSystemTimeMillis();

        for (int var11 = -192; var11 <= 192 && this.isServerRunning(); var11 += 16)
        {
            for (int var12 = -192; var12 <= 192 && this.isServerRunning(); var12 += 16)
            {
                long var13 = getSystemTimeMillis();

                if (var13 - var9 > 1000L)
                {
                    var9 = var13;
                }
                ++var5;

            }
        }

        this.clearCurrentTask();
    }

    public abstract String canStructuresSpawn();

    public abstract SettingsOfStructureWorld.GameType getGameType();

    public abstract String difficulty();

    public abstract boolean tsw_gen_functioni_152363_m();

    /**
     * Used to display a percent remaining given text and the percentage.
     */
    protected void outputPercentRemaining(String gen_functioni_71216_1_, int gen_functioni_71216_2_)
    {
        this.currentTask = gen_functioni_71216_1_;
        this.percentDone = gen_functioni_71216_2_;
        logger.info(gen_functioni_71216_1_ + ": " + gen_functioni_71216_2_ + "%");
    }

    /**
     * Set current task to null and set its percentage to 0.
     */
    protected void clearCurrentTask()
    {
        this.currentTask = null;
        this.percentDone = 0;
    }
    
    public boolean returnToMenu = false;

    /**
     * Saves all necessary data as preparation for stopping the server.
     */
    public void stopServer(boolean noSave)
    {
        if(!noSave && !this.worldIsBeingDeleted)
        {
            logger.info("Stopping server");
            if (this.tsw_gen_functioni_147137_ag() != null)
            {
                this.tsw_gen_functioni_147137_ag().terminateEndpoints();
            }
            if (this.serverConfigManager != null)
            {
                logger.info("Saving players");
                this.serverConfigManager.removeAllPlayers();
                this.serverConfigManager.sendPlayerInfoToAllPlayers();
            }
            if (this.worldServers != null)
            {
                logger.info("Saving world");
            }
            this.returnToMenu = true;
        }
    }

    public boolean isServerRunning()
    {
        return this.serverRunning;
    }

    /**
     * Sets the serverRunning variable to false, in order to get the server to shut down.
     */
    public void initiateShutdown()
    {
        this.serverRunning = false;
    }

    public void run()
    {
        try
        {      
            if (this.startServer())
            {
                long var1 = getSystemTimeMillis();
                long var50 = 0L;
                this.serverstatusresponse.tsw_gen_functioni_151321_a(new ServerStatusResponse.ProtocolVersionIdentifier("4", 5));
                this.tsw_gen_functioni_147138_a(this.serverstatusresponse);

                while (this.serverRunning)
                {
                    long var5 = getSystemTimeMillis();
                    long var7 = var5 - var1;

                    if (var7 > 2000L && var1 - this.timeOfLastWarning >= 15000L)
                    {
                        logger.warn("Server is overloaded!", new Object[] {Long.valueOf(var7), Long.valueOf(var7 / 50L)});
                        var7 = 2000L;
                        this.timeOfLastWarning = var1;
                    }

                    if (var7 < 0L)
                    {
                        logger.warn("Did the system time change?");
                        var7 = 0L;
                    }
                    var50 += var7;
                    var1 = var5;
                    while (var50 > 50L)
                    {
                       var50 -= 50L;
                       this.tick();
                    }
                    Thread.sleep(Math.max(1L, 50L - var50));
                    this.serverIsRunning = true;
                }
            }
            else
            {
            	
            }
        }
        catch (Throwable var48)
        {
            logger.error("Encountered an unexpected exception", var48);
            System.out.println("[Server Start Thread/ERROR]: " + var48.getMessage());
        }
        finally
        {
            try
            {
                this.stopServer(false);
                this.serverStopped = true;
            }
            catch (Throwable var46)
            {
                logger.error("Exception stopping the server", var46);
            }
            finally
            {
                this.systemExitNow();
            }
        }
    }

    public void tsw_gen_functioni_147138_a(ServerStatusResponse gen_functioni_147138_1_)
    {
        File var2 = this.getFile("server-icon.png");

        if (var2.isFile())
        {
            ByteBuf var3 = Unpooled.buffer();

            try
            {
                BufferedImage var4 = ImageIO.read(var2);
                Validate.validState(var4.getWidth() == 64, "Must be 64 pixels wide");
                Validate.validState(var4.getHeight() == 64, "Must be 64 pixels high");
                ImageIO.write(var4, "PNG", new ByteBufOutputStream(var3));
                ByteBuf var5 = Base64.encode(var3);
                gen_functioni_147138_1_.tsw_gen_functioni_151320_a("data:image/png;base64," + var5.toString(Charsets.UTF_8));
            }
            catch (Exception var9)
            {
                logger.error("Couldn\'t load server icon", var9);
            }
            finally
            {
                var3.release();
            }
        }
    }

    protected File getDataDirectory()
    {
        return new File(".");
    }

    /**
     * Called on exit from the main run() loop.
     */
    protected void finalTick() {}

    /**
     * Directly calls System.exit(0), instantly killing the program.
     */
    protected void systemExitNow() {}

    /**
     * Main tsw_gen_functionition called by run() every loop.
     */
    public void tick()
    {
        long var1 = System.nanoTime();
        ++this.tickCounter;

        if (var1 - this.field_147142_T >= 5000000000L)
        {
            this.field_147142_T = var1;
            this.serverstatusresponse.tsw_gen_functioni_151319_a(new ServerStatusResponse.PlayerCountData(1, this.getCurrentPlayerCount()));
            GameProfile[] var3 = new GameProfile[Math.min(this.getCurrentPlayerCount(), 12)];
            int var4 = MathHelper.getRandomIntegerInRange(MiystEngine.miystengine.rand, 0, this.getCurrentPlayerCount() - var3.length);

            Collections.shuffle(Arrays.asList(var3));
            this.serverstatusresponse.tsw_gen_functioni_151318_b().tsw_gen_functioni_151330_a(var3);
        }
        this.tickTimeArray[this.tickCounter % 100] = System.nanoTime() - var1;
    }

  
   
    public void startServerThread()
    {
        (new Thread("Server thread")
        {
            public void run()
            {
                MiystEngineServer.this.run();
            }
        }).start();
    }

    /**
     * Returns a File object from the specified string.
     */
    public File getFile(String gen_functioni_71209_1_)
    {
        return new File(this.getDataDirectory(), gen_functioni_71209_1_);
    }

    /**
     * Logs the message with a level of WARN.
     */
    public void logWarning(String gen_functioni_71236_1_)
    {
        logger.warn(gen_functioni_71236_1_);
    }

    /**
     * Gets the worldServer by the given dimension.
     */
    public WorldServer worldServer()
    {
        return this.worldServers;
    }

  
    public String getVersion()
    {
        return "V1.0.0";
    }

    /**
     * Returns the number of players currently on the server.
     */
    public int getCurrentPlayerCount()
    {
        return this.serverConfigManager.getCurrentPlayerCount();
    }
    
    /**
     * Returns an array of the usernames of all the connected players.
     */
    public String[] getAllUsernames()
    {
        return this.serverConfigManager.getAllUsernames();
    }

    public String getServerModName()
    {
        return "Vanilla";
    }

    /**
     * Gets the Server.
     */
    public static MiystEngineServer getServer()
    {
        return Server;
    }
    public String getCommandSenderName()
    {
        return "Server";
    }

    /**
     * Gets KeyPair instanced in MiystEngineServer.
     */
    public KeyPair getKeyPair()
    {
        return this.serverKeyPair;
    }

    /**
     * Returns the username of the server owner (for integrated servers)
     */
    public String getServerOwner()
    {
        return this.serverOwner;
    }

    /**
     * Sets the username of the owner of this server (in the case of an integrated server)
     */
    public void setServerOwner(String gen_functioni_71224_1_)
    {
        this.serverOwner = gen_functioni_71224_1_;
    }

    public boolean isSinglePlayer()
    {
        return this.serverOwner != null;
    }

    public String getFolderName()
    {
        return this.folderName;
    }

    public void setFolderName(String gen_functioni_71261_1_)
    {
        this.folderName = gen_functioni_71261_1_;
    }

    public void setWorldName(String gen_functioni_71246_1_)
    {
        this.worldName = gen_functioni_71246_1_;
    }

    public String getWorldName()
    {
        return this.worldName;
    }

    public void setKeyPair(KeyPair gen_functioni_71253_1_)
    {
        this.serverKeyPair = gen_functioni_71253_1_;
    }

    public void setDifficulty(String s)
    {
            WorldServer var3 = this.worldServers;

            if (var3 != null && var3.getStructureWorldInfo() != null && var3.getStructureWorldInfo().getDifficulty() != null)
            {
                if (var3.getStructureWorldInfo().getDifficulty().contains("Hard"))
                {
                    var3.difficultySetting = "Hard";
                    var3.setAllowedSpawnTypes(true, true);
                }
                else if (this.isSinglePlayer())
                {
                    var3.difficultySetting = s;
                    var3.setAllowedSpawnTypes(true, true);
                }
                else
                {
                    var3.difficultySetting = s;
                    var3.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
                }
            }
    }

    protected boolean allowSpawnMonsters()
    {
        return true;
    }

    public void canCreateBadSpots(int gen_functioni_71194_1_)
    {
        this.enableBadSpots = gen_functioni_71194_1_;
    }

    /**
     * WARNING : directly calls
     * getActiveAnvilConverter().deleteWorldDirectory(theWorldServer[0].getSaveHandler().getWorldDirectoryName());
     */
    public void deleteWorldAndStopServer()
    {
        this.worldIsBeingDeleted = true;
        this.initiateShutdown();
    }
    

    public String tsw_gen_functioni_147133_T()
    {
        return this.field_147141_M;
    }

   
    /**
     * Returns whether snooping is enabled or not.
     */
    public boolean isSnooperEnabled()
    {
        return true;
    }

    public abstract boolean isDedicatedServer();

    public boolean isServerInOnlineMode()
    {
        return this.onlineMode;
    }

    public void setOnlineMode(boolean gen_functioni_71229_1_)
    {
        this.onlineMode = gen_functioni_71229_1_;
    }

    public boolean getCanSpawnAnimals()
    {
        return this.canSpawnAnimals;
    }

    public void setCanSpawnAnimals(boolean gen_functioni_71251_1_)
    {
        this.canSpawnAnimals = gen_functioni_71251_1_;
    }

    public boolean isPVPEnabled()
    {
        return this.pvpEnabled;
    }

    public void setAllowPvp(boolean gen_functioni_71188_1_)
    {
        this.pvpEnabled = gen_functioni_71188_1_;
    }

    public boolean isFlightAllowed()
    {
        return this.allowFlight;
    }

    public void setAllowFlight(boolean gen_functioni_71245_1_)
    {
        this.allowFlight = gen_functioni_71245_1_;
    }

    public int getBuildLimit()
    {
        return this.buildLimit;
    }

    public void setBuildLimit(int gen_functioni_71191_1_)
    {
        this.buildLimit = gen_functioni_71191_1_;
    }

    public ServerConfigurationManager getConfigurationManager()
    {
        return this.serverConfigManager;
    }

    public void tsw_gen_functioni_152361_a(ServerConfigurationManager gen_functioni_152361_1_)
    {
        this.serverConfigManager = gen_functioni_152361_1_;
    }

    /**
     * Sets the game type for all worlds.
     */
    public void setGameType(SettingsOfStructureWorld.GameType gen_functioni_71235_1_)
    {  
            getServer().worldServers.getStructureWorldInfo().setGameType(gen_functioni_71235_1_);
    }

    public NetworkSystem tsw_gen_functioni_147137_ag()
    {
        return this.networksystem;
    }

    public boolean serverIsInRunLoop()
    {
        return this.serverIsRunning;
    }

    public int getTickCounter()
    {
        return this.tickCounter;
    }

    public void enableProfiling()
    {
        this.startProfiling = true;
    }


    /**
     * Return the position for this command sender.
     */
    public float[] getPlayerCoordinates()
    {
        return new float[]{0, 0, 0};
    }

    public World getEntityWorld()
    {
        return this.worldServers;
    }

    /**
     * Return the spawn protection area's size.
     */
    public int getSpawnProtectionSize()
    {
        return 16;
    }

    /**
     * Returns true if a player does not have permission to edit the TerrainObject at the given coordinates.
     */
    public boolean isTerrainObjectProtected(World gen_functioni_96290_1_, int gen_functioni_96290_2_, int gen_functioni_96290_3_, int gen_functioni_96290_4_, EntityPlayer gen_functioni_96290_5_)
    {
        return false;
    }

    public boolean getForceGamemode()
    {
        return this.isGamemodeForced;
    }

    public Proxy getServerProxy()
    {
        return this.serverProxy;
    }

    /**
     * returns the difference, measured in milliseconds, between the current system time and midnight, January 1, 1970
     * UTC.
     */
    public static long getSystemTimeMillis()
    {
        return System.currentTimeMillis();
    }
}
