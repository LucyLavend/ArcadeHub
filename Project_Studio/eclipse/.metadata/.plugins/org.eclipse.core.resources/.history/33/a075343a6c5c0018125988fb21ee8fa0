package nl.thestructureworld.client.renderer.texture;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.Callable;

import javax.imageio.ImageIO;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.IngameMenuAndOptionsGui;
import nl.thestructureworld.client.renderer.ArrayListTerrain;
import nl.thestructureworld.client.resources.IResourceManager;
import nl.thestructureworld.client.resources.IResourceManagerReloadListener;
import nl.thestructureworld.crash.CrashReport;
import nl.thestructureworld.crash.CrashReportCategory;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.util.ResourceLocation;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.EXTTextureFilterAnisotropic;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.util.glu.GLU;
import org.newdawn.slick.opengl.Texture;
import org.newdawn.slick.opengl.TextureLoader;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class TextureManager  implements ITickable, IResourceManagerReloadListener
{
    private static final Logger logger = LogManager.getLogger();
    private final Map mapTextureObjects = Maps.newHashMap();
    private final Map mapResourceLocations = Maps.newHashMap();
    private final List listTickables = Lists.newArrayList();
    private final Map mapTextureCounters = Maps.newHashMap();
    private IResourceManager theResourceManager;
    public static List<ArrayListTextures> TestObject = new ArrayList<ArrayListTextures>();
    
    public TextureManager(IResourceManager p_i1284_1_)
    {
         this.theResourceManager = p_i1284_1_;
    }
    public int i = 0;
    /**
     * bindTheTextureandRemoveEdges when turned true
     * @param source
     */
    public void bindTexture(String source,int mipmap,boolean Texture2D)
    {
        String sourceFinal = FileBasicJava.source+"/The Structure World" + source;
    	if(sourceFinal.contains("None"))
    	{
    	sourceFinal = sourceFinal.replace("None", "Normal");
    	}
    	Object o = (ITextureObject)this.mapTextureObjects.get(sourceFinal);
        if(!sourceFinal.contains("None"))
        {
        if (o == null)
        {
        try
        {
        this.loadTexture(sourceFinal, (ITextureObject)(o = new SimpleTexture(sourceFinal)));
        TestObject.add(new ArrayListTextures(((ITextureObject)o).getGlTextureId()));
        }
        catch(Exception e)
        {
        e.printStackTrace();	
        }
        }
        float mipmapBias = -1.5F;
        if(!IngameMenuAndOptionsGui.TextureFilterAnisotropicOrLOD_BIAS)
        {
        mipmapBias = 0F;	
        if(GLContext.getCapabilities().GL_EXT_texture_filter_anisotropic)
        {
        float amount = Math.min(IngameMenuAndOptionsGui.TextureFilterAnisotropic, GL11.glGetFloat(EXTTextureFilterAnisotropic.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT));	
        GL11.glTexParameterf(GL11.GL_TEXTURE_2D, EXTTextureFilterAnisotropic.GL_TEXTURE_MAX_ANISOTROPY_EXT, amount);
        }
        else
        {
        System.out.println("Texture Filter Anisotropic NOT supported");
        System.out.println("Textures far away will appear kinda blurry.....");
        }}
        else
        {
        mipmapBias = -1.5F;
        }
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, ((ITextureObject)o).getGlTextureId());
        if(mipmap == 1)
    	{
  	  	GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST_MIPMAP_NEAREST);
  	  	GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
  	    if(Texture2D){GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -0.1F);}
  	    else{GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, mipmapBias);}
  	    GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
        }
    	else if(mipmap == 2)
    	{
      	GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
        GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, mipmapBias);
        GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
        }
    	else if(mipmap == 3)
    	{
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_NEAREST);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
        GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, mipmapBias);
        GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
    	}	
    	else if(mipmap == 4)
    	{
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
        GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, mipmapBias);
        GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
    	}
    	else if(mipmap == -1)
    	{	
    	}
    	else
    	{
    	GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);		
    	}
       } 
    }
    
    public static int loadTexture(String fileName) 
    {
        Texture texture = null;
        try {
            texture = TextureLoader.getTexture("PNG",new FileInputStream(fileName + ".png"));
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Tried to load texture " + fileName + ".png, but that texture doesn't exist.");
            System.exit(-1);
        }
       return texture.getTextureID();
    }

    public void loadTexture(String p_110579_1_, final ITextureObject p_110579_2_)
    {
        boolean var3 = true;
        ITextureObject p_110579_2_2 = p_110579_2_;
        try
        {
            ((ITextureObject)p_110579_2_).loadTexture(this.theResourceManager);
        }
        catch (IOException var8)
        {
            logger.warn("Failed to load texture: " + p_110579_1_, var8);
            p_110579_2_2 = TextureUtil.missingTexture;
            this.mapTextureObjects.put(p_110579_1_, p_110579_2_2);
            var3 = false;
        }
        catch (Throwable var9)
        {
            CrashReport var5 = CrashReport.makeCrashReport(var9, "Registering texture");
            CrashReportCategory var6 = var5.makeCategory("Resource location being registered");
            var6.addCrashSection("Resource location", p_110579_1_);
            var6.addCrashSectionCallable("Texture object class", new Callable()
            {
                public String call()
                {
                    return p_110579_2_.getClass().getName();
                }
            });
            throw new ReportedException(var5);
        }
        this.mapTextureObjects.put(p_110579_1_, p_110579_2_2);
    }
    
    public void bindTexture(ResourceLocation p_110577_1_)
    {
        Object var2 = (ITextureObject)this.mapTextureObjects.get(p_110577_1_);
        if (var2 == null)
        {
            var2 = new SimpleTexture(p_110577_1_);
            this.loadTexture(p_110577_1_, (ITextureObject)var2);
        }
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, ((ITextureObject)var2).getGlTextureId());
    }

    public ResourceLocation getResourceLocation(int p_130087_1_)
    {
    	if((this.mapResourceLocations.get(Integer.valueOf(p_130087_1_)) instanceof ResourceLocation))
    	{
        return (ResourceLocation)this.mapResourceLocations.get(Integer.valueOf(p_130087_1_));
    	}
    	else
    	{
    		return null;
    	}
    }
    
    public boolean loadTexture(ResourceLocation p_110579_1_, final ITextureObject p_110579_2_)
    {
        boolean var3 = true;
        ITextureObject p_110579_2_2 = p_110579_2_;
        try
        {
            ((ITextureObject)p_110579_2_).loadTexture(this.theResourceManager);
        }
        catch (IOException var8)
        {
            logger.warn("Failed to load texture: " + p_110579_1_, var8);
            p_110579_2_2 = TextureUtil.missingTexture;
            this.mapTextureObjects.put(p_110579_1_, p_110579_2_2);
            var3 = false;
        }
        catch (Throwable var9)
        {
            CrashReport var5 = CrashReport.makeCrashReport(var9, "Registering texture");
            CrashReportCategory var6 = var5.makeCategory("Resource location being registered");
            var6.addCrashSection("Resource location", p_110579_1_);
            var6.addCrashSectionCallable("Texture object class", new Callable()
            {
                public String call()
                {
                    return p_110579_2_.getClass().getName();
                }
            });
            throw new ReportedException(var5);
        }
        this.mapTextureObjects.put(p_110579_1_, p_110579_2_2);
        return var3;
    }
   
    public ITextureObject getTexture(ResourceLocation p_110581_1_)
    {
        return (ITextureObject)this.mapTextureObjects.get(p_110581_1_);
    }
    
    public ITextureObject getTexture(String s)
    {
        return (ITextureObject)this.mapTextureObjects.get(s);
    }

    public ResourceLocation getDynamicTextureLocation(String p_110578_1_, DynamicTexture p_110578_2_)
    {
        Integer var3 = (Integer)this.mapTextureCounters.get(p_110578_1_);

        if (var3 == null)
        {
            var3 = Integer.valueOf(1);
        }
        else
        {
            var3 = Integer.valueOf(var3.intValue() + 1);
        }

        this.mapTextureCounters.put(p_110578_1_, var3);
        ResourceLocation var4 = new ResourceLocation(String.format("dynamic/%s_%d", new Object[] {p_110578_1_, var3}));
        this.loadTexture(var4, p_110578_2_);
        return var4;
    }

    public void tick()
    {
        Iterator var1 = this.listTickables.iterator();
        while (var1.hasNext())
        {
            ITickable var2 = (ITickable)var1.next();
            var2.tick();
        }
    }

    public void func_147645_c(ResourceLocation p_147645_1_)
    {
        ITextureObject var2 = this.getTexture(p_147645_1_);
        if (var2 != null)
        {
           GL11.glDeleteTextures(var2.getGlTextureId());
        }
    }

    public void onResourceManagerReload(IResourceManager p_110549_1_)
    {
        Iterator var2 = this.mapTextureObjects.entrySet().iterator();
        while (var2.hasNext())
        {
            Entry var3 = (Entry)var2.next();
            this.loadTexture((ResourceLocation) var3.getKey(), (ITextureObject)var3.getValue());
        }
    }
}
