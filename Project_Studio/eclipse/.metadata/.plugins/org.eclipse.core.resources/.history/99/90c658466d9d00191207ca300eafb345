package nl.thestructureworld.client.renderer.entity.vech;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.BasicEntityRender;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.terrain.Terrain;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;
import nl.thestructureworld.entity.EntityPlayer;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;
 
public class Trust_Hawk_UAV extends BasicEntityRender
{
	private boolean lockedOnPlayer = false;
	private String textureName = "";
	private float xMotion,yMotion,zMotion,rotationY = 0F;
	private float fallMotion = 0F;
	private boolean startUp = false;
	private float[] locationToGo;
	
	private float maxHealth = 20F;
	private float health = 20F;
	
	private boolean searchingPlayer = true;
	
	private int LOD_Model;
	private int LOD_Texture = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/gadgets/UAV/T_Hawk/T_Hawk_Low.png");
	 
	public Trust_Hawk_UAV(boolean canRoll,int material,String texture,float refl,float damp, String modelID,float[] textureCoords,float[] position,float reflecY, float rotX, float rotY, float rotZ,float scale) 
    {
		super(new ModelBasic(false,0,10,refl,damp,"objectsandterrain/"+texture,new Vector4f(1F,2.5F,0F,0F),modelID,true,false),position,rotX,rotY,rotZ,reflecY,scale);
		this.textureCoords = textureCoords;
		this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.reflecY = reflecY;
        this.scale = scale;
        this.model.shineDamper = damp;
        this.model.skipAlpha = 0.5F;
        this.textureName = texture;
        this.addColor = new float[]{0.15F,0.15F,0.15F};
        this.materialType = material;
        this.canRoll = canRoll;
        this.canPush = true;
        this.loadModel("Low_T_Hawk");
        this.LOD_Model = this.getModelID();    
        this.locationToGo = new float[]{this.position.x,this.position.z};
   }

		@Override
	 	public void updateRenderer()
	 	{
		 	 super.updateRenderer();

		 	EntityPlayer player = TheStructureWorld.TheStructureWorld.thePlayer;
		 	if(this.position.z > player.posZ - (3F) && this.position.z < player.posZ + (3F) && this.position.y > player.posY - (5F) && this.position.y < player.posY + (5F) && this.position.x > player.posX - (3F) && this.position.x < player.posX + (3F))
		 	{
		 		this.startUp = true;
		 	}
		 	else
		 	{
		 		this.applyGravityByWeight();
		 	}
		 	
			 if(this.startUp && Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null) > this.position.y - 10F)
			 {
				 if(Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null) > this.position.y - 5F && this.yMotion < 0.3F)
				 {
					 this.yMotion += 0.001F;
				 }
				 else
				 {
					 this.yMotion -= 0.0008F;
				 }
				 
				 this.position.y += this.yMotion;
			 }
			 else
			 {
				 this.startUp = false;
			 }
		
			 //Move and face to position
			 if(this.locationToGo != null && TheStructureWorld.TheStructureWorld.thePlayer != null)
			 {
				 if(this.position.x < this.locationToGo[0] - 3F && this.xMotion < 0.05F)
				 {
					 this.xMotion += 0.001F; 
				 } 
				 else if(this.position.x > this.locationToGo[0] + 3F && this.xMotion > -0.05F)
				 {
					 this.xMotion -= 0.001F;  
				 }
				 
				 if(this.position.z < this.locationToGo[1] - 3F && this.zMotion < 0.05F)
				 {
					 this.position.z += 0.001F; 
				 }
				 else if(this.position.z > this.locationToGo[1] + 3F && this.zMotion > -0.05F)
				 {
					 this.position.z -= 0.001F;  
				 }
				 
				 this.faceEntity(this.locationToGo[0], this.locationToGo[1]);
				 if(this.rotY < this.faceToPos - 1F)
				 {
					 this.rotationY += 0.001F;
					 this.rotY += this.rotationY; 
				 }
				 else if(this.rotY > this.faceToPos + 1F)
				 {
					 this.rotationY -= 0.001F;
					 this.rotY += this.rotationY; 
				 }
				 
				 this.position.x += this.xMotion;
				 this.position.z += this.zMotion;
			 }
			 
			if(this.position.x < TheStructureWorld.TheStructureWorld.thePlayer.posX - 25F || this.position.x > TheStructureWorld.TheStructureWorld.thePlayer.posX + 25F)  
			{
				this.locationToGo[0] = (float) TheStructureWorld.TheStructureWorld.thePlayer.posX;
			}
			else if(this.position.z < TheStructureWorld.TheStructureWorld.thePlayer.posZ - 25F || this.position.z > TheStructureWorld.TheStructureWorld.thePlayer.posZ + 25F)  
			{
				this.locationToGo[1] = (float) TheStructureWorld.TheStructureWorld.thePlayer.posZ;
			}
			else if(this.random.nextInt(250) == 0)
		    {
				this.locationToGo = new float[]{this.getPosition().x + this.random.nextInt(10) - this.random.nextInt(10), this.getPosition().z + this.random.nextInt(10) - this.random.nextInt(10)};
			}
	 	}
	
		
	 //Render Model
	 @Override
	 public boolean renderModel(NormalMappingShader shader)
	 {
		EntityPlayer player = TheStructureWorld.TheStructureWorld.thePlayer;
		shader.loadTransformationMatrix(TheStructureWorld.TheStructureWorld.entityRenderer.camera.createTransformationMatrix(new Vector3f(this.getPosition().x,this.getPosition().y - this.reflecY,this.getPosition().z),this.getRotX(),this.getRotY() + 90F, this.getRotZ(), this.getScale()));
		if(this.position.z > player.posZ - (3F) && this.position.z < player.posZ + (3F) && 
		   this.position.y > player.posY - (5F) && this.position.y < player.posY + (5F) && 
		   this.position.x > player.posX - (3F) && this.position.x < player.posX + (3F))
	 	{
			GL13.glActiveTexture(GL13.GL_TEXTURE13);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.model.textureIDModel512x); 
			GL13.glActiveTexture(GL13.GL_TEXTURE12);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.model.textureNormalMapping512x); 
			GL11.glCallList(model.glListID);
			this.textureCoords = new float[]{1,3,0,0};
	 	}
	 	else
	 	{
			GL13.glActiveTexture(GL13.GL_TEXTURE13);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.LOD_Texture); 
	 		GL11.glCallList(this.LOD_Model);
	 		this.textureCoords = new float[]{1,1,0,0};
	 	}
		return true;
	 }
	
}