package nl.thestructureworld.world.gen;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.lwjgl.util.vector.Vector4f;

import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.EntityPlantRender;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.terrain.TerrainRenderer;
import nl.thestructureworld.entity.EnumCreatureType;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.util.IProgressUpdate;
import nl.thestructureworld.world.BiomeBase;
import nl.thestructureworld.world.World;
import nl.thestructureworld.world.area.Area;
import nl.thestructureworld.world.area.ExtendedTerrainObjectStorage;
import nl.thestructureworld.world.area.IAreaProvider;

public class AreaGenerator implements IAreaProvider
{
    private World worldObj;
    private Random random;
    private final TerrainObject[] cachedTerrainObjectIDs = new TerrainObject[256];
    private final byte[] cachedTerrainObjectMetadata = new byte[256];
    private final GeneratorInfo WorldGenInfo;
    private final List structureGenerators = new ArrayList();
    private final boolean hasDecoration;
    private final boolean hasDungeons;

    public AreaGenerator(World world, long r, String string2)
    {
        this.worldObj = world;
        this.random = new Random(r);
        this.WorldGenInfo = GeneratorInfo.getDefaultFlatGenerator();
        this.hasDecoration = this.WorldGenInfo.getWorldFeatures().containsKey("decoration");
        this.hasDungeons = this.WorldGenInfo.getWorldFeatures().containsKey("dungeon");
        Iterator var9 = this.WorldGenInfo.getLayers().iterator();
        while (var9.hasNext())
        {
        	LayerInfo var10 = (LayerInfo)var9.next();
            for (int var8 = var10.getMinY(); var8 < var10.getMinY() + var10.getLayerCount(); ++var8)
            {
                this.cachedTerrainObjectIDs[var8] = var10.setTerrain();
                this.cachedTerrainObjectMetadata[var8] = (byte)var10.getFillTerrainObjectMeta();
            }
        }
    }
    
    
    /**
     * Will return back a Area, if it doesn't exist and its not a MP client it will generates all the BasicEntityRender for the
     * specified Area from the map seed and Area seed
     */
    public Area provideArea(int xx, int zz)
    {
    	Area area = new Area(this.worldObj, xx, zz);
        int yy;
        for (int Y = 0; Y < this.cachedTerrainObjectIDs.length; ++Y)
        {
            TerrainObject terrainObject = this.cachedTerrainObjectIDs[Y];
            if (terrainObject != null)
            {
                yy = Y >> 4;
                ExtendedTerrainObjectStorage ExtendedTerrainObjectStorage = area.getBasicEntityRendertorageArray()[yy];

                if (ExtendedTerrainObjectStorage == null)
                {
                	ExtendedTerrainObjectStorage = new ExtendedTerrainObjectStorage(Y, !this.worldObj.provider.hasNoSky);
                	area.getBasicEntityRendertorageArray()[yy] = ExtendedTerrainObjectStorage;
                }
                for (int X = 0; X < 16D; X+=1)
                {
                for (int Z = 0; Z < 16D; Z+=1)
                {
                    ExtendedTerrainObjectStorage.setTerrain(X, Y & 15, Z, terrainObject);
                    terrainObject.onTerrainorObjectAddedWhenWorldGenerated(ExtendedTerrainObjectStorage, X, Y & 15, (int)Z);
                }
                }
                if(Y == this.cachedTerrainObjectIDs.length)
                {
                TerrainRenderer.createFlora(ExtendedTerrainObjectStorage,8, Y, 8);  
                }
            }
        }
        return area;
    }

    /**
     * Checks to see if a Area exists at x, y
     */
    public boolean AreaExists(int x, int z)
    {
        return true;
    }
    
   

    /**
     * Populates Area with ores,plants,trees,hills etc etc
     */
    public void populate(IAreaProvider IAreaProvider, int X, int Z)
    {
        int xx = X * 16;
        int zz = Z * 16;
        boolean var7 = false;
        this.random.setSeed(this.worldObj.rand.nextLong());
        long var8 = this.random.nextLong() / 2L * 2L + 1L;
        long var10 = this.random.nextLong() / 2L * 2L + 1L;
        this.random.setSeed((long)X * var8 + (long)Z * var10 ^ this.worldObj.rand.nextLong());
    }

    //EntityRenderer.nmr.addEntity(new EntityPlantRender(new ModelBasic(true,0,EntityRenderer.fern,9,0F,0, "objectsandterrain/plant/512x/palm_leaf",new Vector4f(0.5F,1.5F,0F,0F),105,false,false), new float[]{X,Z},0,0,0,0,0.2F));
    
    /**
     * Two modes of operation: if passed true, save all Areas in one go.  If passed false, save up to two Areas.
     * Return true if all Areas have been saved.
     */
    public boolean saveAreas(boolean p_73151_1_, IProgressUpdate p_73151_2_)
    {
        return true;
    }

    /**
     * Save extra data not associated with any Area.  Not saved during autosave, only during world unload.  Currently
     * unimplemented.
     */
    public void saveExtraData() {}

    /**
     * Unloads Areas that are marked to be unloaded. This is not guaranteed to unload every such Area.
     */
    public boolean unloadQueuedAreas()
    {
        return false;
    }

    /**
     * Returns if the IAreaProvider supports saving.
     */
    public boolean canSave()
    {
        return true;
    }

    /**
     * Converts the instance data to a readable string.
     */
    public String makeString()
    {
        return "FlatLevelSource";
    }

  
    public int getLoadedAreaCount()
    {
        return 0;
    }

    
}
