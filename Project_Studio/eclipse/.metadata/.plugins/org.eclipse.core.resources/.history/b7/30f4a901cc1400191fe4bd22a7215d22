package nl.thestructureworld.client.shaders;
 
import java.util.ArrayList;
import java.util.List;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.IngameGui;
import nl.thestructureworld.client.gui.ScaledResolution;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.FNFKeybinds;
import nl.thestructureworld.client.renderer.entity.BasicEntityRender;
import nl.thestructureworld.client.renderer.entity.EntityPlantRenderer;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.entity.NormalMappingRenderer;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListEntity;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.EntityPlayerSP;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.glu.Project;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import nl.thestructureworld.entity.EntityPlayer;
import nl.thestructureworld.util.MathHelper;

public class CameraAndPlayerAnimations 
{
	public TheStructureWorld ttw = TheStructureWorld.TheStructureWorld;
	public boolean moveHeadBack = false;
	public float walkingAnimation = -1F;
	
	public boolean switchPitch = false;
	public float breathMotionAdded = 0F;
	public boolean pauseBreath = false;
	public int pauseBreathTimer = 0;
	public int holdingBreath = 0;
	public float bodyPos = 1.8F;
	public float breathAnimation;
	
	public boolean switchArmUp = false;
	public float ArmUpMotionAdded = 0F;
	public float ArmUpAnimation;
	
	public void breathAnimation(EntityLivingBase base)
	{
		if(TheStructureWorld.TheStructureWorld.currentScreen==null)
		{
			/////////////////////////
			if(ArmUpMotionAdded > 0.3F)
			{
				switchArmUp = false;
			}
			else if(ArmUpMotionAdded < -0.3F)
			{
				switchArmUp = true;
			}
			if(switchArmUp)
			{
				ArmUpAnimation += (0.001F - (ArmUpMotionAdded/100));
				ArmUpMotionAdded += 0.001F;
			}
			else if(!switchArmUp)
			{
				ArmUpAnimation -= (0.001F + (ArmUpMotionAdded/100));	
				ArmUpMotionAdded -= 0.001F;
			}
			///////////////////////
			float breath;
			if(base instanceof EntityPlayerSP)
			{
				EntityPlayerSP sp = (EntityPlayerSP) base;
				if(sp.RunningTicksLeft > 0)
		        {
					breath = 0.01F;
		        }
				else
				{
					breath = 0.001F;
				}
			}
			else
			{
				breath = 0.001F;
			}
			
			if(bodyPos < base.bodyPosition && !base.Crouching && !base.layingDown)
			{
				for(int i = 0;i<100;++i)
				{
					if(bodyPos < base.bodyPosition){bodyPos += 0.001F;}
				}
			}
			else if(bodyPos > base.bodyPosition && base.Crouching || base.layingDown)
			{
				for(int i = 0;i<100;++i)
				{
					if(bodyPos > base.bodyPosition){bodyPos -= 0.001F;}
				}
			}
			
			if(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT))
			{
				pauseBreath = true;
				++holdingBreath;
			}
			else if(holdingBreath > 0)
			{
				holdingBreath = 0;
				pauseBreath = false;
			}
			
			if(breathMotionAdded > 0.6F)
			{
				switchPitch = false;pauseBreath = true;
			}
			else if(breathMotionAdded < -0.6F)
			{
				switchPitch = true;pauseBreath = true;
			}
			if(pauseBreath)
			{
				++pauseBreathTimer;
			}
			if(pauseBreathTimer>15)
			{
				pauseBreathTimer = 0;
				pauseBreath = false;
			}
			if(!pauseBreath){
			if(switchPitch)
			{
			breathAnimation += (0.005F - (breathMotionAdded/100));
			breathMotionAdded += 0.005F;
			}
			else if(!switchPitch)
			{
			breathAnimation -= (0.005F + (breathMotionAdded/100));	
			breathMotionAdded -= 0.005F;
			}}
		}
	}
	
    public float camX,camY,camZ,pitch,oldPitch,zPitch;
  	public float walkAnimation = 0F;	
  	public boolean incdecWalkAnimation = false;
  	public float drunkWalk = 0;
    public float walkCrouchOrLayingDown = 1F;
    public float FOV;
    public float Aspect;
    public float zNear;
    public float zFar;
    public float yawn = 0;
    
    /**
    * The Walk animation of the player.
  	* @param base
  	*/
  	public void walkAnimation(EntityLivingBase base)
  	{
  		if(base.fallTimer == 0 && base.jumpTimer == 0)
  		{
  		if(TheStructureWorld.TheStructureWorld.currentScreen == null)
  		{
  		if(((EntityPlayer)base).isCrouching()){walkCrouchOrLayingDown=0.2F;}
  		else if(((EntityPlayer)base).isLayingdown()){walkCrouchOrLayingDown=0.01F;}
  		else if(walkCrouchOrLayingDown != 1&&!((EntityPlayer)base).isCrouching()&&!((EntityPlayer)base).isLayingdown()){walkCrouchOrLayingDown=1F;}
  		if(((EntityPlayer)base).walkType == 1){drunkWalk = 10;}
  		else if(((EntityPlayer)base).walkType == 2&&walkAnimation>0.01F){drunkWalk=10;}
  		else if(((EntityPlayer)base).walkType == 3&&walkAnimation<-0.01F){drunkWalk=10;}else{drunkWalk=0;}
  		if(!incdecWalkAnimation){walkAnimation-= 0.01F;}
  		if( incdecWalkAnimation){walkAnimation+= 0.01F;}
  		if(!((EntityPlayer)base).isRunning()&&walkAnimation>0.08F+(drunkWalk/100)){incdecWalkAnimation=false;}
  		if(!((EntityPlayer)base).isRunning()&&walkAnimation<-(0.08F+(drunkWalk/100))){incdecWalkAnimation=true;}
  		if(((EntityPlayer)base).isRunning()&&walkAnimation>0.1F+(drunkWalk/100)){incdecWalkAnimation=false;}
  		if(((EntityPlayer)base).isRunning()&&walkAnimation<-(0.1F+(drunkWalk/100))){incdecWalkAnimation=true;}
  		}
  		this.walkingAnimation = (float) ((this.standUpAnimation+(this.walkAnimation*this.walkCrouchOrLayingDown))*((base.movespeedX+base.movespeedZ)*4));
  		}
  	}
      
      /**
       * Animation for falling and then getting up.
       */
      public float standUpAnimation = 0;
      public int fallAnimationTimer = 0;  
      
      public void getUpAnimation(EntityLivingBase base)
      {
      	if(base.standUpAnimation)
  		{
      		++fallAnimationTimer;
      		if(fallAnimationTimer<800)
      		{
      			for(int i=0;i<30;++i)
      			{
      				standUpAnimation -= 0.0001F;
      			}
      		}
      		else if(fallAnimationTimer>5000)
      		{
      			for(int i=0;i<55;++i)
      			{
      				if(standUpAnimation <0F)
      				{
      					standUpAnimation += 0.000001F*i;
      				}
      				else
      				{	
      					base.standUpAnimation=false;
      					fallAnimationTimer=0;
      					continue;
      				}
      			}
      		}
  		}	
      }
      
      public float getBreathAnimation()
      {
    	  return this.breathAnimation;
      }
      
      /**
       * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
       */
      public void updateCameraAndRender(float ticker)
      {  
          TheStructureWorld.TheStructureWorld.framebuffer.bindFramebuffer(true);
          GL11.glEnable(GL11.GL_TEXTURE_2D);
          boolean isDisplayActive = Display.isActive();
          if (!isDisplayActive && this.ttw.gameSettings.pauseOnLostFocus && (!Mouse.isButtonDown(1)))
          {
              if (TheStructureWorld.getSystemTime() - ttw.entityRenderer.prevFrameTime > 500L)
              {
                  this.ttw.displayInGameMenu();
              }
          }
          else
          {
        	  ttw.entityRenderer.prevFrameTime = TheStructureWorld.getSystemTime();
          }
          if (this.ttw.inGameHasFocus && isDisplayActive)
          {
              this.ttw.mouseHelper.mouseXYChange();
              float var3 = this.ttw.gameSettings.mouseSensitivity * 0.6F + 0.2F;
              float var4 = var3 * var3 * var3 * 8.0F;
              float renderWorld = (float)this.ttw.mouseHelper.deltaX * var4;
              float var6 = (float)this.ttw.mouseHelper.deltaY * var4;

              this.ttw.thePlayer.setAngles(renderWorld, var6 * FNFKeybinds.reverseMouse);
          }
          if (!this.ttw.skipRenderWorld)
          {
              ScaledResolution sr = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
              int X = Mouse.getX() * sr.getScaledWidth() / this.ttw.displayWidth;
              int Z = sr.getScaledHeight() - Mouse.getY() * sr.getScaledHeight() / this.ttw.displayHeight - 1;
              if (this.ttw.theWorld != null)
              {
            	ttw.entityRenderer.renderWorld(ticker);
              	if (!this.ttw.gameSettings.hideGUI || this.ttw.currentScreen != null)
                {
                    GL11.glAlphaFunc(GL11.GL_GREATER, 0.5F);
                    this.ttw.ingameGUI.renderGameOverlay(ticker, this.ttw.currentScreen != null, X, Z);
                }	
                if(ttw.entityRenderer.passingTime.secondspassed)
                {
                	ttw.entityRenderer.passingTime.secondspassed = false;
                }
              }
              else
              {
              	 GL11.glViewport(0, 0, this.ttw.displayWidth, this.ttw.displayHeight);
                 GL11.glMatrixMode(GL11.GL_PROJECTION);
                 GL11.glLoadIdentity();
                 GL11.glMatrixMode(GL11.GL_MODELVIEW);
                 GL11.glLoadIdentity();
                 this.setupOverlayRendering();
              }

              if (this.ttw.currentScreen != null)
              {
                  GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
                  this.ttw.currentScreen.drawScreen(X, Z);
              }
          }
          GL11.glPushMatrix(); 
          GL11.glEnable(GL30.GL_CLIP_DISTANCE1);  
          //this.reflection();
          //this.refraction();
          GL11.glDisable(GL30.GL_CLIP_DISTANCE1);
          GL11.glPopMatrix();

        
       }
      

      /**
       * Setup orthogonal projection for rendering GUI screen overlays
       */
      public void setupOverlayRendering()
      {
      	 ScaledResolution scale = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
         GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
         GL11.glMatrixMode(GL11.GL_PROJECTION);
         GL11.glLoadIdentity();
         GL11.glOrtho(0.0D, scale.getScaledWidth_double(), scale.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
         GL11.glMatrixMode(GL11.GL_MODELVIEW);
         GL11.glLoadIdentity();
         GL11.glTranslatef(0F, 0F, -2000F);
      }
      
      public static int armLeftID = -1;
      public static int armRightID = -1;
      
      public void setCamposAndPitch(float ticker, EntityLivingBase base, float X,float Y,float Z,float Pitch,float ZPitch)
      {

    	  if(armLeftID > -1)
    	  {
    		  NormalMappingRenderer.BodyParts.get(armLeftID).entity.position.x = X;
    		  NormalMappingRenderer.BodyParts.get(armLeftID).entity.position.y = Y - 0.5F;
    		  NormalMappingRenderer.BodyParts.get(armLeftID).entity.position.z = Z;
    	  
    		  NormalMappingRenderer.BodyParts.get(armRightID).entity.position.x = X;
    		  NormalMappingRenderer.BodyParts.get(armRightID).entity.position.y = Y - 0.5F;
    		  NormalMappingRenderer.BodyParts.get(armRightID).entity.position.z = Z;
    		  
    	  }
    	  //this.position.y = this.height + (float)(nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraY - (TheStructureWorld.TheStructureWorld.entityRenderer.camera.ArmUpAnimation * 0.08F) + TheStructureWorld.TheStructureWorld.entityRenderer.camera.walkingAnimation + TheStructureWorld.TheStructureWorld.entityRenderer.camera.bodyPos) - 0.5F;
		//this.position.y = this.height + (float)(nl.thestructureworld.client.renderer.EntityRenderer.allRenderLists.cameraY - (TheStructureWorld.TheStructureWorld.entityRenderer.camera.ArmUpAnimation * 0.08F) + TheStructureWorld.TheStructureWorld.entityRenderer.camera.walkingAnimation + TheStructureWorld.TheStructureWorld.entityRenderer.camera.bodyPos) - 0.5F;
			
			
    	  camX = X;
    	  camY = Y;
    	  camZ = Z;
    	  pitch = Pitch;
    	  zPitch = ZPitch;
    	  this.yawn = base.prevRotationYaw + (base.rotationYaw - base.prevRotationYaw) * ticker + 180F;
    	  float p = base.prevRotationPitch + (base.rotationPitch - base.prevRotationPitch) * ticker;
    	  
    	  if(base.layingDown && p > 15)
    	  {
    		  if(p > 20 && this.pitch < 25 && this.pitch > 13)
        	  {
    			  --this.pitch;
        	  }
    		  else
    		  {
    			  this.pitch = 15;
    		  }
    	  }
    	  else if(p > 70)
    	  {
    		  this.pitch = 70;  
    	  }
    	  else
    	  {
    		  this.pitch = p;
    	  }
      }
      
      public void walkAnimationWhenMoved(EntityLivingBase base)
      {
    	  if(((EntityPlayer)base).hasMoved)
			{
				if(((EntityPlayer)base).hasMoved)
				{
					this.walkAnimation((EntityPlayer)base);
				}
				else if(this.walkAnimation>0.01F)
				{
					this.walkAnimation-= 0.01F;
				}
				else if(this.walkAnimation<-0.01F)
				{
					this.walkAnimation+= 0.01F;
				}
			}
      }
      
      public void setCamY(float Y)
      {
    	   camY = Y;
      }
    
      public void pitch(boolean set)
      {
    	  if(set && pitch != oldPitch)
    	  {
    		  oldPitch = pitch;
    	  }
    	  pitch = -pitch;  
      }

      
      public Matrix4f createTransformationMatrixAnimated(float animatedX,float animatedY,float animatedZ,Vector3f translation,float y, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = TheStructureWorld.TheStructureWorld.renderViewEntity;
	        Vector3f translations = new Vector3f(translation.x,translation.y+y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.translate(new Vector3f(animatedX,animatedY,animatedZ), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
      
      public Matrix4f createTransformationMatrixXYZ(Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
      
      public Matrix4f createTransformationMatrixMotionZ(float rotation, Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rotation), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
      
      public Matrix4f createTransformationMatrixMotionX(float rotation, Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rotation), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
     
      public Matrix4f createTransformationMatrixMotionY(float rotation, Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rotation), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
    
      public Matrix4f createTransformationMatrix(Vector3f translation,float y, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = TheStructureWorld.TheStructureWorld.renderViewEntity;
	        Vector3f translations = new Vector3f(translation.x,translation.y+y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
	
	  public Matrix4f createTransformationMatrix(Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = TheStructureWorld.TheStructureWorld.renderViewEntity;
	        Matrix4f.translate(translation, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	   }
		
	  public Matrix4f createViewMatrix() 
	  {
	       Matrix4f matrix = new Matrix4f();
	       EntityLivingBase var2 = TheStructureWorld.TheStructureWorld.renderViewEntity;
	       matrix.setIdentity();
	       Matrix4f.rotate((float)Math.toRadians(zPitch), new Vector3f(0, 0, 1), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(pitch - this.getBreathAnimation()), new Vector3f(1, 0, 0), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(yawn), new Vector3f(0, 1, 0), matrix, matrix);
	       Matrix4f.translate(new Vector3f(-camX,-camY,-camZ), matrix, matrix);
	       return matrix;
	  }
	    
		public Matrix4f projectionMatrix()
		{
			EntityRenderer.projectionMatrix = new Matrix4f();
			float aspectRatio = Aspect;
	        float y_scale = (float) ((1f / Math.tan(Math.toRadians(FOV / 2f))) * aspectRatio);
	        float x_scale = y_scale / aspectRatio;
	        float frustum_length = zFar - zNear;
	        EntityRenderer.projectionMatrix.m00 = x_scale;
	        EntityRenderer.projectionMatrix.m11 = y_scale;
	        EntityRenderer.projectionMatrix.m22 = -((zFar + zNear) / frustum_length);
	        EntityRenderer.projectionMatrix.m23 = -1;
	        EntityRenderer.projectionMatrix.m32 = -((2 * zNear * zFar) / frustum_length);
	        EntityRenderer.projectionMatrix.m33 = 0;
	        return EntityRenderer.projectionMatrix;
		}

}