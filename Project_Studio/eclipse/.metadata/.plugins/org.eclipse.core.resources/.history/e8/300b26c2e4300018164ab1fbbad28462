package nl.thestructureworld.terrainandobjects;

import java.util.Iterator;
import java.util.List;
import java.util.Random;

import nl.thestructureworld.client.renderer.ArrayListTerrain;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.WorldRenderer;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityItem;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.player.EntityPlayer;
import nl.thestructureworld.entity.player.EntityPlayerMP;
import nl.thestructureworld.item.Item;
import nl.thestructureworld.item.ItemData;
import nl.thestructureworld.tileentity.TileEntity;
import nl.thestructureworld.util.AxisAlignedBB;
import nl.thestructureworld.util.MovingObjectPosition;
import nl.thestructureworld.util.RegistryObjectName;
import nl.thestructureworld.util.StatCollector;
import nl.thestructureworld.util.Vec3;
import nl.thestructureworld.world.Explosion;
import nl.thestructureworld.world.ITerrainObjectAccess;
import nl.thestructureworld.world.World;
import nl.thestructureworld.world.area.ExtendedTerrainObjectStorage;

public class TerrainObject
{
    public static final RegistryObjectName TerrainObjectRegistry = new RegistryObjectName("air");
    public String Name;
    public String texture = "";

    public Random random = new Random();
    
    /** 
    * The WorldRenderer or "Area Renderer" goes trough an given "area" and search for the Y the 
    * Player is standing on.
    * Than to prevent any unnecessary searching for Objects at given Pos X,Y,Z, 
    * it will use the number of this int to determine if it should skip all renders for this TerrainObject, 
    * render this TerrainObject but also below, render this TerrainObject and above, skip this TerrainObject and render below, 
    * skip this TerrainObject and render above, skip and look above or skip and look below. 
    * 0 = skip all;
    * 1 = this and below;
    * 2 = this and above;
    * 3 = skip but render below;
    * 4 = skip but render above;
    * 5 = skip and look above;
    * 6 = skip and look below;
    */
    public int skipDrawing = -1;

   

    /** How much light is subtracted for going through this object.
     * Used in objects like glass, crystal etc.
     */
    protected int lightOpacity;
    protected int lightValue;
    protected boolean light;

    /** Indicates how many hits it takes to break a TerrainObject. */
    protected float TerrainObjectHardness;
    protected float TerrainObjectResistance;

    /**
     * Flags whether or not this TerrainObject is of a type that needs random ticking. Ref-counted by ExtendedTerrainObjectStorage in
     * order to broadly cull a Area from the random Area update list for efficiency's sake.
     */
    protected boolean needsRandomTick;

    /** true if the TerrainObject contains a Tile Entity */
    protected boolean isTerrainObjectContainer;
    public double XMin;
    public double XMax;
    public double YMin;
    public double YMax;
    public double ZMin;
    public double ZMax;

    
     protected final Material TerrainObjectMaterial;

    /**
     * Determines how much velocity is maintained while moving on top of this TerrainObject
     */
    public float slipperiness;
    public String unlocalizedNameTerrainObject;
    
    public static int getIdFromTerrainObject(TerrainObject p_149682_0_)
    {
        return TerrainObjectRegistry.getIDForObject(p_149682_0_);
    }

    public static TerrainObject getTerrainObjectById(int p_149729_0_)
    {
        return (TerrainObject)TerrainObjectRegistry.getObjectForID(p_149729_0_);
    }

    public static TerrainObject getTerrainObjectFromItem(Item p_149634_0_)
    {
        return getTerrainObjectById(Item.getIdFromItem(p_149634_0_));
    }

    public int getLightOpacity()
    {
        return this.lightOpacity;
    }

    public int getLightValue()
    {
        return this.lightValue;
    }

    public boolean func_149710_n()
    {
        return this.light;
    }

    public Material getMaterial()
    {
        return this.TerrainObjectMaterial;
    }

    public MapColor getMapColor(int p_149728_1_)
    {
        return this.getMaterial().getMaterialMapColor();
    }
    
    public static int usedIDsTerrainObject = 0;
    public static  TerrainObject air;
    public static  TerrainObject stone;
    public static  TerrainObject cobblestone;
    public static  TerrainObject DirtTerrain;
    public static  TerrainObject Reeds;
    public static  TerrainObject jungleGrass;
    public static  TerrainObject Tree;
    public static  TerrainObject TreeTrunkNoBark;
    public static  TerrainObject GreenPipe;
    public static  TerrainObject Diamond_Plate;
    public static  TerrainObject SpikePlant;
    public static  TerrainObject DecorativeCreeperBush;
    public static  TerrainObject SmallFern;
    public static  TerrainObject SmallCrop;
    public static  TerrainObject TreeLeaf;
    public static  TerrainObject SmallLeaf;
    public static  TerrainObject Fern;
    public static  TerrainObject SpikeFern;
    public static  TerrainObject ThickLeave;
    public static  TerrainObject HighBush;
    public static  TerrainObject Bush;
    public static  TerrainObject TreeBush;
    public static  TerrainObject jungleGrassSmall;
    public static  TerrainObject jungleGrassNormal;
    //
    public static  TerrainObject unnamedObject;
    //
    public static  TerrainObject Butterfly;
    
    public static void registerTerrainObjects()
    {
        TerrainObjectRegistry.addObjectorTerrain(0, "air", (new TerrainAir()));
        TerrainObjectRegistry.addObjectorTerrain(1, "stone", (new TerrainObjectStone()).setHardness(1.5F).setResistance(10.0F).setName("Stone"));
        TerrainObjectRegistry.addObjectorTerrain(2, "cobblestone", new TerrainObjectStone().setHardness(2.0F).setResistance(10.0F).setName("Cobblestone"));
        TerrainObjectRegistry.addObjectorTerrain(3, "dirt", (new TerrainDirt(Material.sand)).setHardness(0.5F).setName("Dirt"));
        TerrainObjectRegistry.addObjectorTerrain(4, "CornReed", (new ObjectGrass(Material.grass)).setHardness(0.5F).setName("Corn Reed"));
        TerrainObjectRegistry.addObjectorTerrain(5, "jungleGrassHigh", (new ObjectGrass(Material.grass)).setHardness(0.5F).setName("Jungle Grass High"));
        TerrainObjectRegistry.addObjectorTerrain(6, "Spiker", (new ObjectPlants(Material.grass)).setHardness(0.5F).setName("Spiker"));
        TerrainObjectRegistry.addObjectorTerrain(7, "DCreeperBush", (new ObjectGrowablePlant(Material.grass)).setHardness(0.5F).setName("Decorative Bush"));
        
        TerrainObjectRegistry.addObjectorTerrain(10, "Tree", (new ObjectTree()).setHardness(0.5F).setName("Tree Trunk"));
        TerrainObjectRegistry.addObjectorTerrain(11, "TreeTrunkNoBark", (new ObjectTree()).setHardness(0.5F).setName("Tree Trunk"));
        TerrainObjectRegistry.addObjectorTerrain(12, "GreenPipe", (new ObjectTree()).setHardness(0.5F).setName("Green Metal"));
        TerrainObjectRegistry.addObjectorTerrain(13, "Diamond_Plate", (new TerrainObjectStone()).setHardness(0.5F).setName("Diamond Plate"));
        TerrainObjectRegistry.addObjectorTerrain(14, "TestObject", (new TestObject()).setName("TestObject"));
        TerrainObjectRegistry.addObjectorTerrain(15, "Butterfly", (new LivingObjectButterfly(Material.grass)).setName("TestObject"));
        TerrainObjectRegistry.addObjectorTerrain(16, "SmallFern", (new ObjectPlants(Material.grass)).setName("Small Fern"));
        TerrainObjectRegistry.addObjectorTerrain(17, "SmallCrop", (new ObjectPlants(Material.grass)).setName("Small Crop"));
        TerrainObjectRegistry.addObjectorTerrain(18, "TreeLeaf", (new ObjectPlants(Material.grass)).setName("Tree Leaf"));
        TerrainObjectRegistry.addObjectorTerrain(19, "SmallLeaf", (new ObjectPlants(Material.grass)).setName("Small Leaf"));
        TerrainObjectRegistry.addObjectorTerrain(20, "Fern", (new ObjectPlants(Material.grass)).setName("Fern"));
        TerrainObjectRegistry.addObjectorTerrain(21, "SpikeFern", (new ObjectPlants(Material.grass)).setName("Spike Fern"));
        TerrainObjectRegistry.addObjectorTerrain(22, "ThickLeave", (new ObjectPlants(Material.grass)).setName("Thick Leave"));
        TerrainObjectRegistry.addObjectorTerrain(23, "HighBush", (new ObjectPlants(Material.grass)).setName("High Bush"));
        TerrainObjectRegistry.addObjectorTerrain(24, "Bush", (new ObjectPlants(Material.grass)).setName("Bush"));
        TerrainObjectRegistry.addObjectorTerrain(25, "TreeBush", (new ObjectPlants(Material.grass)).setName("Tree Bush"));
        TerrainObjectRegistry.addObjectorTerrain(26, "jungleGrassSmall", (new ObjectGrass(Material.grass)).setName("Jungle Grass Small"));
        TerrainObjectRegistry.addObjectorTerrain(27, "jungleGrassNormal", (new ObjectGrass(Material.grass)).setName("Jungle Grass Normal"));
        
       
        air = (TerrainObject)TerrainObjectRegistry.getObject("air");
        stone = (TerrainObject)TerrainObjectRegistry.getObject("stone");
        cobblestone = (TerrainObject)TerrainObjectRegistry.getObject("cobblestone");
        DirtTerrain = (TerrainObject)TerrainObjectRegistry.getObject("dirt");
        Reeds = (TerrainObject)TerrainObjectRegistry.getObject("CornReed");
        jungleGrass = (TerrainObject)TerrainObjectRegistry.getObject("jungleGrassHigh");
        SpikePlant = (TerrainObject)TerrainObjectRegistry.getObject("Spiker");
        DecorativeCreeperBush = (TerrainObject)TerrainObjectRegistry.getObject("DCreeperBush");
        Tree = (TerrainObject)TerrainObjectRegistry.getObject("TreeTrunk");
        TreeTrunkNoBark = (TerrainObject)TerrainObjectRegistry.getObject("TreeTrunkNoBark");
        GreenPipe = (TerrainObject)TerrainObjectRegistry.getObject("GreenPipe"); 
        Diamond_Plate = (TerrainObject)TerrainObjectRegistry.getObject("Diamond_Plate"); 
        SmallFern = (TerrainObject)TerrainObjectRegistry.getObject("SmallFern"); 
        SmallCrop = (TerrainObject)TerrainObjectRegistry.getObject("SmallCrop"); 
        TreeLeaf = (TerrainObject)TerrainObjectRegistry.getObject("TreeLeaf"); 
        SmallLeaf = (TerrainObject)TerrainObjectRegistry.getObject("SmallLeaf");
        Fern = (TerrainObject)TerrainObjectRegistry.getObject("Fern");
        SpikeFern = (TerrainObject)TerrainObjectRegistry.getObject("SpikeFern");
        ThickLeave = (TerrainObject)TerrainObjectRegistry.getObject("ThickLeave");
        HighBush = (TerrainObject)TerrainObjectRegistry.getObject("HighBush");
        Bush = (TerrainObject)TerrainObjectRegistry.getObject("Bush");
        TreeBush = (TerrainObject)TerrainObjectRegistry.getObject("TreeBush");
        jungleGrassSmall = (TerrainObject)TerrainObjectRegistry.getObject("jungleGrassSmall");
        jungleGrassNormal = (TerrainObject)TerrainObjectRegistry.getObject("jungleGrassMiddle");
/////////////////////////////////////////////////////////////////////////////////////
        unnamedObject = (TerrainObject)TerrainObjectRegistry.getObject("TestObject"); 
/////////////////////////////////////////////////////////////////////////////////////
        Butterfly = (LivingObjectButterfly)TerrainObjectRegistry.getObject("Butterfly"); 
/////////////////////////////////////////////////////////////////////////////////////    
        
        Iterator var10 = TerrainObjectRegistry.iterator();
        while (var10.hasNext())
        {
            TerrainObject objectandTerrainObject = (TerrainObject)var10.next();
            if (objectandTerrainObject.TerrainObjectMaterial == Material.air)
            {
            	objectandTerrainObject.light = false;
            }
            else
            {
                if(objectandTerrainObject.lightOpacity == 0)
                {
                	objectandTerrainObject.light = true;
                }
            }
        }
    }

    protected TerrainObject(Material mm)
    {
        this.slipperiness = 0.6F;
        this.TerrainObjectMaterial = mm;
        this.setTerrainObjectBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
        this.lightOpacity = 255;
    }

    
    public boolean isTransparent()
    {
		return false;
    }

    /**
     * When true, it will be added to the Plant Render List and will render after the TerrainObject.
     * The list is used by Creatures that need to find and eat plants so instead of cycling through all Terrain Objects,
     * it will only cycle through a plant List.
     */
    public boolean isPlant()
    {
    	return false;
    }
    
    public boolean isAnimatedPlant()
    {
    	return false;
    }
    
    /**
     * When true, it will be added to the Plant Render List and will render after the TerrainObject.
     * The list is used by Creatures that need to find and eat plants so instead of cycling through all TerrainObject List,
     * It will only cycle through a plant List.
     */
    public boolean isTree()
    {
    	return false;
    }
    
    /**
     * When true, it will be added to the Plant Render List and will render after the TerrainObject.
     * The list is used by Creatures that need to find and eat plants so instead of cycling through all TerrainObject List,
     * It will only cycle through a plant List.
     */
    public boolean isSmallAnimal()
    {
    	return false;
    }
    
    /**
     * When true, this Object will be rendered white with no details.
     * Whn using commands, it can change the look of the object.
     */
    public boolean isTestObject()
    {
    	return false;
    }
    
	/**
     * Sets how much light is TerrainObjected going through this TerrainObject. Returns the object for convenience in constructing.
     */
    protected TerrainObject setLightOpacity(int l)
    {
        this.lightOpacity = l;
        return this;
    }

    /**
     * Sets the light value that the TerrainObject emits. Returns resulting TerrainObject instance for constructing convenience. Args:
     * level
     */
    protected TerrainObject setLightLevel(float p_149715_1_)
    {
        this.lightValue = (int)(15.0F * p_149715_1_);
        return this;
    }

    /**
     * Sets the the TerrainObjects resistance to explosions. Returns the object for convenience in constructing.
     */
    protected TerrainObject setResistance(float p_149752_1_)
    {
        this.TerrainObjectResistance = p_149752_1_ * 3.0F;
        return this;
    }

    /**
     * Indicate if a material is a normal solid opaque cube
     */
    public boolean isTerrainObjectNormalCube()
    {
        return this.TerrainObjectMaterial.TerrainObjectsMovement() && this.renderAsNormalTerrainObject();
    }

    public boolean isNormalCube()
    {
        return this.TerrainObjectMaterial.isOpaque() && this.renderAsNormalTerrainObject();
    }

    public boolean renderAsNormalTerrainObject()
    {
        return true;
    }

    public boolean getTerrainObjectsMovement(ITerrainObjectAccess p_149655_1_, int p_149655_2_, int p_149655_3_, int p_149655_4_)
    {
        return !this.TerrainObjectMaterial.TerrainObjectsMovement();
    }
    
    /**
     * Sets how many hits it takes to break a TerrainObject.
     */
    protected TerrainObject setHardness(float p_149711_1_)
    {
        this.TerrainObjectHardness = p_149711_1_;

        if (this.TerrainObjectResistance < p_149711_1_ * 5.0F)
        {
            this.TerrainObjectResistance = p_149711_1_ * 5.0F;
        }

        return this;
    }

    public float getTerrainObjectHardness(World p_149712_1_, int p_149712_2_, int p_149712_3_, int p_149712_4_)
    {
        return this.TerrainObjectHardness;
    }

    /**
     * Sets whether this TerrainObject type will receive random update ticks
     */
    protected TerrainObject setTickRandomly(boolean ys)
    {
        this.needsRandomTick = ys;
        return this;
    }

    /**
     * Returns whether or not this TerrainObject is of a type that needs random ticking. Called for ref-counting purposes by
     * ExtendedTerrainObjectStorage in order to broadly cull a Area from the random Area update list for efficiency's sake.
     */
    public boolean getTickRandomly()
    {
        return this.needsRandomTick;
    }

    public boolean hasAdvancedTerrain()
    {
        return this.isTerrainObjectContainer;
    }

    protected final void setTerrainObjectBounds(float xmi, float xma, float ymi, float yma, float zmi, float zma)
    {
        this.XMin = (double)xmi;
        this.XMax = (double)xma;
        this.YMin = (double)ymi;
        this.YMax = (double)yma;
        this.ZMin = (double)zmi;
        this.ZMax = (double)zma;
    }

    public int getTerrainObjectBrightness(ITerrainObjectAccess world, int x, int y, int z)
    {
        return world.getLightBrightnessForSkyTerrainObjects(x, y, z, world.getTerrainObject(x, y, z).getLightValue());
    }

    /**
     * Returns the bounding box of the wired rectangular prism to render.
     */
    public AxisAlignedBB getSelectedBoundingBoxFromPool(World p_149633_1_, int p_149633_2_, int p_149633_3_, int p_149633_4_)
    {
        return AxisAlignedBB.getBoundingBox((double)p_149633_2_ + this.XMin, (double)p_149633_3_ + this.XMax, (double)p_149633_4_ + this.YMin, (double)p_149633_2_ + this.YMax, (double)p_149633_3_ + this.ZMin, (double)p_149633_4_ + this.ZMax);
    }

    public void addCollisionBoxesToList(World p_149743_1_, int p_149743_2_, int p_149743_3_, int p_149743_4_, AxisAlignedBB p_149743_5_, List p_149743_6_, Entity p_149743_7_)
    {
        AxisAlignedBB var8 = this.getCollisionBoundingBoxFromPool(p_149743_1_, p_149743_2_, p_149743_3_, p_149743_4_);

        if (var8 != null && p_149743_5_.intersectsWith(var8))
        {
            p_149743_6_.add(var8);
        }
    }

    /**
     * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
     * cleared to be reused)
     */
    public AxisAlignedBB getCollisionBoundingBoxFromPool(World p_149668_1_, int p_149668_2_, int p_149668_3_, int p_149668_4_)
    {
        return AxisAlignedBB.getBoundingBox((double)p_149668_2_ + this.XMin, (double)p_149668_3_ + this.XMax, (double)p_149668_4_ + this.YMin, (double)p_149668_2_ + this.YMax, (double)p_149668_3_ + this.ZMin, (double)p_149668_4_ + this.ZMax);
    }


    public boolean canCollideCheck(int p_149678_1_, boolean p_149678_2_)
    {
        return this.isCollidable();
    }

    public boolean isCollidable()
    {
        return true;
    }
    
    public int TickRandomUpdate = 1;
    public int randomTickCounter()
    {
    	return TickRandomUpdate;
    }
    
  
    /**
     * Ticks the TerrainObject if it's been scheduled
     */
    public void updateTick(World p_149674_1_, int p_149674_2_, int p_149674_3_, int p_149674_4_, Random p_149674_5_) {}
    
    public void onTerrainObjectDestroyedByPlayer(World w, int x, int y, int z, TerrainObject brokenObject) 
    {
    	for(int i = 0; i<EntityRenderer.renderWorld2.ArrayListTerrain.size();++i)
    	{
    		if(EntityRenderer.renderWorld2.ArrayListTerrain.get(i).x == x && EntityRenderer.renderWorld2.ArrayListTerrain.get(i).y == y && EntityRenderer.renderWorld2.ArrayListTerrain.get(i).z == z)
    		{
    		System.out.print("hghgf");
    		}
    	}
    	
    	EntityRenderer.renderWorld2.ArrayListTerrain.remove(new ArrayListTerrain(x,y,z, brokenObject,2222));
    	EntityRenderer.renderWorld2.ArrayListTerrain.remove(new ArrayListTerrain(x,y,z, brokenObject,11));
    }

    /**
     * Called after a TerrainObject is destroyed
     */
    public void breakTerrainObject(World w, int x, int y, int z, TerrainObject o, int p_149749_6_)
    {
        w.removeTileEntity(x, y, z);
    }
    
    /**
     * When this Object or Terrain is placed by a player.
     * Don't use Override because it will break the render
     */
    public void onTerrainorObjectAdded(World w, int x, int y, int z) 
    {
    
    }
    
    /**
     * Called after a TerrainObject is placed
     */
    public void onPostTerrainObjectPlaced(World w, int x, int y, int z, int p_149714_5_) 
    {
    	
    }
    
    /**
     * This method will be used for the Terrain Object(Only active when in Render Distance and it will be activated every tick)
     */
    public void onTerrainorObjectAddedWhenWorldGenerated(ExtendedTerrainObjectStorage ExtendedTerrainObjectStorage,  int x, int y, int z) {}
    
    /**
     * Returns the quantity of items to drop on TerrainObject destruction
     */
    public int quantityDropped(Random p_149745_1_)
    {
        return 1;
    }

    public Item getItemDropped(int p_149650_1_, Random p_149650_2_, int p_149650_3_)
    {
        return Item.getItemFromTerrainObject(this);
    }

    public float getPlayerRelativeTerrainObjectHardness(EntityPlayer p_149737_1_, World p_149737_2_, int p_149737_3_, int p_149737_4_, int p_149737_5_)
    {
        float var6 = this.getTerrainObjectHardness(p_149737_2_, p_149737_3_, p_149737_4_, p_149737_5_);
        return var6 < 0.0F ? 0.0F : (!p_149737_1_.canHarvestTerrainObject(this) ? p_149737_1_.getCurrentPlayerStrVsTerrainObject(this, false) / var6 / 100.0F : p_149737_1_.getCurrentPlayerStrVsTerrainObject(this, true) / var6 / 30.0F);
    }

    /**
     * Drops the specified TerrainObject items
     */
    public final void dropTerrainObjectAsItem(World p_149697_1_, int p_149697_2_, int p_149697_3_, int p_149697_4_, int p_149697_5_, int p_149697_6_)
    {
        this.dropTerrainObjectAsItemWithChance(p_149697_1_, p_149697_2_, p_149697_3_, p_149697_4_, p_149697_5_, 1.0F, p_149697_6_);
    }

    /**
     * Drops the TerrainObject items with a specified chance of dropping the specified items
     */
    public void dropTerrainObjectAsItemWithChance(World p_149690_1_, int p_149690_2_, int p_149690_3_, int p_149690_4_, int p_149690_5_, float p_149690_6_, int p_149690_7_)
    {
        if (!p_149690_1_.isClient)
        {
            int var8 = this.quantityDroppedWithBonus(p_149690_7_, p_149690_1_.rand);

            for (int var9 = 0; var9 < var8; ++var9)
            {
                if (p_149690_1_.rand.nextFloat() <= p_149690_6_)
                {
                    Item var10 = this.getItemDropped(p_149690_5_, p_149690_1_.rand, p_149690_7_);

                    if (var10 != null)
                    {
                        this.dropTerrainObjectAsItem_do(p_149690_1_, p_149690_2_, p_149690_3_, p_149690_4_, new ItemData(var10, 1, this.damageDropped(p_149690_5_)));
                    }
                }
            }
        }
    }

    /**
     * Spawns EntityItem in the world for the given ItemData if the world is not remote.
     */
    protected void dropTerrainObjectAsItem_do(World p_149642_1_, int p_149642_2_, int p_149642_3_, int p_149642_4_, ItemData p_149642_5_)
    {
        if (!p_149642_1_.isClient)
        {
            float var6 = 0.7F;
            double var7 = (double)(p_149642_1_.rand.nextFloat() * var6) + (double)(1.0F - var6) * 0.5D;
            double var9 = (double)(p_149642_1_.rand.nextFloat() * var6) + (double)(1.0F - var6) * 0.5D;
            double var11 = (double)(p_149642_1_.rand.nextFloat() * var6) + (double)(1.0F - var6) * 0.5D;
            EntityItem var13 = new EntityItem(p_149642_1_, (double)p_149642_2_ + var7, (double)p_149642_3_ + var9, (double)p_149642_4_ + var11, p_149642_5_);
            var13.delayBeforeCanPickup = 10;
            p_149642_1_.spawnEntityInWorld(var13);
        }
    }

    /**
     * Determines the damage on the item the TerrainObject drops. Used in cloth and wood.
     */
    public int damageDropped(int p_149692_1_)
    {
        return 0;
    }

    /**
     * Returns how much this TerrainObject can resist explosions from the passed in entity.
     */
    public float getExplosionResistance(Entity p_149638_1_)
    {
        return this.TerrainObjectResistance / 5.0F;
    }

    public MovingObjectPosition collisionRayTrace(World p_149731_1_, int p_149731_2_, int p_149731_3_, int p_149731_4_, Vec3 p_149731_5_, Vec3 p_149731_6_)
    {
        this.setTerrainObjectBoundsBasedOnState(p_149731_1_, p_149731_2_, p_149731_3_, p_149731_4_);
        p_149731_5_ = p_149731_5_.addVector((double)(-p_149731_2_), (double)(-p_149731_3_), (double)(-p_149731_4_));
        p_149731_6_ = p_149731_6_.addVector((double)(-p_149731_2_), (double)(-p_149731_3_), (double)(-p_149731_4_));
        Vec3 var7 = p_149731_5_.getIntermediateWithXValue(p_149731_6_, this.XMin);
        Vec3 var8 = p_149731_5_.getIntermediateWithXValue(p_149731_6_, this.YMax);
        Vec3 var9 = p_149731_5_.getIntermediateWithYValue(p_149731_6_, this.XMax);
        Vec3 var10 = p_149731_5_.getIntermediateWithYValue(p_149731_6_, this.ZMin);
        Vec3 var11 = p_149731_5_.getIntermediateWithZValue(p_149731_6_, this.YMin);
        Vec3 var12 = p_149731_5_.getIntermediateWithZValue(p_149731_6_, this.ZMax);

        if (!this.isVecInsideYZBounds(var7))
        {
            var7 = null;
        }

        if (!this.isVecInsideYZBounds(var8))
        {
            var8 = null;
        }

        if (!this.isVecInsideXZBounds(var9))
        {
            var9 = null;
        }

        if (!this.isVecInsideXZBounds(var10))
        {
            var10 = null;
        }

        if (!this.isVecInsideXYBounds(var11))
        {
            var11 = null;
        }

        if (!this.isVecInsideXYBounds(var12))
        {
            var12 = null;
        }

        Vec3 var13 = null;

        if (var7 != null && (var13 == null || p_149731_5_.squareDistanceTo(var7) < p_149731_5_.squareDistanceTo(var13)))
        {
            var13 = var7;
        }

        if (var8 != null && (var13 == null || p_149731_5_.squareDistanceTo(var8) < p_149731_5_.squareDistanceTo(var13)))
        {
            var13 = var8;
        }

        if (var9 != null && (var13 == null || p_149731_5_.squareDistanceTo(var9) < p_149731_5_.squareDistanceTo(var13)))
        {
            var13 = var9;
        }

        if (var10 != null && (var13 == null || p_149731_5_.squareDistanceTo(var10) < p_149731_5_.squareDistanceTo(var13)))
        {
            var13 = var10;
        }

        if (var11 != null && (var13 == null || p_149731_5_.squareDistanceTo(var11) < p_149731_5_.squareDistanceTo(var13)))
        {
            var13 = var11;
        }

        if (var12 != null && (var13 == null || p_149731_5_.squareDistanceTo(var12) < p_149731_5_.squareDistanceTo(var13)))
        {
            var13 = var12;
        }

        if (var13 == null)
        {
            return null;
        }
        else
        {
            byte var14 = -1;

            if (var13 == var7)
            {
                var14 = 4;
            }

            if (var13 == var8)
            {
                var14 = 5;
            }

            if (var13 == var9)
            {
                var14 = 0;
            }

            if (var13 == var10)
            {
                var14 = 1;
            }

            if (var13 == var11)
            {
                var14 = 2;
            }

            if (var13 == var12)
            {
                var14 = 3;
            }

            return new MovingObjectPosition(p_149731_2_, p_149731_3_, p_149731_4_, var14, var13.addVector((double)p_149731_2_, (double)p_149731_3_, (double)p_149731_4_));
        }
    }

    /**
     * Checks if a vector is within the Y and Z bounds of the TerrainObject.
     */
    private boolean isVecInsideYZBounds(Vec3 p_149654_1_)
    {
        return p_149654_1_ == null ? false : p_149654_1_.yCoord >= this.XMax && p_149654_1_.yCoord <= this.ZMin && p_149654_1_.zCoord >= this.YMin && p_149654_1_.zCoord <= this.ZMax;
    }

    /**
     * Checks if a vector is within the X and Z bounds of the TerrainObject.
     */
    private boolean isVecInsideXZBounds(Vec3 p_149687_1_)
    {
        return p_149687_1_ == null ? false : p_149687_1_.xCoord >= this.XMin && p_149687_1_.xCoord <= this.YMax && p_149687_1_.zCoord >= this.YMin && p_149687_1_.zCoord <= this.ZMax;
    }

    /**
     * Checks if a vector is within the X and Y bounds of the TerrainObject.
     */
    private boolean isVecInsideXYBounds(Vec3 p_149661_1_)
    {
        return p_149661_1_ == null ? false : p_149661_1_.xCoord >= this.XMin && p_149661_1_.xCoord <= this.YMax && p_149661_1_.yCoord >= this.XMax && p_149661_1_.yCoord <= this.ZMin;
    }

    /**
     * Called upon the TerrainObject being destroyed by an explosion
     */
    public void onTerrainObjectDestroyedByExplosion(World p_149723_1_, int p_149723_2_, int p_149723_3_, int p_149723_4_, Explosion p_149723_5_) {}

    public int getTerrainObjectDataInteger(World world, double x, double y, double z)
    {
    	return world.getTerrainObjectDataInteger(x, y, z); 
    }
    
    /**
     * Called when a player right click the TerrainObject. Args: world, x, y, z, player
     */
    public boolean onObjectRightClick(World w, int x, int y, int z, EntityPlayer p, int side, float xSide, float ySide, float zSide)
    {
        return false;
    }
    
    /**
     * Called when a player hits the TerrainObject. Args: world, x, y, z, player
     */
    public void onObjectLeftClick(World w, int x, int y, int z, EntityPlayer p) {}


    public void onEntityWalking(World world, int x, int y, int z, Entity entity) {}

    public int onTerrainObjectPlaced(World world, int x, int y, int z, int m, float f, float g, float h, int j)
    {
        return j;
    }

    public void velocityToAddToEntity(World p_149640_1_, int p_149640_2_, int p_149640_3_, int p_149640_4_, Entity p_149640_5_, Vec3 p_149640_6_) {}

    public void setTerrainObjectBoundsBasedOnState(ITerrainObjectAccess p_149719_1_, int p_149719_2_, int p_149719_3_, int p_149719_4_) {}

    public void onEntityCollidedWithTerrainObject(World p_149670_1_, int p_149670_2_, int p_149670_3_, int p_149670_4_, Entity p_149670_5_) {}

    /**
     * Sets the TerrainObject's bounds for rendering it as an item
     */
    public void setTerrainObjectBoundsForItemRender() {}

    public void harvestTerrainObject(World p_149636_1_, EntityPlayer p_149636_2_, int p_149636_3_, int p_149636_4_, int p_149636_5_, int p_149636_6_)
    {
        if (this.canSilkHarvest())
        {
            ItemData var8 = this.createStackedTerrainObject(p_149636_6_);

            if (var8 != null)
            {
                this.dropTerrainObjectAsItem_do(p_149636_1_, p_149636_3_, p_149636_4_, p_149636_5_, var8);
            }
        }
        else
        {
            int var7 = 2;
            this.dropTerrainObjectAsItem(p_149636_1_, p_149636_3_, p_149636_4_, p_149636_5_, p_149636_6_, var7);
        }
    }

    protected boolean canSilkHarvest()
    {
        return this.renderAsNormalTerrainObject() && !this.isTerrainObjectContainer;
    }

    /**
     * Returns an item stack containing a single instance of the current TerrainObject type. 'i' is the TerrainObject's subtype/damage
     * and is ignored for TerrainObjects which do not support subtypes. TerrainObjects which cannot be harvested should return null.
     */
    protected ItemData createStackedTerrainObject(int p_149644_1_)
    {
        int var2 = 0;
        Item var3 = Item.getItemFromTerrainObject(this);

        if (var3 != null && var3.getHasSubtypes())
        {
            var2 = p_149644_1_;
        }

        return new ItemData(var3, 1, var2);
    }

    /**
     * Returns the usual quantity dropped by the TerrainObject plus a bonus of 1 to 'i' (inclusive).
     */
    public int quantityDroppedWithBonus(int p_149679_1_, Random p_149679_2_)
    {
        return this.quantityDropped(p_149679_2_);
    }

    /**
     * Can this TerrainObject stay at this position.  Similar to canPlaceTerrainObjectAt except gets checked often with plants.
     */
    public boolean canTerrainObjectStay(World p_149718_1_, int p_149718_2_, int p_149718_3_, int p_149718_4_)
    {
        return true;
    }

    /**
     * Called when the TerrainObject is placed in the world.
     */
    public void onTerrainObjectPlacedBy(World p_149689_1_, int p_149689_2_, int p_149689_3_, int p_149689_4_, EntityLivingBase p_149689_5_, ItemData p_149689_6_) {}


    public boolean onTerrainObjectEventReceived(World w, int x, int y, int z, int i, int i2)
    {
    	TileEntity var7 = w.getTileEntity(x, y, z);
        return var7 != null ? var7.receiveClientEvent(i, i2) : false;
    }

    /**
     * Returns the default ambient occlusion value based on TerrainObject opacity
     */
    public float getAmbientOcclusionLightValue()
    {
        return this.isTerrainObjectNormalCube() ? 0.2F : 1.0F;
    }

    /**
     * TerrainObject's chance to react to an entity falling on it.
     */
    public void onFallenUpon(World p_149746_1_, int p_149746_2_, int p_149746_3_, int p_149746_4_, Entity p_149746_5_, float p_149746_6_) {}

    /**
     * Gets an item for the TerrainObject being called on. Args: world, x, y, z
     */
    public Item getItem(World p_149694_1_, int p_149694_2_, int p_149694_3_, int p_149694_4_)
    {
        return Item.getItemFromTerrainObject(this);
    }

    /**
     * Get the TerrainObject's damage value (for use with pick TerrainObject).
     */
    public int getDamageValue(World p_149643_1_, int p_149643_2_, int p_149643_3_, int p_149643_4_)
    {
        return this.damageDropped(0);
    }

    /**
     * Called when the TerrainObject is attempted to be harvested
     */
    public void onTerrainObjectHarvested(World w, int x, int y, int z, EntityPlayer player) {}

    public void onTerrainObjectPreDestroy(World p_149725_1_, int p_149725_2_, int p_149725_3_, int p_149725_4_, int p_149725_5_) {}

    public boolean func_149698_L()
    {
        return true;
    }

    /**
     * Return whether this TerrainObject can drop from an explosion.
     */
    public boolean canDropFromExplosion(Explosion p_149659_1_)
    {
        return true;
    }

    public static boolean isEqualTo(TerrainObject p_149680_0_, TerrainObject p_149680_1_)
    {
        return p_149680_0_ != null && p_149680_1_ != null ? (p_149680_0_ == p_149680_1_ ? true :  p_149680_0_ == p_149680_1_) : false;
    }

    protected TerrainObject setName(String p_149658_1_)
    {
        this.Name = p_149658_1_;
        return this;
    }


    public static class SoundType
    {
        public final String field_150501_a;
        public final float field_150499_b;
        public final float field_150500_c;
    
        public SoundType(String p_i45393_1_, float p_i45393_2_, float p_i45393_3_)
        {
            this.field_150501_a = p_i45393_1_;
            this.field_150499_b = p_i45393_2_;
            this.field_150500_c = p_i45393_3_;
        }

        public float func_150497_c()
        {
            return this.field_150499_b;
        }

        public float func_150494_d()
        {
            return this.field_150500_c;
        }

        public String func_150495_a()
        {
            return "dig." + this.field_150501_a;
        }

        public String func_150498_e()
        {
            return "step." + this.field_150501_a;
        }

        public String func_150496_b()
        {
            return this.func_150495_a();
        }
    }


	public void onTerrainObjectLeftClicked(World w, int x,int y, int z, EntityPlayerMP p) {}

	public void onTerrainObjectRightClicked(World w, int x,int y, int z, EntityPlayer p,int p_73078_7_, float p_73078_8_, float p_73078_9_,float p_73078_10_) {}

	public boolean hasTileEntity() 
	{
		return false;
	}
}
