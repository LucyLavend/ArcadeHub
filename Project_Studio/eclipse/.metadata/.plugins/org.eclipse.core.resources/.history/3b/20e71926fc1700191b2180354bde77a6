package nl.thestructureworld.client.renderer.entity.bulletsandgrenades;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.BasicEntityRender;
import nl.thestructureworld.client.renderer.entity.EntityRendererBodyParts;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.terrain.Terrain;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;
import nl.thestructureworld.entity.EntityClientPlayerMP;
import nl.thestructureworld.entity.EntityPlayer;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;
 
public class MGL_MilkorRenderer extends BasicEntityRender
{
	private int shootAgain = 0;
	private int holo = 0;
	private int sight = 0;
	public int idInList = -1;
	
	public MGL_MilkorRenderer(String texture,float refl,float damp, String modelID,float[] textureCoords,float[] position,float reflecY, float rotX, float rotY, float rotZ,float scale) 
    {
		super(new ModelBasic(false,0,10,refl,damp,"objectsandterrain/"+texture,new Vector4f(1F,2.5F,0F,0F),modelID,true,false),position,rotX,rotY,rotZ,reflecY,scale);
		this.textureCoords = textureCoords;
		this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.reflecY = reflecY;
        this.scale = scale;
        this.model.shineDamper = damp;
        this.model.skipAlpha = 0F;
        for(int i = 0;i < EntityRenderer.OBJModelList.size();++i)
    	{
    		if(EntityRenderer.OBJModelList.get(i).nameOBJ.contains("Holo"))
    		{
    			this.holo = EntityRenderer.OBJModelList.get(i).idModel;
    		}
    		if(EntityRenderer.OBJModelList.get(i).nameOBJ.contains("sight"))
    		{
    			this.sight = EntityRenderer.OBJModelList.get(i).idModel;
    		}
    	}
        this.model.Disable_CULL_FACE = true;
    }
	
	protected float fallMotion = 0F;
	
	@Override
	public void updateRenderer()
    {
		if(this.canPickup && !this.isPickingUp && Keyboard.isKeyDown(Keyboard.KEY_E))
		{
			this.isPickingUp = true;
		}
		
		if(this.isPickingUp && this.canPickup && EntityRendererBodyParts.itemEquipt != this.idInList)
		{
			++this.pickItemUpTimer;
			if(this.pickItemUpTimer > 3)
			{
				TheStructureWorld.TheStructureWorld.thePlayer.setCrouching(true);
				if(TheStructureWorld.TheStructureWorld.thePlayer.rotationPitch < 90)
				{
					++TheStructureWorld.TheStructureWorld.thePlayer.rotationPitch;
				}
			}
			if(this.pickItemUpTimer > 80)
			{
				EntityRendererBodyParts.itemEquipt = this.idInList;
				this.pickItemUpTimer = 0;
				this.canPickup = false;
				this.isPickingUp = false;
			}
		}
		
		if(Mouse.isButtonDown(0) && this.shootAgain == 0 && EntityRendererBodyParts.itemEquipt == this.idInList)
		{
			BulletRenderer grenade = new EntityMCA_40x53mm_round(TheStructureWorld.TheStructureWorld.renderViewEntity, new float[]{1.4F,5,0.00011F}, "40×53mm_Head", new ModelBasic(false,0,10,0F,0F,"objectsandterrain/MCA_40x53mm_rounds",new Vector4f(1F,2.5F,0F,0F),"40×53mm_Head",true,false), 1F);
			grenade.mirror = true;
			grenade.facing = TheStructureWorld.TheStructureWorld.thePlayer.rotationYaw;
			grenade.rotY = TheStructureWorld.TheStructureWorld.thePlayer.rotationYaw;
			TheStructureWorld.TheStructureWorld.entityRenderer.nmr.addEntity(grenade);     	     
			this.shootAgain = 250;
		}

		
		if(this.shootAgain > 0)
		{
			--this.shootAgain;
		}
		
		if(EntityRendererBodyParts.itemEquipt == this.idInList)
		{
			this.rotZ = TheStructureWorld.TheStructureWorld.thePlayer.rotationPitch; 
		}
		else
		{
			float fall = this.fallMotion + (0.00015F * (TheStructureWorld.TheStructureWorld.theWorld.StructureWorldInfo.gravity / 10) * 6F);
			this.rotZ = 0F; 
			if((Terrain.getHeightFromMap((int)this.position.x+6,(int)this.position.z+6,false,null)) < this.position.y - fall)
		 	{
		 		this.position.y -= fall;
		 		this.fallMotion = fall;
		 	}
		}
    }
	

	
	private float yy;
	private boolean canPickup = false;
	private boolean isPickingUp = false;
	private int pickItemUpTimer = 0;
	
	@Override
	public boolean renderModel(NormalMappingShader shader)
    {
		if(!this.canPickup && TheStructureWorld.TheStructureWorld.thePlayer.hasMoved)
		{
			 if(this.position.y > TheStructureWorld.TheStructureWorld.thePlayer.posY-1 && this.position.y < TheStructureWorld.TheStructureWorld.thePlayer.posY+(1))
			 {
				 if(this.position.x > TheStructureWorld.TheStructureWorld.thePlayer.posX-(0.5) && this.position.x < TheStructureWorld.TheStructureWorld.thePlayer.posX+(0.5))
				 {
					 if(this.position.z > TheStructureWorld.TheStructureWorld.thePlayer.posZ-(0.5) && this.position.z < TheStructureWorld.TheStructureWorld.thePlayer.posZ+(0.5))
					 {
						this.canPickup = true;
						this.addColor = new float[]{0.3F,0.3F,0.3F};
					 }
				 }
			 }	
			 else
			 {
				 this.canPickup = false;
				 this.addColor = new float[]{0,0,0};
			 }
		 }
		
		if(EntityRendererBodyParts.itemEquipt == this.idInList)
		{
			//GL11.glEnable(GL11.GL_DEPTH_TEST);
			//GL11.glDepthFunc(GL11.GL_LESS);
			//GL11.glDepthRange(-1F, 0.000015F);
			yy = -0.05F;
			
		}
		else if(yy != 0.3F)
		{
			yy = 0.3F;
		}
		
		shader.loadTransformationMatrix(TheStructureWorld.TheStructureWorld.entityRenderer.camera.createTransformationMatrixXYZ(new Vector3f(-0.36F , -0.57F + yy, 0.025F),this.getPosition(), this.getRotX(),this.getRotY(), this.getRotZ(), this.getScale()));
		GL11.glCallList(model.glListID);	
		GL13.glActiveTexture(GL13.GL_TEXTURE11);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D,TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/Holo.png")); 
		GL13.glActiveTexture(GL13.GL_TEXTURE10);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D,TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/Holo NormalMap.png")); 
		//GL11.glCallList(this.holo);
		GL11.glEnable(GL11.GL_BLEND);
		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
		shader.useAlphaFromTexture(1);
		//GL11.glCallList(this.sight);	
		if(EntityRendererBodyParts.itemEquipt == this.idInList)
		{
			//GL11.glDisable(GL11.GL_BLEND);
			//GL11.glDepthFunc(GL11.GL_LEQUAL);
			//GL11.glDepthRange(0.00001F, 1F);
		}
		shader.useAlphaFromTexture(0);
		return true;
	}
	
}