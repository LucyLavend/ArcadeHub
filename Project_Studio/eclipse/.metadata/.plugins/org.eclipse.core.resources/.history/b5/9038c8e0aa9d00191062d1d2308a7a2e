package nl.thestructureworld.network.play.client;

import io.netty.buffer.Unpooled;
import io.netty.util.concurrent.Future;
import io.netty.util.concurrent.GenericFutureListener;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Random;
import java.util.concurrent.Callable;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityPlayer;
import nl.thestructureworld.entity.PlayerMPEntity;
import nl.thestructureworld.savefile.SaveFileTagString;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.util.AxisAlignedBB;
import nl.thestructureworld.util.IntHashMap;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.world.WorldServer;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.common.base.Charsets;
import com.google.common.collect.Lists;

public class NetHandlerPlayServer implements INetHandlerPlayServer
{
    private static final Logger logger = LogManager.getLogger();
    public final NetworkManager netManager;
    private final TheStructureWorldServer serverController;
    public PlayerMPEntity playerEntity;
    private int networkTickCount;

    /**
     * Used to keep track of how the player is floating while gamerules should prevent that. Surpassing 80 ticks means
     * kick
     */
    private int floatingTickCount;
    private boolean field_147366_g;
    private int field_147378_h;
    private long field_147379_i;
    private static Random field_147376_j = new Random();
    private long field_147377_k;

    /**
     * Incremented by 20 each time a user sends a chat message, decreased by one every tick. Non-ops kicked when over
     * 200
     */
    private int chatSpamThresholdCount;
    private int field_147375_m;
    private IntHashMap field_147372_n = new IntHashMap();
    private double lastPosX;
    private double lastPosY;
    private double lastPosZ;
    private boolean hasMoved = true;
  
    public NetHandlerPlayServer(TheStructureWorldServer funci_i1530_1_, NetworkManager funci_i1530_2_, PlayerMPEntity funci_i1530_3_)
    {
        this.serverController = funci_i1530_1_;
        this.netManager = funci_i1530_2_;
        funci_i1530_2_.setNetHandler(this);
        this.playerEntity = funci_i1530_3_;
        funci_i1530_3_.playerNetServerHandler = this;
    }

    /**
     * For scheduled network tasks. Used in NetHandlerPlayServer to send keep-alive packets and in NetHandlerLoginServer
     * for a login-timeout
     */
    public void onNetworkTick()
    {
        this.field_147366_g = false;
        ++this.networkTickCount;

        if ((long)this.networkTickCount - this.field_147377_k > 40L)
        {
            this.field_147377_k = (long)this.networkTickCount;
            this.field_147379_i = this.tsw_funci_147363_d();
            this.field_147378_h = (int)this.field_147379_i;
            this.sendPacket(new S00PacketKeepAlive(this.field_147378_h));
        }

        if (this.chatSpamThresholdCount > 0)
        {
            --this.chatSpamThresholdCount;
        }

        if (this.field_147375_m > 0)
        {
            --this.field_147375_m;
        }

        if (this.playerEntity.tsw_funci_154331_x() > 0L && this.serverController.tsw_funci_143007_ar() > 0 && TheStructureWorldServer.getSystemTimeMillis() - this.playerEntity.tsw_funci_154331_x() > (long)(this.serverController.tsw_funci_143007_ar() * 1000 * 60))
        {
            this.kickPlayerFromServer("You have been idle for too long!");
        }
    }

    public NetworkManager tsw_funci_147362_b()
    {
        return this.netManager;
    }

    /**
     * Kick a player from the server with a reason
     */
    public void kickPlayerFromServer(String funci_147360_1_)
    {
        final String server = funci_147360_1_;
        this.netManager.scheduleOutboundPacket(new S40PacketDisconnect(server), new GenericFutureListener[] {new GenericFutureListener()
            {
                public void operationComplete(Future funci_operationComplete_1_)
                {
                    NetHandlerPlayServer.this.netManager.closeChannel(server);
                }
            }
        });
        this.netManager.disableAutoRead();
    }

    /**
     * Processes player movement input. Includes walking, strafing, jumping, Crouching; excludes riding and toggling
     * flying/Running
     */
    public void processInput(C0CPacketInput funci_147358_1_)
    {
        this.playerEntity.setEntityActionState(funci_147358_1_.tsw_funci_149620_c(), funci_147358_1_.tsw_funci_149616_d(), funci_147358_1_.tsw_funci_149618_e(), funci_147358_1_.tsw_funci_149617_f());
    }

    /**
     * Processes clients perspective on player positioning and/or orientation
     */
    public void processPlayer(C03PacketPlayer funci_147347_1_)
    {
        WorldServer server = this.serverController.worldServer();
        this.field_147366_g = true;

            double var3;

            if (!this.hasMoved)
            {
                var3 = funci_147347_1_.tsw_funci_149467_d() - this.lastPosY;

                if (funci_147347_1_.tsw_funci_149464_c() == this.lastPosX && var3 * var3 < 0.01D && funci_147347_1_.tsw_funci_149472_e() == this.lastPosZ)
                {
                    this.hasMoved = true;
                }
            }

            if (this.hasMoved)
            {
                double var5;
                double var7;
                double var9;

                if (this.playerEntity.ridingEntity != null)
                {
                    float var34 = this.playerEntity.rotationYaw;
                    float var4 = this.playerEntity.rotationPitch;
                    this.playerEntity.ridingEntity.updateRiderPosition();
                    var5 = this.playerEntity.posX;
                    var7 = this.playerEntity.posY;
                    var9 = this.playerEntity.posZ;

                    if (funci_147347_1_.tsw_funci_149463_k())
                    {
                        var34 = funci_147347_1_.tsw_funci_149462_g();
                        var4 = funci_147347_1_.tsw_funci_149470_h();
                    }

                    this.playerEntity.stayingGround = funci_147347_1_.tsw_funci_149465_i();
                    this.playerEntity.onUpdateEntity();
                    this.playerEntity.setPositionAndRotation(var5, var7, var9, var34, var4);

                    if (this.playerEntity.ridingEntity != null)
                    {
                        this.playerEntity.ridingEntity.updateRiderPosition();
                    }

                    this.serverController.getConfigurationManager().serverUpdateMountedMovingPlayer(this.playerEntity);

                    if (this.hasMoved)
                    {
                        this.lastPosX = this.playerEntity.posX;
                        this.lastPosY = this.playerEntity.posY;
                        this.lastPosZ = this.playerEntity.posZ;
                    }

                    server.updateEntity(this.playerEntity);
                    return;
                }

                if (this.playerEntity.isPlayerSleeping())
                {
                    this.playerEntity.onUpdateEntity();
                    this.playerEntity.setPositionAndRotation(this.lastPosX, this.lastPosY, this.lastPosZ, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
                    server.updateEntity(this.playerEntity);
                    return;
                }

                var3 = this.playerEntity.posY;
                this.lastPosX = this.playerEntity.posX;
                this.lastPosY = this.playerEntity.posY;
                this.lastPosZ = this.playerEntity.posZ;
                var5 = this.playerEntity.posX;
                var7 = this.playerEntity.posY;
                var9 = this.playerEntity.posZ;
                float var11 = this.playerEntity.rotationYaw;
                float var12 = this.playerEntity.rotationPitch;

                if (funci_147347_1_.tsw_funci_149466_j() && funci_147347_1_.tsw_funci_149467_d() == -999.0D && funci_147347_1_.tsw_funci_149471_f() == -999.0D)
                {
                    funci_147347_1_.tsw_funci_149469_a(false);
                }

                double var13;

                if (funci_147347_1_.tsw_funci_149466_j())
                {
                    var5 = funci_147347_1_.tsw_funci_149464_c();
                    var7 = funci_147347_1_.tsw_funci_149467_d();
                    var9 = funci_147347_1_.tsw_funci_149472_e();
                    var13 = funci_147347_1_.tsw_funci_149471_f() - funci_147347_1_.tsw_funci_149467_d();

                    if (!this.playerEntity.isPlayerSleeping() && (var13 > 1.65D || var13 < 0.1D))
                    {
                        //this.kickPlayerFromServer("Illegal stance");
                        //logger.warn(this.playerEntity.getCommandSenderName() + " had an illegal stance: " + var13);
                        //return;
                    }

                    if (Math.abs(funci_147347_1_.tsw_funci_149464_c()) > 3.2E7D || Math.abs(funci_147347_1_.tsw_funci_149472_e()) > 3.2E7D)
                    {
                        this.kickPlayerFromServer("Illegal position");
                        return;
                    }
                }

                if (funci_147347_1_.tsw_funci_149463_k())
                {
                    var11 = funci_147347_1_.tsw_funci_149462_g();
                    var12 = funci_147347_1_.tsw_funci_149470_h();
                }

                this.playerEntity.onUpdateEntity();
                this.playerEntity.setPositionAndRotation(this.lastPosX, this.lastPosY, this.lastPosZ, var11, var12);

                if (!this.hasMoved)
                {
                    return;
                }

                var13 = var5 - this.playerEntity.posX;
                double var15 = var7 - this.playerEntity.posY;
                double var17 = var9 - this.playerEntity.posZ;
                double var19 = Math.min(Math.abs(var13), Math.abs(this.playerEntity.motionX));
                double server1 = Math.min(Math.abs(var15), Math.abs(this.playerEntity.motionY));
                double server3 = Math.min(Math.abs(var17), Math.abs(this.playerEntity.motionZ));
                double server5 = var19 * var19 + server1 * server1 + server3 * server3;

                if (server5 > 100.0D && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(this.playerEntity.getCommandSenderName())))
                {
                    logger.warn(this.playerEntity.getCommandSenderName() + " moved too quickly! " + var13 + "," + var15 + "," + var17 + " (" + var19 + ", " + server1 + ", " + server3 + ")");
                    this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
                    return;
                }

                float server7 = 0.0625F;
               
                this.playerEntity.moveEntity(var13, var15, var17);
                this.playerEntity.stayingGround = funci_147347_1_.tsw_funci_149465_i();
                 double server9 = var15;
                var13 = var5 - this.playerEntity.posX;
                var15 = var7 - this.playerEntity.posY;

                if (var15 > -0.5D || var15 < 0.5D)
                {
                    var15 = 0.0D;
                }

                var17 = var9 - this.playerEntity.posZ;
                server5 = var13 * var13 + var15 * var15 + var17 * var17;
                boolean var31 = false;

                if (server5 > 0.0625D && !this.playerEntity.isPlayerSleeping())
                {
                    var31 = true;
                    logger.warn(this.playerEntity.getCommandSenderName() + " moved wrongly!");
                }

                this.playerEntity.setPositionAndRotation(var5, var7, var9, var11, var12);
             
                if ((var31) && !this.playerEntity.isPlayerSleeping())
                {
                    this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, var11, var12);
                    return;
                }

                AxisAlignedBB var33 = this.playerEntity.boundingBox.copy().expand((double)server7, (double)server7, (double)server7).addCoord(0.0D, -0.55D, 0.0D);

                if (!this.serverController.isFlightAllowed() && !server.checkTerrainObjectCollision(var33))
                {
                    if (server9 >= -0.03125D)
                    {
                        ++this.floatingTickCount;

                        if (this.floatingTickCount > 80)
                        {
                            logger.warn(this.playerEntity.getCommandSenderName() + " was kicked for floating too long!");
                            this.kickPlayerFromServer("Flying is not enabled on this server");
                            return;
                        }
                    }
                }
                else
                {
                    this.floatingTickCount = 0;
                }

                this.playerEntity.stayingGround = funci_147347_1_.tsw_funci_149465_i();
                this.serverController.getConfigurationManager().serverUpdateMountedMovingPlayer(this.playerEntity);
                this.playerEntity.handleFalling(this.playerEntity.posY - var3, funci_147347_1_.tsw_funci_149465_i());
            }
            else if (this.networkTickCount % 20 == 0)
            {
                this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
            }
    }

    public void setPlayerLocation(double funci_147364_1_, double funci_147364_3_, double funci_147364_5_, float funci_147364_7_, float funci_147364_8_)
    {
        this.hasMoved = false;
        this.lastPosX = funci_147364_1_;
        this.lastPosY = funci_147364_3_;
        this.lastPosZ = funci_147364_5_;
        this.playerEntity.setPositionAndRotation(funci_147364_1_, funci_147364_3_, funci_147364_5_, funci_147364_7_, funci_147364_8_);
        this.playerEntity.playerNetServerHandler.sendPacket(new S08PacketPlayerPosLook(funci_147364_1_, funci_147364_3_ + 1.6200000047683716D, funci_147364_5_, funci_147364_7_, funci_147364_8_, false));
    }

    /**
     * Processes the player initiating/stopping digging on a particular spot, as well as a player dropping items?. (0:
     * initiated, 1: reinitiated, 2? , 3-4 drop item (respectively without or with player control), 5: stopped; x,y,z,
     * side clicked on;)
     */
    public void processPlayerDigging(PacketPlayerDigging packet)
    {
        WorldServer server = this.serverController.worldServer();
        this.playerEntity.tsw_funci_143004_u();
            boolean var3 = false;

            if (packet.getType() == 0||packet.getType() == 1||packet.getType() == 2)
            {
                var3 = true;
            }

            int x = packet.getX();
            int y = packet.getY();
            int z = packet.getZ();

            if (var3)
            {
                double var7 = this.playerEntity.posX - ((double)x + 0.5D);
                double var9 = this.playerEntity.posY - ((double)y + 0.5D) + 1.5D;
                double var11 = this.playerEntity.posZ - ((double)z + 0.5D);
                double var13 = var7 * var7 + var9 * var9 + var11 * var11;

                if (var13 > 36.0D)
                {
                    return;
                }

                if (y >= this.serverController.getBuildLimit())
                {
                    return;
                }
            }

            if (packet.getType() == 0)
            {
                if (!this.serverController.isTerrainObjectProtected(server, x, y, z, this.playerEntity))
                {
                  this.playerEntity.theEditTerrainwwoItem.onTerrainObjectClicked(x, y, z, packet.getSide());
                }
                else
                {
                    this.playerEntity.playerNetServerHandler.sendPacket(new S23PacketTerrainObjectChange(x, y, z, server));
                }
            }
            else if (packet.getType() == 2)
            {
                this.playerEntity.theEditTerrainwwoItem.uncheckedTryEditingTerrainObject(x, y, z);

                
                {
                    this.playerEntity.playerNetServerHandler.sendPacket(new S23PacketTerrainObjectChange(x, y, z, server));
                }
            }
            else if (packet.getType() == 1)
            {
                this.playerEntity.theEditTerrainwwoItem.cancelDestroyingTerrainObject(x, y, z);

               
                {
                    this.playerEntity.playerNetServerHandler.sendPacket(new S23PacketTerrainObjectChange(x, y, z, server));
                }
            }
    }

    /**
     * Processes TerrainObject placement and TerrainObject activation (anvil, furnace, etc.)
     */
    public void processPlayerTerrainObjectPlacement(C08PacketPlayerTerrainObjectPlacement funci_147346_1_)
    {
        WorldServer server = this.serverController.worldServer();
        boolean var4 = false;
        int var5 = funci_147346_1_.tsw_funci_149576_c();
        int var6 = funci_147346_1_.tsw_funci_149571_d();
        int var7 = funci_147346_1_.tsw_funci_149570_e();
        int var8 = funci_147346_1_.tsw_funci_149568_f();
        this.playerEntity.tsw_funci_143004_u();

        if (funci_147346_1_.tsw_funci_149571_d() >= this.serverController.getBuildLimit() - 1 && (funci_147346_1_.tsw_funci_149568_f() == 1 || funci_147346_1_.tsw_funci_149571_d() >= this.serverController.getBuildLimit()))
        {
            String var9 = new String("build.tooHigh "+this.serverController.getBuildLimit());
            var4 = true;
        }
        else
        {
            if (this.hasMoved && this.playerEntity.getDistanceSq((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < 64.0D && !this.serverController.isTerrainObjectProtected(server, var5, var6, var7, this.playerEntity))
            {
                //this.playerEntity.theEditTerrainwwoItem.activateTerrainObjectOrUseItem(this.playerEntity, server, var3, var5, var6, var7, var8, funci_147346_1_.tsw_funci_149573_h(), funci_147346_1_.tsw_funci_149569_i(), funci_147346_1_.tsw_funci_149575_j());
            }

            var4 = true;
        }

        if (var4)
        {
            this.playerEntity.playerNetServerHandler.sendPacket(new S23PacketTerrainObjectChange(var5, var6, var7, server));

            if (var8 == 0)
            {
                --var6;
            }

            if (var8 == 1)
            {
                ++var6;
            }

            if (var8 == 2)
            {
                --var7;
            }

            if (var8 == 3)
            {
                ++var7;
            }

            if (var8 == 4)
            {
                --var5;
            }

            if (var8 == 5)
            {
                ++var5;
            }

            this.playerEntity.playerNetServerHandler.sendPacket(new S23PacketTerrainObjectChange(var5, var6, var7, server));
        }
    }

    /**
     * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
     */
    public void onDisconnect(String funci_147231_1_)
    {
        logger.info(this.playerEntity.getCommandSenderName() + " lost connection: " + funci_147231_1_);
        this.serverController.tsw_funci_147132_au();
        String server = new String("multiplayer.player.left");
        this.playerEntity.mountEntityAndWakeUp();
        this.serverController.getConfigurationManager().playerLoggedOut(this.playerEntity);

        if (this.serverController.isSinglePlayer() && this.playerEntity.getCommandSenderName().equals(this.serverController.getServerOwner()))
        {
            logger.info("Stopping singleplayer server as player logged out");
            this.serverController.initiateShutdown();
        }
    }

    public void sendPacket(final Packet funci_147359_1_)
    {   
        try
        {
            this.netManager.scheduleOutboundPacket(funci_147359_1_, new GenericFutureListener[0]);
        }
        catch (Throwable var5)
        {
        	System.out.println("[Server thread/ERROR]: Something went wrong while sending this packet: "+var5.getMessage());
        }
    }

    /**
     * Updates which quickbar slot is selected
     */
    public void processHeldItemChange(C09PacketHeldItemChange funci_147355_1_)
    {
      
    }

    /**
     * Processes the player swinging its held item
     */
    public void processAnimation(C0APacketAnimation funci_147350_1_)
    {
        this.playerEntity.tsw_funci_143004_u();

        if (funci_147350_1_.tsw_funci_149421_d() == 1)
        {
         
        }
    }

    /**
     * Processes a range of action-types: Crouching, Running, waking from sleep, opening the inventory or setting jump
     * height of the horse the player is riding
     */
    public void processEntityAction(C0BPacketEntityAction ac)
    {
        this.playerEntity.tsw_funci_143004_u();

        if(ac.getActionID() == 1)
        {
            this.playerEntity.setCrouching(true);
        }
        else if(ac.getActionID() == 2)
        {
            this.playerEntity.setCrouching(false);
        }
        else if(ac.getActionID() == 4)
        {
            this.playerEntity.setRunning(true);
        }
        else if(ac.getActionID() == 5)
        {
            this.playerEntity.setRunning(false);
        }
    }

    /**
     * Processes interactions ((un)leashing, opening command TerrainObject GUI) and attacks on an entity with players currently
     * equipped item
     */
    public void processUseEntity(C02PacketUseEntity funci_147340_1_)
    {
        WorldServer server = this.serverController.worldServer();
        Entity var3 = funci_147340_1_.tsw_funci_149564_a(server);
        this.playerEntity.tsw_funci_143004_u();

        if (var3 != null)
        {
            boolean var4 = this.playerEntity.canEntityBeSeen(var3);
            double var5 = 36.0D;

            if (!var4)
            {
                var5 = 9.0D;
            }

            if (this.playerEntity.getDistanceSqToEntity(var3) < var5)
            {
                if (funci_147340_1_.tsw_funci_149565_c() == C02PacketUseEntity.Action.INTERACT)
                {
                }
                else if (funci_147340_1_.tsw_funci_149565_c() == C02PacketUseEntity.Action.ATTACK)
                {
                    if ( var3 == this.playerEntity)
                    {
                        this.kickPlayerFromServer("Attempting to attack an invalid entity");
                        this.serverController.logWarning("Player " + this.playerEntity.getCommandSenderName() + " tried to attack an invalid entity");
                        return;
                    }
                }
            }
        }
    }

    /**
     * Processes the client status updates: respawn attempt from player, opening statistics or achievements, or
     * acquiring 'open inventory' achievement
     */
    public void processClientStatus(C16PacketClientStatus funci_147342_1_)
    {
        this.playerEntity.tsw_funci_143004_u();
        C16PacketClientStatus.EnumState server = funci_147342_1_.tsw_funci_149435_c();

        switch (NetHandlerPlayServer.SwitchEnumState.field_151290_a[server.ordinal()])
        {
            case 1:
                if (this.playerEntity.getServerForPlayer().getStructureWorldInfo().getDifficulty().contains("Hardcore"))
                {
                    if (this.serverController.isSinglePlayer() && this.playerEntity.getCommandSenderName().equals(this.serverController.getServerOwner()))
                    {
                        this.playerEntity.playerNetServerHandler.kickPlayerFromServer("You have died!");
                        this.serverController.deleteWorldAndStopServer();
                    }
                    else
                    {
                        this.playerEntity.playerNetServerHandler.kickPlayerFromServer("You have died!");
                    }
                }
                else
                {
                      this.playerEntity = this.serverController.getConfigurationManager().respawnPlayer(this.playerEntity, 0, false);
                }

                break;

            }
    }

    /**
     * Processes the client closing windows (container)
     */
    public void processCloseWindow(C0DPacketCloseWindow funci_147356_1_)
    {
        this.playerEntity.closeContainer();
    }

    /**
     * Executes a container/inventory slot manipulation as indicated by the packet. Sends the serverside result if they
     * didn't match the indicated result and prevents further manipulation by the player until he confirms that it has
     * the same open container/inventory
     */
    public void processClickWindow(C0EPacketClickWindow funci_147351_1_)
    {
        this.playerEntity.tsw_funci_143004_u();
    }


    private long tsw_funci_147363_d()
    {
        return System.nanoTime() / 1000000L;
    }

    /**
     * Allows validation of the connection state transition. Parameters: from, to (connection state). Typically throws
     * IllegalStateException or UnsupportedOperationException if validation fails
     */
    public void onConnectionStateTransition(EnumConnectionState funci_147232_1_, EnumConnectionState funci_147232_2_)
    {
        if (funci_147232_2_ != EnumConnectionState.PLAY)
        {
            throw new IllegalStateException("Unexpected change in protocol!");
        }
    }

    static final class SwitchEnumState
    {
        static final int[] field_151290_a = new int[C16PacketClientStatus.EnumState.values().length];

        static
        {
            try
            {
                field_151290_a[C16PacketClientStatus.EnumState.PERFORM_RESPAWN.ordinal()] = 1;
            }
            catch (NoSuchFieldError var3)
            {
                ;
            }

            try
            {
                field_151290_a[C16PacketClientStatus.EnumState.REQUEST_STATS.ordinal()] = 2;
            }
            catch (NoSuchFieldError server)
            {
                ;
            }

            try
            {
                field_151290_a[C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT.ordinal()] = 3;
            }
            catch (NoSuchFieldError var1)
            {
                ;
            }
        }
    }

	@Override
	public void processConfirmTransaction(
			C0FPacketConfirmTransaction funci_147339_1_) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processVanilla250Packet(C17PacketCustomPayload funci_147349_1_) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processPlayerAbilities(C13PacketPlayerAbilities funci_147348_1_) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processForgeInventoryAction(
			C10PacketForgeInventoryAction funci_147344_1_) {
		// TODO Auto-generated method stub
		
	}

}
