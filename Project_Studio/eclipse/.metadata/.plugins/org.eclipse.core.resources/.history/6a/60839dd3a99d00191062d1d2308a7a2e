package nl.thestructureworld.network.play.client;


public interface INetHandlerPlayClient extends INetHandler
{
    /**
     * Spawns an instance of the objecttype indicated by the packet and sets its position and momentum
     */
    void handleSpawnObject(S0EPacketSpawnObject funci_147235_1_);

     /**
     * Handles the creation of a nearby player entity, sets the position and held item
     */
    void handleSpawnPlayer(S0CPacketSpawnPlayer funci_147237_1_);

    /**
     * Renders a specified animation: Waking up a player, a living entity swinging its currently held item, being hurt
     * or receiving a critical hit by normal or magical means
     */
    void handleAnimation(S0BPacketAnimation funci_147279_1_);


     /**
     * Updates the TerrainObject and metadata and generates a TerrainObjectupdate (and notify the clients)
     */
    void handleTerrainObjectChange(S23PacketTerrainObjectChange funci_147234_1_);

    
    /**
     * Received from the servers PlayerManager if between 1 and 64 BasicEntityRender in a Area are changed. If only one TerrainObject
     * requires an update, the server sends S23PacketTerrainObjectChange and if 64 or more BasicEntityRender are changed, the server sends
     * S21PacketAreaData
     */
    void handleMultiTerrainObjectChange(S22PacketMultiTerrainObjectChange funci_147287_1_);

    /**
     * Verifies that the server and client are synchronized with respect to the inventory/container opened by the player
     * and confirms if it is the case.
     */
    void handleConfirmTransaction(S32PacketConfirmTransaction funci_147239_1_);

    /**
     * Resets the ItemData held in hand and closes the window that is opened
     */
    void handleCloseWindow(S2EPacketCloseWindow funci_147276_1_);

    /**
     * Handles the placement of a specified ItemData in a specified container/inventory slot
     */
    void handleWindowItems(S30PacketWindowItems funci_147241_1_);

    /**
     * Displays a GUI by ID. In order starting from id 0: Chest, Workbench, Furnace, Dispenser, Enchanting table,
     * Brewing stand, Villager merchant, Beacon, Anvil, Hopper, Dropper, Horse
     */
    void handleOpenWindow(S2DPacketOpenWindow funci_147265_1_);

    /**
     * Sets the progressbar of the opened window to the specified value
     */
    void handleWindowProperty(S31PacketWindowProperty funci_147245_1_);

    /**
     * Handles pickin up an ItemData or dropping one in your inventory or an open (non-Forge) container
     */
    void handleSetSlot(S2FPacketSetSlot funci_147266_1_);

    /**
     * Handles packets that have room for a channel specification. Vanilla implemented channels are "SW|TrList" to
     * acquire a MerchantRecipeList trades for a villager merchant, "SW|Brand" which sets the server brand? on the
     * player instance and finally "SW|RPack" which the server uses to communicate the identifier of the default server
     * resourcepack for the client to load.
     */
    void handleCustomPayload(S3FPacketCustomPayload funci_147240_1_);

    /**
     * Closes the network channel
     */
    void handleDisconnect(S40PacketDisconnect funci_147253_1_);

    /**
     * Invokes the entities' handleUpdateHealth method which is implemented in LivingBase (hurt/death),
     * MinecartMobSpawner (spawn delay), FireworkRocket & MinecartTNT (explosion), IronGolem (throwing,...), Witch
     * (spawn particles), Zombie (villager transformation), Animal (breeding mode particles), Horse (breeding/smoke
     * particles), Sheep (...), Tameable (...), Villager (particles for breeding mode, angry and happy), Wolf (...)
     */
    void handleEntityStatus(S19PacketEntityStatus funci_147236_1_);

    void handleEntityAttach(S1BPacketEntityAttach funci_147243_1_);

    /**
     * Initiates a new explosion (sound, particles, drop spawn) for the affected BasicEntityRender indicated by the packet.
     */
    void handleExplosion(S27PacketExplosion funci_147283_1_);

    void handleChangeGameState(S2BPacketChangeGameState funci_147252_1_);

    void handleKeepAlive(S00PacketKeepAlive funci_147272_1_);

    /**
     * Updates the specified Area with the supplied data, marks it for re-rendering and lighting recalculation
     */
    void handleAreaData(S21PacketAreaData funci_147263_1_);

    void handleMapAreaBulk(S26PacketMapAreaBulk funci_147269_1_);

    void handleEffect(S28PacketEffect funci_147277_1_);

    /**
     * Registers some server properties (gametype,hardcore-mode,terraintype,difficulty,player limit), creates a new
     * WorldClient and sets the player
     */
    void handleJoinGame(S01PacketJoinGame funci_147282_1_);

    /**
     * Updates the specified entity's position by the specified relative moment and absolute rotation. Note that
     * subclassing of the packet allows for the specification of a subset of this data (e.g. only rel. position, abs.
     * rotation or both).
     */
    void handleEntityMovement(S14PacketEntity funci_147259_1_);

    /**
     * Handles changes in player positioning and rotation such as when (re)spawning,
     * mounting horses etc. Seems to immediately reply to the server with the clients post-processing perspective on the
     * player positioning
     */
    void handlePlayerPosLook(S08PacketPlayerPosLook funci_147258_1_);
    
    void handlePlayerAbilities(S39PacketPlayerAbilities funci_147270_1_);

    void handlePlayerListItem(S38PacketPlayerListItem funci_147256_1_);

    /**
     * Locally eliminates the entities. Invoked by the server when the items are in fact destroyed, or the player is no
     * longer registered as required to monitor them. The latter  happens when distance between the player and item
     * increases beyond a certain treshold (typically the viewing distance)
     */
    void handleDestroyEntities(S13PacketDestroyEntities funci_147238_1_);

    void handleRespawn(S07PacketRespawn funci_147280_1_);

    /**
     * Updates the direction in which the specified entity is looking, normally this head rotation is independent of the
     * rotation of the entity itself
     */
    void handleEntityHeadLook(S19PacketEntityHeadLook funci_147267_1_);

    /**
     * Updates which hotbar slot of the player is currently selected
     */
    void handleHeldItemChange(S09PacketHeldItemChange funci_147257_1_);

  
    /**
     * Invoked when the server registers new proximate objects in your watchlist or when objects in your watchlist have
     * changed -> Registers any changes locally
     */
    void handleEntityMetadata(S1CPacketEntityMetadata funci_147284_1_);

    /**
     * Sets the velocity of the specified entity to the specified value
     */
    void handleEntityVelocity(S12PacketEntityVelocity funci_147244_1_);

    void handleEntityEquipment(S04PacketEntityEquipment funci_147242_1_);

    void handleUpdateHealth(S06PacketUpdateHealth funci_147249_1_);

  
    void handleSpawnPosition(S05PacketSpawnPosition funci_147271_1_);

    void handleTimeUpdate(S03PacketTimeUpdate funci_147285_1_);

    void handleSoundEffect(S29PacketSoundEffect funci_147255_1_);

    void handleCollectItem(S0DPacketCollectItem funci_147246_1_);

    /**
     * Updates an entity's position and rotation as specified by the packet
     */
    void handleEntityTeleport(S18PacketEntityTeleport funci_147275_1_);

}
