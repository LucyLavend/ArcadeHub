package nl.miystengine.client.gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.apache.commons.io.FileUtils;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.KeySettings;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.audio.AudioMaster;
import nl.miystengine.client.multiplayer.WorldClient;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.ObjectRenderer;
import nl.miystengine.client.renderer.Tessellator;
import nl.miystengine.client.renderer.basicmodels.ArrayListOBJModels;
import nl.miystengine.client.renderer.entity.EntityRendererBodyParts;
import nl.miystengine.client.renderer.entity.EntitySmokeParticle;
import nl.miystengine.client.renderer.entity.ModelBasic;
import nl.miystengine.client.renderer.terrain.RenderTerrain;
import nl.miystengine.client.renderer.terrain.Terrain;
import nl.miystengine.client.renderer.terrain.TerrainRenderer;
import nl.miystengine.client.renderer.texture.TextureManager;
import nl.miystengine.client.shaders.Camera;
import nl.miystengine.client.shaders.Light;
import nl.miystengine.client.shaders.Loader;
import nl.miystengine.client.shaders.grass.GrassShader;
import nl.miystengine.client.shaders.normal.NormalMappingShader;
import nl.miystengine.client.shaders.shadows.ShadowMapMasterRenderer;
import nl.miystengine.client.shaders.shadows.ShadowShader;
import nl.miystengine.client.shaders.sky.SkyRenderer;
import nl.miystengine.client.shaders.sky.SkyShader;
import nl.miystengine.client.shaders.terrain.TerrainShader;
import nl.miystengine.client.test.ParticleShader;
import nl.miystengine.client.test.ParticlesVao;
import nl.miystengine.client.water.WaterTile;
import nl.miystengine.entity.EntityPlayer;
import nl.miystengine.world.StructureWorldInfo;

public class LoadingScreenGui extends ScreenGui
{
   public static int guiLoaded = 0;
   public String worldMapName;
   private MiystEngine tsw = MiystEngine.getMiystEngine();
   public static float[] suncolor = new float[]{1F,1F,1F};
 	
   public LoadingScreenGui(String worldName)
   {
    	this.backGroundTexture = "/menu/loading screen.png";
    	this.worldMapName = worldName;
   }
   
    /**
     * Returns true if this GUI should pause the game when it is displayed in single-player
     */
    public boolean doesGuiPauseGame()
    {
        return true;    
    }
    
    @Override protected void keypressed(char c,int p){}
    
    
    public void getHint() throws IOException
    {
    	Mouse.setGrabbed(true);
    	int hintsMax = Integer.parseInt((""+FileUtils.readLines(new File(FileBasicJava.source,"/The Structure World/Hints.txt")).get(0)).replace("Lines: ", ""));
    	String line = FileUtils.readLines(new File(FileBasicJava.source,"/The Structure World/Hints.txt")).get(MiystEngine.miystengine.rand.nextInt(hintsMax)+1);
    	this.hint = line;
    }
    
	public String hint = "Text File not Found at: "+FileBasicJava.source+"/The Structure World/Hints.txt";
	public static boolean renderObjectsInWorld = false;
	public String loadingInformation = "";
	public boolean stopBecauseOfError = false;
	public static int loadObjects = 0;
	

	@Override
    /**
     * Draws the screen and all the components in it.
     */
    public void drawScreen(int x, int y)
    {
		//Render the text of the loading part and a hint/tip for the player
    	GL11.glPushMatrix();
    	GL11.glEnable(GL11.GL_TEXTURE_2D);
        this.drawTextured(0, 0, this.width,this.height ,0,0, backGroundTexture);
        GL11.glEnable(GL11.GL_BLEND);
        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        this.drawCenteredStringWithColor(fontRendererObj,this.loadingInformation, this.width / 2, (int)(this.height / 1.1), 0.9F, 0.9F, 0.9F, 0.9F);
        String[] splitText = hint.split("#"); 
        this.drawCenteredStringWithColor(fontRendererObj,splitText[0].replace("#", ""), this.width / 2,  (int)(this.height / 1.27), 1F, 1F, 1F, 1F);
       
        if(splitText.length > 1)
        {
        	this.drawCenteredStringWithColor(fontRendererObj,splitText[1], this.width / 2,  (int)(this.height / 1.2), 1F, 1F, 1F, 1F);
        }
        
        GL11.glPopMatrix();
        if(guiLoaded == 0 && MiystEngine.miystengine.getScreenLock())
        {
        	renderObjectsInWorld = false;
        	try 
        	{
				this.getHint();
			} 
        	catch (IOException e) 
			{
				e.printStackTrace();
			}
       }
        //Start loading and showing what the game is loading
        //it's with a timer, capped on FPS and now the game has it's resting time between loading stuff.
        //because if you remove the timer, it will say that the game is not responding.
        if(!stopBecauseOfError)
        {
        	++guiLoaded;
        }
        
        if(guiLoaded == 2)
		{
			this.loadModels();
			this.loadingInformation = "Prepairing Terrain....";
			MiystEngine.miystengine.entityRenderer.terrain = new Terrain(worldMapName,-1);
			MiystEngine.miystengine.entityRenderer.worldRenderer.terrain = new RenderTerrain(); 
		}
		else if(guiLoaded == 4)
		{
			this.loadingInformation = "Fixing Terrain Texture Size.....";
			ModelBasic.textureSize = MiystEngine.miystengine.getTextureManager().textureSize;
		}
		else if(guiLoaded > 4 && guiLoaded < 31)
		{
			this.loadingInformation = MiystEngine.miystengine.getGame().loadingScreenBegin(guiLoaded);
		}
		else if(guiLoaded == 31)
		{
			this.loadingInformation = "Prepairing Grass Shader..";
			MiystEngine.miystengine.entityRenderer.ShaderGrass = new GrassShader();
		}
		else if(guiLoaded == 32)
		{
			EntityRenderer.shadowShader = new ShadowShader();
			this.loadingInformation = "Loading Shadow Shader.....";
		}
		else if(guiLoaded == 33)
		{
			EntityRenderer.shadowMasterRenderer = new ShadowMapMasterRenderer();
			this.loadingInformation = "Loading Shadow Renderer.....";
		}
		else if(guiLoaded == 35)
		{
			if(ModelBasic.textureSize == 5120)
		    {
		    	 ModelBasic.fixTexture = 0.6F;
		    }
		}
		else if(guiLoaded == 37)
		{
			if(ModelBasic.textureSize == 5120){}
		    else if(ModelBasic.textureSize == 2560)
		    {
		    	 ModelBasic.fixTexture = 0.8F;
		    }
		}
		else if(guiLoaded == 39)
		{
			if(ModelBasic.textureSize == 5120){}
		    else if(ModelBasic.textureSize == 2560){}
		    else if(ModelBasic.textureSize == 1024 || ModelBasic.textureSize == 512)
		    {
		    	 ModelBasic.fixTexture = 1F;
		    }
		}
		else if(guiLoaded == 41)
		{
			this.loadingInformation = "Prepairing Rock Objects Texture.....";
			BufferedReader read;
			try 
			{
				read = new BufferedReader(new FileReader(new File(FileBasicJava.sources,"saves/"+this.worldMapName+"/Rocks.png")));
				ObjectRenderer.rockTextures = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.sources+"saves/"+this.worldMapName+"/Rocks.png"); 
			}
			catch(Exception e)
			{
			    ObjectRenderer.rockTextures = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/Rocks.png");     	
			}
		}
		else if(guiLoaded == 45)
		{
			this.loadingInformation = "Prepairing Plant Objects Texture....";

		}
		else if(guiLoaded == 49 && MiystEngine.miystengine.entityRenderer.light.size() == 0)
		{
			this.loadingInformation = "Adding Sun...";
			MiystEngine.miystengine.entityRenderer.light.add(new Light(new float[]{10000, 10000, 0},suncolor));
			//Removed preparing camera to main menu, so now there is a gap and this will fix loading time
			guiLoaded = 57;
		}
		else if(guiLoaded == 58)
		{
			this.loadingInformation = "Loading Object Renderer...";
			MiystEngine.miystengine.entityRenderer.nmr = new ObjectRenderer(EntityRenderer.projectionMatrix);
		}
		else if(guiLoaded == 60)
		{
			this.loadingInformation = "Prepairing Terrain..";
			MiystEngine.miystengine.entityRenderer.ShaderT = new TerrainShader(TerrainShader.VERTEX_FILEN, TerrainShader.FRAGMENT_FILEN);
			MiystEngine.miystengine.entityRenderer.terrainRenderer = new TerrainRenderer(EntityRenderer.projectionMatrix);
			MiystEngine.miystengine.entityRenderer.worldRenderer.updateTerrain(MiystEngine.miystengine.thePlayer);
		}
		else if(guiLoaded == 70)
		{
			this.loadingInformation = "Loading Sky Box..";
			MiystEngine.miystengine.entityRenderer.Skyshader = new SkyShader();           	
			MiystEngine.miystengine.entityRenderer.skyRender = new SkyRenderer(EntityRenderer.projectionMatrix);
		}
		else if(guiLoaded == 75)
		{
			this.loadingInformation = "Loading Ambient Colors..";
			BufferedReader read;
			try 
			{
				read = new BufferedReader(new FileReader(new File(FileBasicJava.sources,"saves/"+this.worldMapName+"/AmbientColors.txt")));
				{
					String sky = read.readLine();
					sky = sky.replace("Sky Color: ", "");
					String[] colors = sky.split(",");
					float R = Float.parseFloat(colors[0]);
					float G = Float.parseFloat(colors[1]);
					float B = Float.parseFloat(colors[2]);
					MiystEngine.miystengine.entityRenderer.maxCustomSkyColor[0] = R;
					MiystEngine.miystengine.entityRenderer.maxCustomSkyColor[1] = G;
					MiystEngine.miystengine.entityRenderer.maxCustomSkyColor[2] = B;
				}
				{
					String sky = read.readLine();
					sky = sky.replace("Fog Color: ", "");
					String[] colors = sky.split(",");
					float R = Float.parseFloat(colors[0]);
					float G = Float.parseFloat(colors[1]);
					float B = Float.parseFloat(colors[2]);
					MiystEngine.miystengine.entityRenderer.maxCustomFogColor[0] = R;
					MiystEngine.miystengine.entityRenderer.maxCustomFogColor[1] = G;
					MiystEngine.miystengine.entityRenderer.maxCustomFogColor[2] = B;
				}
			}
			catch(Exception e)
			{
				MiystEngine.miystengine.entityRenderer.maxCustomSkyColor[0] = 1F;
				MiystEngine.miystengine.entityRenderer.maxCustomSkyColor[1] = 1F;
				MiystEngine.miystengine.entityRenderer.maxCustomSkyColor[2] = 1F;
				
				MiystEngine.miystengine.entityRenderer.maxCustomFogColor[0] = 0.9F;
				MiystEngine.miystengine.entityRenderer.maxCustomFogColor[1] = 0.9F;
				MiystEngine.miystengine.entityRenderer.maxCustomFogColor[2] = 0.98F;
			}	
		}
		else if(guiLoaded > 85 && guiLoaded < 110)
		{
			this.loadingInformation = MiystEngine.miystengine.getGame().loadingScreenTerrain(guiLoaded);
		}
		else if(guiLoaded == 115)
		{
			this.loadingInformation = "Loading particles";
			MiystEngine.miystengine.entityRenderer.shaderParticle = new ParticleShader();
			MiystEngine.miystengine.entityRenderer.nmr.spawnEntity(new EntitySmokeParticle(1F,true,"smoke/smoke_" + 0, 2F,2F,"plane",new float[]{1,1,0,0},new float[]{0,y,0},0.2F,0,0,0, 1F));
		}
		else if(guiLoaded == 117)
		{
			MiystEngine.miystengine.entityRenderer.nmr.spawnEntity(new EntitySmokeParticle(1F,true,"smoke/smoke_" + 1, 2F,2F,"plane",new float[]{1,1,0,0},new float[]{0,y,0},0.2F,0,0,0, 1F));
		}
		else if(guiLoaded == 119)
		{
			MiystEngine.miystengine.entityRenderer.nmr.spawnEntity(new EntitySmokeParticle(1F,true,"smoke/smoke_" + 2, 2F,2F,"plane",new float[]{1,1,0,0},new float[]{0,y,0},0.2F,0,0,0, 1F));
		}
		else if(guiLoaded == 121)
		{
			MiystEngine.miystengine.entityRenderer.nmr.spawnEntity(new EntitySmokeParticle(1F,true,"smoke/smoke_" + 3, 2F,2F,"plane",new float[]{1,1,0,0},new float[]{0,y,0},0.2F,0,0,0, 1F));
		}
		else if(guiLoaded == 123)
		{
			MiystEngine.miystengine.entityRenderer.nmr.spawnEntity(new EntitySmokeParticle(1F,true,"smoke/smoke_" + 4, 2F,2F,"plane",new float[]{1,1,0,0},new float[]{0,y,0},0.2F,0,0,0, 1F));	 	   
		}
		else if(guiLoaded == 124)
		{
			try
			{
				EntityRenderer.onWorldLoaded = 0;
				this.loadingInformation = "Prepairing Structure World..";
				MiystEngine.miystengine.getGame().loadingBeforeEntering();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		else if(guiLoaded > 125)
		{
			try 
			{
				MiystEngine.miystengine.entityRenderer.terrainRenderer.loadOneTime = 1;
				this.loadingInformation = "Prepairing Structure World..";
				++EntityRenderer.onWorldLoaded;
				renderObjectsInWorld = true;
				MiystEngine.miystengine.setScreenUnLock();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			//return;
		}
	            
	        if(hint.equals("Text File not Found at: "+FileBasicJava.source+"/The Structure World/Hints.txt"))
	        {
	        	try 
	        	{
	        		this.getHint();
	        		MiystEngine.miystengine.setScreenLock();
	        	} 
	        	catch (IOException e) 
	        	{
	        		e.printStackTrace();
	        	}
	        }

    }
    
    public static void loadModels()
    {
    	EntityRenderer.loadModels();
    }
    
}