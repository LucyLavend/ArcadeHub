package nl.miystengine.client.gui;

import io.netty.util.concurrent.GenericFutureListener;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.SocketAddress;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.audio.AudioMaster;
import nl.miystengine.client.gui.console.AcceptedKeyboardKeys;
import nl.miystengine.client.multiplayer.NetHandlerLoginClient;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.ObjectRenderer;
import nl.miystengine.client.renderer.Tessellator;
import nl.miystengine.client.renderer.terrain.Terrain;
import nl.miystengine.server.management.EnumConnectionState;
import nl.miystengine.server.management.INetHandlerHandshakeServer;
import nl.miystengine.server.management.IntegratedServer;
import nl.miystengine.server.management.NetworkManager;
import nl.miystengine.server.management.ServerStatusResponse;
import nl.miystengine.server.management.MiystEngineServer;
import nl.miystengine.util.MathHelper;


import nl.miystengine.world.StructureWorldInfo;
import nl.miystengine.world.SettingsOfStructureWorld;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

public class CreateStructureWorldGui extends ScreenGui
{
    private String GameType = "Survival";
    private String Difficulty = "";
    private String skyworldnameure = "sky";
    public int badlandspots = 5;
    public int radiation = 10;
    private float waterHeightFromTides = 3F;
    public float gravity = 9.807F;
    public int fogMeters = 20;
    private String difficulty = "Normal";
    public String worldname;
    public String worldseed = "";
    public ScreenGui screen;
    public int gravityClicked = 2;
    public int tempClicked = 2;
    public boolean MetersorFeet = false;
    public float tempature = -15.0F;
    public int FungusGrowth = 10;
	private int changeStartString = 0;
	private boolean alphaStartStringBack;
	private float alphaStartString = 1.0F;
    public String hintText = "";
    public boolean stopShowingText = false;
    public int worldType = 0;
    
    public CreateStructureWorldGui(ScreenGui screen)
    {
        this.screen = screen;
        MiystEngine.miystengine.currentScreen2 = this;
        this.backGroundTexture = "/menu/world_generator.png";
    }
    
    /**
     * Called from the main game loop to update the screen.
     */
    public void updateScreen()
    {
      ++this.changeStartString;
      if(this.changeStartString > 30)
      {
        if(!this.alphaStartStringBack)
        {
         this.alphaStartStringBack = true;
         if(!this.showHint){this.showHint = true;
         if(this.hintText == ""){this.hintText="Change name by hitting any key";}else {this.hintText="";}}if(this.showHint){this.showHint = false;}
        }
        else if(this.alphaStartStringBack)
        {
         this.alphaStartStringBack = false;
        }
        this.changeStartString = 0;
     }
     if(!this.alphaStartStringBack && this.alphaStartString > 0.4F)
     {
         this.alphaStartString -= 0.05F;
     }
     if(this.alphaStartStringBack && this.alphaStartString < 1.1F)
     {
         this.alphaStartString += 0.05F;
     }
     
     
    }
    
    private int typeAgain = 0;
    
    /**
     * Adds the buttons (and other controls) to the screen in question.
     */
    public void initGui()
    {
        Keyboard.enableRepeatEvents(true);
        this.buttonList.clear();
        this.buttonList.add(new ButtonBasic(30, this.width / 2 - 85, 295, 192, 20, "",1));
        
        this.buttonList.add(new ButtonBasic(0, this.width / 2 - 180, this.height - 28, 100, 20, "Create World",1));
        this.buttonList.add(new ButtonBasic(1, this.width / 2 + 85, this.height - 28, 100, 20, "Cancel",1));  
        
        this.buttonList.add(new ButtonBasic(9, this.width / 2 - 85, 124, 175, 20, "",1));
        this.buttonList.add(new ButtonBasic(10, this.width / 2 - 120, 167, 120, 20, "",1));
        this.buttonList.add(new ButtonBasic(11, this.width / 2 + 10 , 169, 155, 20, "",1));
        
        this.buttonList.add(new ButtonBasic(12, this.width / 2 - 95, 146, 95, 20, "",1));
        this.buttonList.add(new ButtonBasic(13, this.width / 2 + 5 , 145, 165, 20, "",1));
        this.buttonList.add(new ButtonBasic(14, this.width / 2 - 135, 191, 142, 20, "",1));
        this.buttonList.add(new ButtonBasic(31, this.width / 2 - 85, 64, 192, 20, "",1));
        
        this.buttonList.add(new ButtonBasic(15, this.width / 2 + 8 , 190, 174, 20, "",1));
        this.buttonList.add(new ButtonBasic(16, this.width / 2 - 85, 214, 173, 20, "",1));
        this.buttonList.add(new ButtonBasic(2, this.width / 2 + 53, 124, 50, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(3, this.width / 2 - 100, 124, 50, 20, "-","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(5, this.width / 2 - 20, 146, 20, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(4, this.width / 2 - 110, 146, 50, 20, "-","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(6, this.width / 2 + 140, 145, 50, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(7, this.width / 2 + 53 - 47, 145, 20, 20, "-","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(true, 25, this.width / 2 + 270 , 325,"/Menu/Meters or Feet.png",50,1));
        this.buttonList.add(new ButtonBasic(18, this.width / 2 - 150, 191, 50, 20, "-","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(19, this.width / 2 - 10, 191, 20, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(8, this.width / 2 + 130, 169, 50, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(17, this.width / 2 + 53 - 49, 169, 20, 20, "-","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(20, this.width / 2 + 150, 191, 50, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(21, this.width / 2 + 5, 191, 20, 20, "-","/no_texture.png",1));
       
        this.buttonList.add(new ButtonBasic(22, (int)(this.width / 2.35) , 101, 120, 20, "Natural Terrain",1));
  
        this.buttonList.add(new ButtonBasic(29, this.width / 2 - 87, 245, 192, 20, "",1));
        this.buttonList.add(new ButtonBasic(23, this.width / 2 + 73, 245, 50, 20, "+","/no_texture.png",1));
        this.buttonList.add(new ButtonBasic(24, this.width / 2 - 105, 245, 50, 20, "-","/no_texture.png",1));
        this.WorldName();
    }

    private boolean generateWorld = false;
    private boolean selectedSeedOrWorldname = false;
    
    protected void actionPerformed(ButtonBasic button)
    {
        if(button.enabled)
        {
        	//
        	if(button.id == 30)
            {
        		this.selectedSeedOrWorldname = true;
            }
        	else if(button.id == 31)
            {
        		this.selectedSeedOrWorldname = false;
            }
        	else if(button.id == 1)
            {
            	this.backGroundTexture = "/menu/wooden hut background.png";
                MiystEngine.miystengine.displayScreenGui(this.screen);
            }
            else if(button.id == 25)
            {
            	 if(!this.MetersorFeet)
            	 {
                 this.MetersorFeet = true;
            	 }
            	 else if(this.MetersorFeet)
            	 {
                 this.MetersorFeet = false;
            	 }
            }
            else if(button.id == 22)
            {
            	if(this.worldType < 3)
            	{
            		++this.worldType;
            	}
            	else
            	{
            		this.worldType = 0;
            	}
            	
            	if(this.worldType == 0)
            	{
            		button.displayString = "Natural Terrain";
            	}
            	else if(this.worldType == 1)
            	{
            		button.displayString = "Bumpy Terrain";
            	}
            	else if(this.worldType == 2)
            	{
            		button.displayString = "Smooth Terrain";
            	}
            	else if(this.worldType == 3)
            	{
            		button.displayString = "Flat Terrain";
            	}
            }
            else if(button.id == 0)
            {
            	ScreenEffects.canChangeHealth = false;
            	ScreenEffects.playerHealth = 20F;
            	this.buttonList.clear();
            	MiystEngine.miystengine.entityRenderer.setLayDown = true;
            	if(this.buttonList.isEmpty())
            	{
            		this.generateWorld = true;		
            	}
            }
            else if(button.id == 16)
            {
                if (this.GameType.equals("Survival"))
                {
                    this.GameType = "Forge";
                }
                else if (this.GameType.equals("Forge"))
                {
                    this.GameType = "Survival";
                }
            }
            else if(button.id == 10)
            {
                if (this.difficulty.equals("Easy"))
                {
                    this.difficulty = "Normal";
                }
                else if (this.difficulty.equals("Normal"))
                {
                    this.difficulty = "Hard";
                }
                else if (this.difficulty.equals("Hard"))
                {
                    this.difficulty = "Hardcore";
                }
                else if (this.difficulty.equals("Hardcore"))
                {
                    this.difficulty = "Easy";
                }
            }
            else if(button.id == 2 && this.badlandspots < 20)
            {
             ++this.badlandspots;
            }
            else if (button.id == 3 && this.badlandspots > 0)
            {
             --this.badlandspots;
            }
            else if(button.id == 5 && this.radiation < 15)
            {
             ++this.radiation;
            }
            else if(button.id == 4 && this.radiation > 0)
            {
             --this.radiation;
            }
            else if(button.id == 8 && this.fogMeters < 20)
            {
             ++this.fogMeters;
            }
            else if(button.id == 17 && this.fogMeters > 0)
            {
             --this.fogMeters;
            }
            
            else if(button.id == 23 && this.waterHeightFromTides < 5)
            {
             ++this.waterHeightFromTides;
            }
            else if(button.id == 24 && this.waterHeightFromTides > 0)
            {
             --this.waterHeightFromTides;
            }
            
            else if(button.id == 6 && this.gravity < 24.79F)
            {
             this.gravityClicked += 10;
             this.gravity += 0.02F*this.gravityClicked;
            }
            else if(button.id == 7 && this.gravity > 1.622)
            {
             this.gravityClicked += 10;
             this.gravity -= 0.02F*this.gravityClicked;
            }
            else if(button.id == 19 && this.tempature < 12.0F)
            {
             this.tempClicked += 5;
             this.tempature += 0.5F*this.tempClicked;
            }
            else if(button.id == 18 && this.tempature > -45.0F)
            {
             this.tempClicked += 5;
             this.tempature -= 0.5F*this.tempClicked;
            }
            else if(button.id == 20 && this.FungusGrowth < 15)
            {
             this.FungusGrowth += 1;
            }
            else if(button.id == 21 && this.FungusGrowth > 0)
            {
             this.FungusGrowth -= 1;
            }
        }
    }
    
    private String areaZone()
    {
    	int i = MiystEngine.miystengine.rand.nextInt(9);
    	if(i == 0)
    	{
    		return "A";
    	}
    	else if(i == 1)
    	{
    		return "B";
    	}
    	else if(i == 2)
    	{
    		return "C";
    	}
    	else if(i == 3)
    	{
    		return "D";
    	}
    	else if(i == 4)
    	{
    		return "E";
    	}
    	else return "";
    }
    
    private void WorldName()
    {
        if(MathHelper.stringNullOrLengthZero(this.worldname) && !this.stopShowingText)
        {
            this.worldname = "Structure World 1204, Zone " + MiystEngine.miystengine.rand.nextInt(3) + MiystEngine.miystengine.rand.nextInt(9) + this.areaZone() + MiystEngine.miystengine.rand.nextInt(2) + MiystEngine.miystengine.rand.nextInt(9);
        }
        this.worldname = this.worldname.trim();
    }

    /**
     * "Called when the screen is unloaded. Used to disable keyboard repeat events."
     */
    public void onGuiClosed()
    {
        Keyboard.enableRepeatEvents(false);
    }
    
    /**
     * Called when the mouse is clicked.
     */
    protected void mouseClicked(int x, int y, int eventButton)
    {
        super.mouseClicked(x, y, eventButton);
    }

    public boolean showHint = false;
    
    /**
     * Draws the screen and all the components in it.
     */
    public void drawScreen(int x, int y)
    {	
       GL11.glPushMatrix();
       this.drawTextured(0, 0, this.width,this.height,0,0, backGroundTexture);
       GL11.glPopMatrix();
       if(!this.buttonList.isEmpty())
       { 
        for (int i = 0; i < this.buttonList.size(); ++i)
        {  
        	ButtonBasic button = ((ButtonBasic)this.buttonList.get(i));
        	GL11.glPushMatrix();
        	if(button.id < 2)
        	{
	        	GL11.glTranslatef(button.xPosition+(button.width / 2), button.yPosition+(button.height/2), 0);
	            GL11.glScalef(1F + (button.rotate / 30F), 1F + (button.rotate / 30F), 1F + (button.rotate / 30F));
	            GL11.glTranslatef(-(button.xPosition+(button.width / 2)), -(button.yPosition+(button.height/2)), 0);
	            boolean hoverState = button.enabled && button.visible && x >= button.xPosition && y >= button.yPosition && x < button.xPosition + button.width && y < button.yPosition + button.height;
	          
	            if(button.movePlank < 2000 && hoverState)
	            {
	            	if(button.swingBack&&button.rotate > 10){button.swingBack=false;}	
	            	if(!button.swingBack&&button.rotate<-10){button.swingBack=true;}	
	            	for(int q =0;q<25;++q)
	            	{
	            		if(button.swingBack)
	            		{
	            			button.rotate+=0.001;
	            		}
	            		else if(!button.swingBack)
	            		{
	            			button.rotate-=0.001;	
	            		}
	            	}
	            	++button.movePlank;
	            }
	            else if(button.rotate>0)
	            {
	            	for(int q =0;q<25;++q)
	            	{
	            		if(button.rotate>0){button.rotate-=0.001;}	
	            		else if(!hoverState){button.movePlank=0;}
	            	}
	            }
	            else if(button.rotate<0)
	            {
	            	for(int q =0;q<25;++q)
	            	{
	            		if(button.rotate<0){button.rotate+=0.001;}	
	            		else if(!hoverState){button.movePlank=0;}
	            	}
	            }
        	}
            button.drawButton(MiystEngine.miystengine, x, y);
            GL11.glPopMatrix();
        }
        
    	if(this.gravityClicked > 2)
    	{
    		--this.gravityClicked;
    	}
    	if(this.tempClicked > 2)
    	{
    		--this.tempClicked;
    	}
    	if(this.tempature > 32.0)
        {
         this.tempature = 32.0F;
        }
    	if(this.tempature < -15.0F)
        {
         this.tempature = -15.000F;
        }

    	if(this.gravity > 24.79F)
        {
         this.gravity = 24.79F;
        }
    	if(this.gravity < 1.622F)
        {
         this.gravity = 1.622F;
        }
       
        if(this.hintText == "" || this.stopShowingText)
        {
        	this.drawCenteredStringWithColor(this.fontRendererObj, this.worldname, this.width / 2, 70, this.alphaStartString,this.alphaStartString,this.alphaStartString,1.0F);
        }
        else
        {
        	this.drawCenteredStringWithColor(this.fontRendererObj, this.hintText, this.width / 2, 70, this.alphaStartString,this.alphaStartString,this.alphaStartString,1.0F);
        }
        
        
        this.drawCenteredStringWithColor(this.fontRendererObj, "World Seed", this.width / 2, 280, 1F,1F,1F,1F);
        this.drawCenteredStringWithColor(this.fontRendererObj, this.worldseed, this.width / 2, 300, 1F,1F,1F,1F);
        
        
        this.drawCenteredString(this.fontRendererObj, "Badland spots: "+this.badlandspots, this.width / 2 , 131, -6250336);
        this.drawCenteredString(this.fontRendererObj, "Radiation: "+this.radiation, this.width / 2 -49, 153, -6250336);
        String gravityA = this.gravity+"000000";
        String gravityA2 = gravityA.substring(0,4);
        if(Float.parseFloat(gravityA) > 9.00F)
        {
        	gravityA2 = gravityA.substring(0,5);
        }
        if(this.MetersorFeet)
        {
        String feet = ""+(Float.parseFloat(gravityA2)/3.2808399F);	
        this.drawCenteredString(this.fontRendererObj, "Gravity: "+feet.substring(0,4)+" Feet/s^2", this.width / 2 +85, 151, -6250336);
        }
        else if(!this.MetersorFeet)
        {
        this.drawCenteredString(this.fontRendererObj, "Gravity: "+gravityA2+" m/s^2", this.width / 2 +85, 151, -6250336);
        }
        this.drawCenteredString(this.fontRendererObj, "Difficulty: "+this.difficulty, this.width / 2 -64, 173, -6250336);
        if(this.MetersorFeet)
        {
        String feet = (""+this.fogMeters*3.2808399);	
        if(feet.length() < 4){feet = (""+this.fogMeters*3.2808399).substring(0, 3);}
        else{feet = (""+this.fogMeters*3.2808399).substring(0, 5);}
        this.drawCenteredString(this.fontRendererObj, "Fog Density: "+feet+" Feet", this.width / 2 +81, 174, -6250336);
        }
        else if(!this.MetersorFeet)
        {
        this.drawCenteredString(this.fontRendererObj, "Fog Density: "+this.fogMeters+" meters", this.width / 2 +80, 174, -6250336);
        }
        if(this.MetersorFeet)
        {
        String temp = (""+(this.tempature * 1.8F + 32F));	
        this.drawCenteredString(this.fontRendererObj, "Temperature: " + temp + "0F", this.width / 2 -64, 198, -6250336);
        }
        else if(!this.MetersorFeet)
        {
        this.drawCenteredString(this.fontRendererObj, "Temperature: " + this.tempature + "0C", this.width / 2 -59, 198, -6250336);
        }
        if(this.MetersorFeet)
        {
        String feet = (""+this.FungusGrowth*3.2808399);	
        if(feet.length() < 4){feet = (""+this.FungusGrowth*3.2808399).substring(0, 3);}
        else{feet = (""+this.FungusGrowth*3.2808399).substring(0, 5);}
        this.drawCenteredString(this.fontRendererObj, " Fungus Growth: "+feet+" feet", this.width / 2 + 95, 196, -6250336);
        }
        else if(!this.MetersorFeet)
        {
        this.drawCenteredString(this.fontRendererObj, " Fungus Growth: "+this.FungusGrowth+" meters", this.width / 2 + 95, 196, -6250336);    	
        }
        
        this.drawCenteredString(this.fontRendererObj, "Create", this.width / 2, 20, -1);
        this.drawCenteredString(this.fontRendererObj, "Game Mode: "+this.GameType, this.width / 2 , 220, -6250336);
        
        if(!this.MetersorFeet)
        {
        	this.drawCenteredString(this.fontRendererObj, "Water Tides Height: " + this.waterHeightFromTides + " meters", this.width / 2 , 250, -6250336);
        }
        else
        {
        	 String feet = (""+this.waterHeightFromTides*3.2808399);	
             if(feet.length() < 4){feet = (""+this.waterHeightFromTides*3.2808399).substring(0, 3);}
             else{feet = (""+this.waterHeightFromTides*3.2808399).substring(0, 5);}
        	this.drawCenteredString(this.fontRendererObj, "Water Tides Height: " + feet + " feet", this.width / 2 , 250, -6250336);
        }
        
        this.drawString(this.fontRendererObj, "Enter Structure World Name", this.width / 2 - 70, 47, -6250336);
      }
      if(this.generateWorld)
      {
	       GL11.glPushMatrix();
	       GL11.glEnable(GL11.GL_BLEND);
	       GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
	       this.drawString(this.fontRendererObj, "Generate Structure World", this.width / 2 - 70, 47, -6250336);   
	       this.drawString(this.fontRendererObj, "      Please wait...    ", this.width / 2 - 70, 87, -6250336);   
	       GL11.glPopMatrix();
	       this.removeButtonsTimer++;
	       if(this.removeButtonsTimer > 50)
	       {
		       this.generateWorld();
		       this.generateWorld = false;
		       this.removeButtonsTimer = 0;
		       this.generateWorld = false;
	       }
      }
    }
    
    private int removeButtonsTimer = 0;
    public static String getFileName;
    
    private void generateWorld()
    {
    	LoadingScreenGui screen = new LoadingScreenGui(this.worldname);
    	MiystEngine.miystengine.displayScreenGui(screen);
        MiystEngine.miystengine.setScreenLock();
        this.getFileName = this.worldname;
        StructureWorldInfo info = new StructureWorldInfo(this.worldname);
        info.setFolderName(this.worldname);
        info.temperature = this.tempature;
        info.fungusGrowth = this.FungusGrowth;
        info.gravity = this.gravity;
        info.difficulty = this.difficulty;
        info.radiation = this.radiation;
        info.setGameType(this.GameType.equals("Forge") ? info.theGameType.FORGE :info.theGameType.SURVIVAL );
        
        if(worldseed.isEmpty())
        {
        	worldseed = "" + MiystEngine.miystengine.rand.nextInt(999999999);
        }
        
        MiystEngine.miystengine.entityRenderer.terrain = new Terrain(this.worldname,Integer.parseInt(worldseed));
        
        info.seed = worldseed;
        
        if(info.seed.equals("NOTSET") || info.seed.equals(""))
    	{
        	info.seed = "" + MiystEngine.miystengine.rand.nextInt(999999999);
    	}
        MiystEngine.miystengine.entityRenderer.terrain.createWorldmap(this.waterHeightFromTides,Integer.parseInt(info.seed),info.getFolderName(),this.worldType,Terrain.biomeDifferences);  
     
        IntegratedServer.worldInfo = info;
       
        IntegratedServer.worldInfo.saveDataOfStructureWorld();
        
        MiystEngine.miystengine.setScreenUnLock();
        SelectWorldGui screenMenu = new SelectWorldGui(this);
        MiystEngine.miystengine.displayScreenGui(screenMenu);
        MiystEngine.miystengine.entityRenderer.timeJoinWorld = 1;
        //MiystEngine.miystengine.theWorld.getStructureWorldInfo().saveDataOfStructureWorld();
    }

    public void getWorldInfo(StructureWorldInfo worldinfo)
    {
        this.Difficulty = worldinfo.getDifficulty();
        this.gravity = worldinfo.getGravity();
        this.FungusGrowth = worldinfo.getFungusGrowth();
        if (worldinfo.getGameType().isSurvival())
        {
            this.GameType = "Survival";
        }
        else if (worldinfo.getGameType().isForgeMode())
        {
            this.GameType = "Forge";
        }
    }
    
  
    /**
     * Fired when a key is typed.
     */
    protected void keypressed(char c, int i)
    {
    	this.stopShowingText = true;
        if (i == 28 || i == 156)
        {
        	this.actionPerformed((ButtonBasic)this.buttonList.get(0));
        }
        if(!this.selectedSeedOrWorldname)
        {
        	if(Keyboard.isKeyDown(Keyboard.KEY_V) && (Keyboard.isKeyDown(Keyboard.KEY_LCONTROL) || Keyboard.isKeyDown(Keyboard.KEY_RCONTROL)))
	        {
	        	Clipboard cl = Toolkit.getDefaultToolkit().getSystemClipboard();
	            Transferable t = cl.getContents(this);
	            try {
	            	worldname += (String) t.getTransferData(DataFlavor.stringFlavor);
				} catch (UnsupportedFlavorException e) {
					e.printStackTrace();
				} catch (IOException e) {
				}
	        }
	        if(Keyboard.isKeyDown(Keyboard.KEY_BACK))
	        {
	        	worldname = worldname.substring(0, worldname.length() - 1);
	        }
	        else
	        {
	        	worldname += c;
	        }
        }
        else
        {
        	if(Keyboard.isKeyDown(Keyboard.KEY_V) && (Keyboard.isKeyDown(Keyboard.KEY_LCONTROL) || Keyboard.isKeyDown(Keyboard.KEY_RCONTROL)))
	        {
	        	Clipboard cl = Toolkit.getDefaultToolkit().getSystemClipboard();
	            Transferable t = cl.getContents(this);
	            try {
					worldseed += (String) t.getTransferData(DataFlavor.stringFlavor);
				} catch (UnsupportedFlavorException e) {
					e.printStackTrace();
				} catch (IOException e) {
				}
	        }
	        if(Keyboard.isKeyDown(Keyboard.KEY_BACK))
	        {
	        	worldseed = worldseed.substring(0, worldseed.length() - 1);
	        }
	        else if(worldseed.length() < 9 && (AcceptedKeyboardKeys.getNumber(c + "") != -2 || AcceptedKeyboardKeys.getNumber(c + "") != -1))
	        {
	        	worldseed += c;
	        }
        }
    }
}
