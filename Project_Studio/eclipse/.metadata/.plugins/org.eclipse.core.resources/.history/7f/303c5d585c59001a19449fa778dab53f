package nl.miystengine.client.gui;


public class FBORenderer
{	

 	public void updateCameraAndRender(float ticker)
    {    
    	  
    	  MiystEngine.miystengine.fbo.bindFrameBuffer();
          GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
          
          if(EntityRenderer.skyColor != null)
          {
        	  GL11.glClearColor(EntityRenderer.skyColor[0], EntityRenderer.skyColor[1], EntityRenderer.skyColor[2], EntityRenderer.skyColor[3]);
          }
          
          boolean isDisplayActive = Display.isActive();
          if (!isDisplayActive && (!Mouse.isButtonDown(1)))
          {
              if (MiystEngine.getSystemTime() - ttw.entityRenderer.prevFrameTime > 500L)
              {
                  this.ttw.displayInGameMenu();
              }
          }
          else
          {
        	  ttw.entityRenderer.prevFrameTime = MiystEngine.getSystemTime();
          }
          
	          if (this.ttw.inGameHasFocus && isDisplayActive)
	          {
	              float sens = this.mouseSensitivity;
	              float var4 = sens * sens * sens * 8.0F;
	              this.ttw.thePlayer.setAngles((float)Mouse.getDX() * var4, (float)Mouse.getDY() * var4 * RefreshShaderKeybinds.reverseMouse);
	          }

              ScaledResolution sr = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
              int X = Mouse.getX() * sr.getScaledWidth() / this.ttw.displayWidth;
              int Z = sr.getScaledHeight() - Mouse.getY() * sr.getScaledHeight() / this.ttw.displayHeight - 1;

              if (this.ttw.theWorld != null)
              {  	
            	ttw.entityRenderer.renderWorld(ticker);	
         		this.damage.renderScreen(this.ttw.displayWidth, this.ttw.displayHeight);
              	if (this.ttw.currentScreen != null)
                {
                    this.useFilter = false;
                }
              	else
              	{
              		this.useFilter = true;
              	}
              	
              	if(this.ttw.ingameGUI != null)
              	{
              		this.ttw.ingameGUI.renderGameOverlay(ticker);  
                    ScreenEffectsGui screen = new ScreenEffectsGui();
                    screen.renderScreen((int)(this.ttw.displayWidth / 3.8F), (int)(this.ttw.displayHeight / 3.8F));   
              	}
              	
                if(ttw.entityRenderer.passingTime.secondspassed)
                {
                	ttw.entityRenderer.passingTime.secondspassed = false;
                }
              }
              else
              {
              	 GL11.glViewport(0, 0, this.ttw.displayWidth, this.ttw.displayHeight);
                 GL11.glMatrixMode(GL11.GL_PROJECTION);
                 GL11.glLoadIdentity();
                 GL11.glMatrixMode(GL11.GL_MODELVIEW);
                 GL11.glLoadIdentity();
                 this.setupOverlayRendering();
              }
              GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
              try
              {
            	 if(this.ttw.currentScreen != null)
            	 {
            	 	this.ttw.currentScreen.drawScreen(X, Z);
            	 }
              }
              catch (Throwable var12)
              {
            	  var12.printStackTrace();
                  System.out.println("[Client thread/ERROR]: " + var12.getMessage());
              }
           
          MiystEngine.miystengine.fbo.unbindFrameBuffer();
          
          MiystEngine.miystengine.fbo.resolveToFBO(MiystEngine.miystengine.fbo_Out);
          
          MiystEngine.miystengine.fbo.framebufferRender(0,0,MiystEngine.miystengine.displayWidth,MiystEngine.miystengine.displayHeight,MiystEngine.miystengine.fbo_Out.getColourTexture());
      }
 }