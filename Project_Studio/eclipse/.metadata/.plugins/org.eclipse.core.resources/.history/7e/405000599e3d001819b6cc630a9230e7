package nl.thestructureworld.client.renderer.texture;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.IntBuffer;

import javax.imageio.ImageIO;

import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.renderer.GLAllocation;
import nl.thestructureworld.client.renderer.OpenGlHelper;
import nl.thestructureworld.client.resources.IResourceManager;
import nl.thestructureworld.util.ResourceLocation;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL14;

public class TextureUtil
{
    private static final Logger logger = LogManager.getLogger();
    private static final IntBuffer dataBuffer = GLAllocation.createDirectIntBuffer(4194304);
    public static final DynamicTexture missingTexture = new DynamicTexture(16, 16);
    public static final int[] missingTextureData = missingTexture.getTextureData();
    private static int field_147958_e = -1;
    private static int field_147956_f = -1;
    private static float field_152779_g = -1.0F;
    private static final int[] field_147957_g;

    public static int glGenTextures()
    {	
    	return GL11.glGenTextures();
    }

    public static int uploadTextureImage(int TEXTURE, BufferedImage BI)
    {
    	allocateTexture(TEXTURE, 0, BI.getWidth(), BI.getHeight(), 1.0F);
    	GL11.glBindTexture(GL11.GL_TEXTURE_2D, TEXTURE);
   	 	int var5 = BI.getWidth();
        int var6 = BI.getHeight();
        int var7 = 4194304 / var5;
        int[] var8 = new int[var7 * var5];
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
        for (int var9 = 0; var9 < var5 * var6; var9 += var5 * var7)
        {
            int var10 = var9 / var5;
            int var11 = Math.min(var7, var6 - var10);
            int var12 = var5 * var11;
            BI.getRGB(0, var10, var5, var11, var8, 0, var5);
            int[] var3 = var8;
            dataBuffer.clear();
            dataBuffer.put(var3, 0, var12);
            dataBuffer.position(0).limit(var12);
            GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D,0,0,0+var10, var5, var11, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, dataBuffer);
        }
        return TEXTURE;
    }

    public static void allocateTexture(int TEXTURE, int p_147946_1_, int p_147946_2_, int p_147946_3_, float p_147946_4_)
    {
        GL11.glDeleteTextures(TEXTURE);
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, TEXTURE);
        if (OpenGlHelper.anisotropicFilteringSupported)
        {
            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, 34046, p_147946_4_);
        }
        for (int var5 = 0; var5 <= p_147946_1_; ++var5)
        {
            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, var5, GL11.GL_RGBA, p_147946_2_ >> var5, p_147946_3_ >> var5, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)null);
        }
    }


    public static int[] readImageData(IResourceManager p_110986_0_, ResourceLocation p_110986_1_) throws IOException
    {
        BufferedImage var2 = ImageIO.read(p_110986_0_.getResource(p_110986_1_).getInputStream());
        int var3 = var2.getWidth();
        int var4 = var2.getHeight();
        int[] var5 = new int[var3 * var4];
        var2.getRGB(0, 0, var3, var4, var5, 0, var3);
        return var5;
    }

    public static int[] updateAnaglyph(int[] p_110985_0_)
    {
        int[] var1 = new int[p_110985_0_.length];
        for (int var2 = 0; var2 < p_110985_0_.length; ++var2)
        {
            int var3 = p_110985_0_[var2] >> 24 & 255;
            int var4 = p_110985_0_[var2] >> 16 & 255;
            int var5 = p_110985_0_[var2] >> 8 & 255;
            int var6 = p_110985_0_[var2] & 255;
            int var7 = (var4 * 30 + var5 * 59 + var6 * 11) / 100;
            int var8 = (var4 * 30 + var5 * 70) / 100;
            int var9 = (var4 * 30 + var6 * 70) / 100;
            var1[var2] = var3 << 24 | var7 << 16 | var8 << 8 | var9;
        }
        return var1;
    }

    public static int[] func_147948_a(int[] p_147948_0_, int p_147948_1_, int p_147948_2_, int p_147948_3_)
    {
        int var4 = p_147948_1_ + 2 * p_147948_3_;
        int var5;
        int var6;
        for (var5 = p_147948_2_ - 1; var5 >= 0; --var5)
        {
            var6 = var5 * p_147948_1_;
            int var7 = p_147948_3_ + (var5 + p_147948_3_) * var4;
            int var8;
            for (var8 = 0; var8 < p_147948_3_; var8 += p_147948_1_)
            {
                int var9 = Math.min(p_147948_1_, p_147948_3_ - var8);
                System.arraycopy(p_147948_0_, var6 + p_147948_1_ - var9, p_147948_0_, var7 - var8 - var9, var9);
            }
            System.arraycopy(p_147948_0_, var6, p_147948_0_, var7, p_147948_1_);
            for (var8 = 0; var8 < p_147948_3_; var8 += p_147948_1_)
            {
                System.arraycopy(p_147948_0_, var6, p_147948_0_, var7 + p_147948_1_ + var8, Math.min(p_147948_1_, p_147948_3_ - var8));
            }
        }
        for (var5 = 0; var5 < p_147948_3_; var5 += p_147948_2_)
        {
            var6 = Math.min(p_147948_2_, p_147948_3_ - var5);
            System.arraycopy(p_147948_0_, (p_147948_3_ + p_147948_2_ - var6) * var4, p_147948_0_, (p_147948_3_ - var5 - var6) * var4, var4 * var6);
        }
        for (var5 = 0; var5 < p_147948_3_; var5 += p_147948_2_)
        {
            var6 = Math.min(p_147948_2_, p_147948_3_ - var5);
            System.arraycopy(p_147948_0_, p_147948_3_ * var4, p_147948_0_, (p_147948_2_ + p_147948_3_ + var5) * var4, var4 * var6);
        }
        return p_147948_0_;
    }

    public static void func_147953_a(int[] p_147953_0_, int p_147953_1_, int p_147953_2_)
    {
        int[] var3 = new int[p_147953_1_];
        int var4 = p_147953_2_ / 2;
        for (int var5 = 0; var5 < var4; ++var5)
        {
            System.arraycopy(p_147953_0_, var5 * p_147953_1_, var3, 0, p_147953_1_);
            System.arraycopy(p_147953_0_, (p_147953_2_ - 1 - var5) * p_147953_1_, p_147953_0_, var5 * p_147953_1_, p_147953_1_);
            System.arraycopy(var3, 0, p_147953_0_, (p_147953_2_ - 1 - var5) * p_147953_1_, p_147953_1_);
        }
    }

    static
    {
        int var0 = -16777216;
        int var1 = -524040;
        int[] var2 = new int[] { -524040, -524040, -524040, -524040, -524040, -524040, -524040, -524040};
        int[] var3 = new int[] { -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216};
        int var4 = var2.length;
        for (int var5 = 0; var5 < 16; ++var5)
        {
            System.arraycopy(var5 < var4 ? var2 : var3, 0, missingTextureData, 16 * var5, var4);
            System.arraycopy(var5 < var4 ? var3 : var2, 0, missingTextureData, 16 * var5 + var4, var4);
        }
        missingTexture.updateDynamicTexture();
        field_147957_g = new int[4];
    }
}
