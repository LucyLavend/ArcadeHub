package nl.thestructureworld.client;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.ParameterizedType;
import java.net.Authenticator;
import java.net.InetSocketAddress;
import java.net.PasswordAuthentication;
import java.net.Proxy;
import java.net.Proxy.Type;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

import joptsimple.ArgumentAcceptingOptionSpec;
import joptsimple.NonOptionArgumentSpec;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import nl.thestructureworld.client.gui.IngameMenuAndOptionsGui;
import nl.thestructureworld.client.shaders.Loader;
import nl.thestructureworld.client.shaders.OBJLoader;
import nl.thestructureworld.client.shaders.RawModel;
import nl.thestructureworld.util.Session;

import com.google.common.collect.HashMultimap;
import com.google.gson.Gson;

public class Main
{
    public static boolean backup = true;
     
    public static void main(String[] option)
    {
    	if(backup){FileBasicJava.copyFile();}
        System.setProperty("java.net.preferIPv4Stack", "true");
        OptionParser var1 = new OptionParser();
        var1.allowsUnrecognizedOptions();
        var1.accepts("fullscreen");
        ArgumentAcceptingOptionSpec server = var1.accepts("server").withRequiredArg();
        ArgumentAcceptingOptionSpec var3 = var1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(25565), new Integer[0]);
        ArgumentAcceptingOptionSpec var4 = var1.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]);
        ArgumentAcceptingOptionSpec var5 = var1.accepts("assetsDir").withRequiredArg().ofType(File.class);
        ArgumentAcceptingOptionSpec var7 = var1.accepts("proxyHost").withRequiredArg();
        ArgumentAcceptingOptionSpec var8 = var1.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class);
        ArgumentAcceptingOptionSpec var9 = var1.accepts("proxyUser").withRequiredArg();
        ArgumentAcceptingOptionSpec var10 = var1.accepts("proxyPass").withRequiredArg();
        ArgumentAcceptingOptionSpec var11 = var1.accepts("username").withRequiredArg().defaultsTo("Player" + TheStructureWorld.getSystemTime() % 1000L, new String[0]);
        ArgumentAcceptingOptionSpec var12 = var1.accepts("uuid").withRequiredArg();
        ArgumentAcceptingOptionSpec var13 = var1.accepts("accessToken").withRequiredArg().required();
        ArgumentAcceptingOptionSpec var14 = var1.accepts("version").withRequiredArg().required();
        ArgumentAcceptingOptionSpec var17 = var1.accepts("userProperties").withRequiredArg().required();
        ArgumentAcceptingOptionSpec var18 = var1.accepts("assetIndex").withRequiredArg();
        ArgumentAcceptingOptionSpec var19 = var1.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]);
        NonOptionArgumentSpec var20 = var1.nonOptions();
        OptionSet Option = var1.parse(option);
        List var22 = Option.valuesOf(var20);
        String var23 = (String)Option.valueOf(var7);
        Proxy prox = Proxy.NO_PROXY;
        if (var23 != null)
        {
            try{prox = new Proxy(Type.SOCKS, new InetSocketAddress(var23, ((Integer)Option.valueOf(var8)).intValue()));}catch (Exception var41){;}
        }
        TheStructureWorld tsw = new TheStructureWorld(new Session(Option.has(var12) ? (String)var12.value(Option) : (String)var11.value(Option), (String)var13.value(Option)), Option.has("fullscreen"), prox, HashMultimap.create(), Option.has(var18) ? (String)var18.value(Option) : null);
        String Server = (String)Option.valueOf(server);
        if (Server != null){tsw.setServer(Server,((Integer)Option.valueOf(var3)).intValue());}
        Runtime.getRuntime().addShutdownHook(new Thread("Client Shutdown Thread")
        {
            public void run()
            {
            	TheStructureWorld.stopIntegratedServer();
            }
        });
        if (!var22.isEmpty())
        {
            System.out.println("Completely ignored arguments: " + var22);
        }
        Thread.currentThread().setName("Client thread");
        tsw.run();
    }
    
     
}
