package nl.miystengine.world;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import nl.miystengine.client.ExceptionA;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.entity.Entity;
import nl.miystengine.entity.EntityPlayer;
import nl.miystengine.entity.PlayerMPEntity;
import nl.miystengine.server.management.PlayerManager;
import nl.miystengine.server.management.MiystEngineServer;
import nl.miystengine.util.IProgressUpdate;
import nl.miystengine.util.ReportedException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.common.collect.Lists;

public class WorldServer extends World
{
    private static final Logger logger = LogManager.getLogger();
    private final MiystEngineServer Server;
    private final PlayerManager thePlayerManager;
    private Set pendingTickListEntriesHashSet;

    /** All work to do in future ticks. */
    private TreeSet pendingTickListEntriesTreeSet;

    /** Whether or not level saving is enabled */
    public boolean levelSaving;

    /** is false if there are no players */
    private boolean allPlayersSleeping;
    public int updateEntityTick;

    private int field_147489_T;
    private List pendingTickListEntriesThisTick = new ArrayList();

    public WorldServer(MiystEngineServer gen_functioni_i45284_1_, String gen_functioni_i45284_3_, int gen_functioni_i45284_4_, StructureWorldInfo gen_functioni_i45284_5_)
    {
        super(gen_functioni_i45284_3_, gen_functioni_i45284_5_, new WorldProvider());
        this.Server = gen_functioni_i45284_1_;
        this.thePlayerManager = new PlayerManager(this);

        if (this.pendingTickListEntriesHashSet == null)
        {
            this.pendingTickListEntriesHashSet = new HashSet();
        }

        if (this.pendingTickListEntriesTreeSet == null)
        {
            this.pendingTickListEntriesTreeSet = new TreeSet();
        }
    }
   
    

    /**
     * Runs a single tick for the world
     */
    public void tick()
    {
        super.tick();

        if (this.difficultySetting == null)
        {
            this.difficultySetting = this.StructureWorldInfo.getDifficulty();
        }
 
        this.tickUpdates(false);
        this.thePlayerManager.updatePlayerInstances();
    }
   
    /**
     * Sets a new spawn location by finding an uncovered TerrainObject at a random (x,z) location in the Area.
     */
    public void setSpawnLocation()
    {
        if (this.StructureWorldInfo.getSpawnY() <= 0)
        {
            this.StructureWorldInfo.setSpawnY(64);
        }

        int xS = this.StructureWorldInfo.getSpawnX();
        int zS = this.StructureWorldInfo.getSpawnZ();
        int var3 = 0;

        

        this.StructureWorldInfo.setSpawnX(xS);
        this.StructureWorldInfo.setSpawnZ(zS);
    }

   

 

    /**
     * Updates (and cleans up) entities and tile entities
     */
    public void updateEntities()
    {
        if (this.playerEntities.isEmpty())
        {
            if (this.updateEntityTick++ >= 1200)
            {
                return;
            }
        }
        else
        {
        	this.updateEntityTick = 0;
        }

        super.updateEntities(false);
    }


    /**
     * Runs through the list of updates to run and ticks them
     */
    public boolean tickUpdates(boolean gen_functioni_72955_1_)
    {
        int var2 = this.pendingTickListEntriesTreeSet.size();

        if (var2 != this.pendingTickListEntriesHashSet.size())
        {
            throw new IllegalStateException("TickNextTick list out of synch");
        }
        else
        {
            if (var2 > 1000)
            {
                var2 = 1000;
            }
          
            Iterator var14 = this.pendingTickListEntriesThisTick.iterator();

            this.pendingTickListEntriesThisTick.clear();
            return !this.pendingTickListEntriesTreeSet.isEmpty();
        }
    }

    /**
     * Will update the entity in the world if the Area the entity is in is currently loaded or its forced to update.
     * Args: entity, forceUpdate
     */
    public void updateEntityWithOptionalForce(Entity gen_functioni_72866_1_, boolean gen_functioni_72866_2_)
    {
        super.updateEntityWithOptionalForce(gen_functioni_72866_1_, gen_functioni_72866_2_);
    }

      /**
     * Called when checking if a certain TerrainObject can be mined or not. The 'spawn safe zone' check is located here.
     */
    public boolean canMineTerrainObject(EntityPlayer gen_functioni_72962_1_, int gen_functioni_72962_2_, int gen_functioni_72962_3_, int gen_functioni_72962_4_)
    {
    	return !this.Server.isTerrainObjectProtected(this, gen_functioni_72962_2_, gen_functioni_72962_3_, gen_functioni_72962_4_, gen_functioni_72962_1_);
    }

    protected void initialize(StructureWorldInfo gen_functioni_72963_1_)
    {

        if (this.pendingTickListEntriesHashSet == null)
        {
            this.pendingTickListEntriesHashSet = new HashSet();
        }

        if (this.pendingTickListEntriesTreeSet == null)
        {
            this.pendingTickListEntriesTreeSet = new TreeSet();
        }

        this.createSpawnPosition(gen_functioni_72963_1_);
        super.initialize(gen_functioni_72963_1_);
    }

    /**
     * creates a spawn position at random within 256 BasicEntityRender of 0,0
     */
    protected void createSpawnPosition(StructureWorldInfo gen_functioni_73052_1_)
    {
        if (!this.provider.canRespawnHere())
        {
            this.StructureWorldInfo.setSpawnPosition(0, this.provider.getAverageGroundLevel(), 0);
        }
        else
        {
            this.findingSpawnPoint = true;
            this.StructureWorldInfo.setSpawnPosition(0, this.provider.getAverageGroundLevel(), 0);
            this.findingSpawnPoint = false;  
        }
    }


    /**
     * Saves the Areas to disk.
     */
    protected void saveLevel() throws ExceptionA
    {
        this.checkSessionLock();
    }

    public int ViewDistance()
    {
        return this.Server.getConfigurationManager().getViewDistance();
    }

    public MiystEngineServer getWorldServer()
    {
        return this.Server;
    }

    public PlayerManager getPlayerManager()
    {
        return this.thePlayerManager;
    }
 
}
