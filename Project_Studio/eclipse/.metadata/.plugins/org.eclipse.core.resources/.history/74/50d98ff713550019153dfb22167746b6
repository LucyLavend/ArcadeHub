package nl.thestructureworld.client.renderer.terrain;

import java.awt.Color;
import java.awt.Graphics2D;
import java.util.Random;

import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.BasicEntityRender;
import nl.thestructureworld.client.renderer.entity.EntityPlantRenderer;
import nl.thestructureworld.client.renderer.entity.EntityRenderCustomTexture;
import nl.thestructureworld.client.renderer.entity.EntityRenderSmallTree;
import nl.thestructureworld.client.renderer.entity.EntityRockRenderer;
import nl.thestructureworld.client.renderer.entity.RenderFrozenPalm;
import nl.thestructureworld.client.renderer.entity.bulletsandgrenades.EntityM15MineRenderer;

public class TerrainObjectList
{
	public Random rand = new Random();
	public int seed;
	
	public Graphics2D genearteTerrain(Graphics2D grapFinal,String CoordCode,int x ,int z,float heightStandard)
	{
		int xFixed = (int)(x / 100) * 100;
		int zFixed = (int)(z / 100) * 100;
		String areaCode = "" + ((xFixed + 2) * (zFixed + 5) * seed);
		
		int maxHeight = 9;
  		
  		for(int h = maxHeight; h>0;--h) 
  		{
  			if(CoordCode.contains("9"))
  			{
  				//grapFinal.setColor(new Color(((int)heightStandard) * 0.00392156862745098F, h * 0.00392156862745098F, 0F, 1F));
  				//grapFinal.fillOval(x - (h / 2), z - (h / 2) , h * 2, h * 2);
  			}
  			else if(CoordCode.contains("5"))
  			{
  				//grapFinal.setColor(new Color(((int) heightStandard + (h - maxHeight)) * 0.00392156862745098F, h * 0.00392156862745098F, 0F, 1F));
  				//grapFinal.fillOval(x - (h / 2), z - (h / 2) , h,h);
  			}
  			else
  			{
  				//grapFinal.setColor(new Color(((int)heightStandard - 1) * 0.00392156862745098F, (9 - h) * 0.00392156862745098F, 0F, 1F));
  				//grapFinal.fillOval(x - (h / 2), z - (h / 2) , h * 2, h * 2);
  			}
  			
  			
  			
  			
  			
  				//Mountain 1
	  			//grapFinal.setColor(new Color(((int) heightStandard - (h - maxHeight)) * 0.00392156862745098F, h * 0.00392156862745098F, 0F, 1F));
				//grapFinal.fillOval(x - (h / 2), z - (h / 2) , h * 2,h * 2);
  			
  		}
  		return grapFinal;
	}
	
	public float generateAtGrassTerrain(String areaCode,int x,int z,String blendmapType)
	{
		if(areaCode.contains("121"))
		{
			return 2;
		}
		else if(areaCode.contains("4625"))
		{
			return 3;
		}
		else if(areaCode.contains("8353"))
		{
			return 4;
		}
		else if(areaCode.contains("151"))
		{
			return 5;
		}
		else if(areaCode.contains("973"))
		{
			return 6;
		}
		else if(areaCode.contains("251"))
		{
			return 7;
		}
		else if(areaCode.contains("001"))
		{
			return 8;
		}
		else
		{
			return 0;
		}
	}
	
	public float generateAtRockTerrain(String areaCode,int x,int z)
	{
		float ir = createIceRocks(areaCode, x, z);
		if(ir != 0)
		{
			return ir;
		}
		else return 0;
	}
	
	public float generateAtGroundTerrain(String areaCode,int x,int z)
	{
		float ir = createIceRocks(areaCode, x, z);
		float sf = createSmallTreeForest(areaCode, x, z);
		
		if(ir != 0)
		{
			return ir;
		}
		else if(sf != 0)
		{
			return sf;
		}
		else return 0;
	}

	public float generateAtBasicTerrain(String areaCode,int x,int z)
	{
		float c = createPineForest(areaCode, x, z);
		float mf = createMineField(areaCode, x, z);
		float sf = createSmallTreeForest(areaCode, x, z);
		
		if(c != 0)
		{
			return c;
		}
		else if(mf != 0)
		{
			return mf;
		}
		else if(sf != 0)
		{
			return sf;
		}
		else if(areaCode.contains("9233"))
		{
			return 6;
		}
		else if(areaCode.contains("1535"))
		{
			return 7;
		}
		else if(areaCode.contains("100"))
		{
			return 8;
		}
		else if(areaCode.contains("008"))
		{
			return 9;
		}
		else if(areaCode.contains("1015"))
		{
			return 10;
		}
		else if(areaCode.contains("33653"))
		{
			return 11;
		}
		else if(areaCode.contains("18416"))
		{
			return 12;
		}
		else if(areaCode.contains("14621"))
		{
			return 13;
		}
		else if(areaCode.contains("16132"))
		{
			return 14;
		}
		else
		{
			return 0;
		}
	}
	
	/**
	 * Generates a mine field
	 */
	public float createSmallTreeForest(String areaCode,int x,int z)
	{
		int xFixed = (int)(x / 100) * 100;
		int zFixed = (int)(z / 100) * 100;
		String code = "" + ((xFixed + 2) * (zFixed + 5) * seed);
	
		if(code.contains("29"))
		{
			if(areaCode.contains("4971"))
			{
				return 3;
			}
			else if(areaCode.contains("7552"))
			{
				return 4;
			}
			else if(areaCode.contains("743"))
			{
				return 5;
			}
			else return 0;
		}
		else return 0;
	}
	
	/**
	 * Generates a mine field
	 */
	public float createMineField(String areaCode,int x,int z)
	{
		int xFixed = (int)(x / 100) * 100;
		int zFixed = (int)(z / 100) * 100;
		String code = "" + ((xFixed + 2) * (zFixed + 5) * seed);
	
		if(code.contains("36"))
		{
			if(areaCode.contains("111"))
			{
				return 15;
			}
			else return 0;
		}
		else return 0;
	}
	
	/**
	 * Generates a few Ice Rocks
	 */
	public float createIceRocks(String areaCode,int x,int z)
	{
		int xFixed = (int)(x / 100) * 100;
		int zFixed = (int)(z / 100) * 100;
		String code = "" + ((xFixed + 2) * (zFixed + 5) * seed);
	
		if(code.contains("11"))
		{
			if(areaCode.contains("3151"))
			{
				return 16;
			}
			else if(areaCode.contains("1217"))
			{
				return 17;
			}
			else if(areaCode.contains("4165"))
			{
				return 18;
			}
			else return 0;
		}
		else return 0;
	}
	
	/**
	 * Generates all "Pine Forest" Items
	 */
	public float createPineForest(String areaCode,int x,int z)
	{
		int xFixed = (int)(x / 100) * 100;
		int zFixed = (int)(z / 100) * 100;
		String code = "" + ((xFixed + 2) * (zFixed + 5) * seed);
		
		if(code.contains("16"))
		{
			if(areaCode.contains("432"))
			{
				return 1;
			}
			else if(areaCode.contains("662"))
			{
				return 2;
			}
			else if(areaCode.contains("5662"))
			{
				return 9;
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 0;
		}
	}
	 
	
	public BasicEntityRender generateObject(int objectID,int x,int z,float y, String areacode, int listNumber)
	{
	 return null;
	}
	
	public BasicEntityRender generateObject2(int objectID,int x,int z,float y, String areacode, int listNumber)
	{
		if(objectID == 1)
		{  
			return (new RenderFrozenPalm("trees/Palm Tree", 0.8F,-4F,"trees/Palm_Tree",new float[]{1,1,0,0},new float[]{x,y,z},0F,0,0F,0, 1F)); 
		}
		else if(objectID == 2)
		{
			return (new RenderFrozenPalm("trees/Palm Tree", 0.8F,-4F,"trees/Straight_Palm_Tree",new float[]{1,1,0,0},new float[]{x,y,z},0F,0,0F,0, 1F)); 
		}
		else if(objectID == 3)
		{
			return (new EntityRenderSmallTree("plants/smaller_tree", 0.3F,-4F,"smaller_tree",new float[]{1,1,0,0},new float[]{x,y,z},0F,0,0F,0, 3F)); 
		}
		else if(objectID == 4)
		{
			return (new EntityRenderSmallTree("plants/smaller_tree_whiteflower", 0.3F,-4F,"smaller_tree",new float[]{1,1,0,0},new float[]{x,y,z},0F,0,0F,0, 3F)); 
	   	}
		else if(objectID == 5)
		{
			return (new EntityRenderSmallTree("plants/tree_big", 0.3F,-4F,"smaller_tree",new float[]{1,1,0,0},new float[]{x,y,z},0F,0,0F,0, 5F)); 
		}
		else if(objectID == 6)
		{
			return (new EntityRenderSmallTree("plants/grass", 0.3F,-4F,"grass",new float[]{1,1,0,0},new float[]{x,y,z},-0.4F,0,0F,0F, 0.3F)); 
		}
		else if(objectID == 7)
		{
			return (new EntityRenderSmallTree("plants/grass", 0.3F,-4F,"grass",new float[]{1,1,0,0},new float[]{x,y,z},-0.4F,0,0F,0F, 0.3F)); 
		}
		else if(objectID == 13)
		{
			return addBasicGrasses(new float[]{7,4},0.5F,new float[]{x,y,z}, areacode,listNumber);  
		}
		else if(objectID == 14)
		{
			return addBasicGrasses(new float[]{7,5},0.5F,new float[]{x,y,z}, areacode,listNumber);  
		}
		else if(objectID == 15)
		{
			return (new EntityM15MineRenderer(0.1F,-1F,"Ammo/M15",new float[]{1,1,0,0},new float[]{x,y,z},-0.2F,0,0,0, 0.4F));     	
		}
		else 
		{
			return null;
		}     	        
	}
	
	
	//(new EntityRockRenderer(0.6F,-1F,"crystal",new float[]{10,10,6,1},new float[]{x,y,z},0,0,0,0,2F));     	        
	
	//(new EntityRockRenderer(0.6F,-1F,"crystal",new float[]{10,10,5,0},new float[]{x,y,z},0,0,0,0,2F));     	        
	
	//(new EntityRockRenderer(0.6F,-1F,"crystal",new float[]{10,10,6,0},new float[]{x,y,z},0,0,0,0,2F));     	        

	//(new EntityRockRenderer(0.6F,-1F,"crystal",new float[]{10,10,5,1},new float[]{x,y,z},0,0,0,0,2F));
	
	public BasicEntityRender addBasicPlant(float[] textureLocation, float scale,float[] pos, String areacode, int listNumber)
	{
		return (new EntityPlantRenderer("fern",new float[]{10,10,textureLocation[0],textureLocation[1]},new float[]{pos[0],pos[1],pos[2]},0,0,0,0,scale, areacode,listNumber)); 
	}
	
	public BasicEntityRender addBasicGrasses(float[] textureLocation, float scale,float[] pos, String areacode, int listNumber)
	{
		return (new EntityPlantRenderer("grass",new float[]{10,10,textureLocation[0],textureLocation[1]},new float[]{pos[0],pos[1],pos[2]},0,0,0,0,scale, areacode,listNumber)); 
	}
	
	//this.nmr.spawnEntity(new EntityRockRenderer(0.6F,-1F,"Agarthian_Pontem_Lamp",new float[]{10,10,7,2},new float[]{(float)225+this.random.nextInt(55),(float)225+this.random.nextInt(55)},0,0,this.random.nextInt(360),0, 0.5F));     	
	//this.nmr.spawnEntity(new EntityRockRenderer(0.6F,-1F,"Agarthian_Spira",new float[]{10,10,7,2},new float[]{(float)225+this.random.nextInt(55),(float)225+this.random.nextInt(55)},0,0,this.random.nextInt(360),0, 0.5F));     	
}