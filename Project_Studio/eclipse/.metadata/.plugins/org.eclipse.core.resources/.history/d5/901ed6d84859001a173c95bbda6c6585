package nl.miystengine.client.renderer;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.Callable;

import nl.miystengine.client.RefreshShaderKeybinds;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.GameProfile;
import nl.miystengine.client.KeySettings;
import nl.miystengine.client.MouseControl;
import nl.miystengine.client.PassingSeconds;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.RendererControllerKeybinds;
import nl.miystengine.client.gui.CreateStructureWorldGui;
import nl.miystengine.client.gui.IngameGui;
import nl.miystengine.client.gui.IngameMenuAndOptionsGui;
import nl.miystengine.client.gui.LoadingScreenGui;
import nl.miystengine.client.gui.MainMenuGui;
import nl.miystengine.client.gui.ScaledResolution;
import nl.miystengine.client.multiplayer.WorldClient;
import nl.miystengine.client.raycasting.MousePicker;
import nl.miystengine.client.renderer.basicmodels.ArrayListOBJModels;
import nl.miystengine.client.renderer.entity.BasicEntityRender;
import nl.miystengine.client.renderer.entity.BasicGrassesEntityRender;
import nl.miystengine.client.renderer.entity.EntityBadlandRipple;
import nl.miystengine.client.renderer.entity.EntityCylinderMoveableObject;
import nl.miystengine.client.renderer.entity.EntityDestructibleObject;
import nl.miystengine.client.renderer.entity.EntityPickupRender;
import nl.miystengine.client.renderer.entity.EntityRenderCustomTool;
import nl.miystengine.client.renderer.entity.EntityRendererBodyParts;
import nl.miystengine.client.renderer.entity.EntityRendererCustomMoveableObject;
import nl.miystengine.client.renderer.entity.EntityRockRenderer;
import nl.miystengine.client.renderer.entity.EntityMoveableRockObjectRenderer;
import nl.miystengine.client.renderer.entity.EntitySleeping;
import nl.miystengine.client.renderer.entity.EntitySmokeParticle;
import nl.miystengine.client.renderer.entity.EntityCrates;
import nl.miystengine.client.renderer.entity.HumanSkeleton;
import nl.miystengine.client.renderer.entity.LODBasicModel;
import nl.miystengine.client.renderer.entity.LODSmallModel;
import nl.miystengine.client.renderer.entity.ModelBasic;
import nl.miystengine.client.renderer.entity.arrays.ArrayListTerrain;
import nl.miystengine.client.renderer.entity.builds.EntityCampfire;
import nl.miystengine.client.renderer.entity.plants.EntityPineTree;
import nl.miystengine.client.renderer.entity.plants.EntityRenderSmallPlant;
import nl.miystengine.client.renderer.entity.plants.EntityRenderSmallTree;
import nl.miystengine.client.renderer.terrain.ArrayListRequest;
import nl.miystengine.client.renderer.terrain.RenderTerrain;
import nl.miystengine.client.renderer.terrain.Terrain;
import nl.miystengine.client.renderer.terrain.TerrainRenderer;
import nl.miystengine.client.renderer.terrain.TessellatorModel;
import nl.miystengine.client.renderer.texture.TextureManager;
import nl.miystengine.client.shaders.Camera;
import nl.miystengine.client.shaders.Light;
import nl.miystengine.client.shaders.Loader;
import nl.miystengine.client.shaders.OBJLoader;
import nl.miystengine.client.shaders.RawModel;
import nl.miystengine.client.shaders.StaticShader;
import nl.miystengine.client.shaders.grass.GrassShader;
import nl.miystengine.client.shaders.normal.NormalMappingShader;
import nl.miystengine.client.shaders.shadows.ShadowMapMasterRenderer;
import nl.miystengine.client.shaders.shadows.ShadowShader;
import nl.miystengine.client.shaders.sky.SkyBoxRenderer;
import nl.miystengine.client.shaders.sky.SkyRenderer;
import nl.miystengine.client.shaders.sky.SkyShader;
import nl.miystengine.client.shaders.terrain.TerrainShader;
import nl.miystengine.client.shaders.water.WaterShader;
import nl.miystengine.client.test.ParticleShader;
import nl.miystengine.client.test.ParticleSystem;
import nl.miystengine.client.test.ParticlesVao;
import nl.miystengine.client.test.ParticleRenderer;
import nl.miystengine.client.water.WaterFrameBuffers;
import nl.miystengine.client.water.WaterRender;
import nl.miystengine.client.water.WaterTile;
import nl.miystengine.entity.Entity;
import nl.miystengine.entity.EntityLivingBase;
import nl.miystengine.entity.EntityPlayer;
import nl.miystengine.entity.PlayerSPEntity;
import nl.miystengine.server.management.MiystEngineServer;
import nl.miystengine.util.MathHelper;
import nl.miystengine.util.ReportedException;
import nl.miystengine.world.World;
import nl.miystengine.world.WorldServer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.BufferUtils;
import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.ARBOcclusionQuery;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.EXTTextureFilterAnisotropic;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.opengl.OpenGLException;
import org.lwjgl.util.glu.Cylinder;
import org.lwjgl.util.glu.Project;
import org.lwjgl.util.glu.Sphere;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import com.google.common.collect.Maps;
import com.google.gson.JsonSyntaxException;

//V-22 Osprey
//City of Teotihuacan
//Leaellynasaura
//zis 30 anti tank

//Tapejara
//https://www.youtube.com/watch?v=ZAS5b1UrIMI&t=1s compy sound
//https://www.youtube.com/watch?v=VZp6gJ0OF90

//saying: "Vrag szadi na levom flange!" 
//Translation: "The enemy is behind on the left flank!"
//saying: "Vrag szadi na sprava flange!" 
//What "for the motherland" actually is: "Za rodinu!"

/**
 * Remove TextureAtlasSprite, not used anymore!!!!
 * Weather Effect in World.java
 * WorldAreaManager areBiomesViable need change? -> New Biome system in the make(Game read biome from map texture)
 * MiystEngineServer needs removing unused code
 * MiystEngineServer tsw_gen_functioni_147138_a to send data
 * SaveFileTagCompound Needs to be cleaned
 * PlayerMPEntity has unused code
 * @author Cefas
 */

public class EntityRenderer
{	
	public int timeJoinWorld;
	public static ShadowMapMasterRenderer shadowMasterRenderer;
	public static ShadowShader shadowShader;
    public static SkyShader Skyshader;
    public static TerrainShader ShaderT;
    public static GrassShader ShaderGrass;
    public static WaterShader shaderW;
    public static NormalMappingShader shaderN;
	public static ParticleShader shaderParticle;
	
    public static ObjectRenderer nmr;
    public static TerrainRenderer terrainRenderer;
    public static SkyRenderer skyRender;
    public static WorldRenderer worldRenderer = new WorldRenderer();
	public static WorldClient theWorld;

	public static ParticleRenderer renderer;
	public static ParticlesVao vao;
	
    public static RenderList allRenderLists = new RenderList();
    private double cameraYaw;
    private double cameraPitch;

    /** Previous frame time in milliseconds */
    public long prevFrameTime;

    public Camera camera = new Camera();
    private RendererControllerKeybinds rendererController;
   
    public EntityRenderer()
    {
    	this.rendererController = new RendererControllerKeybinds();
        this.prevFrameTime = MiystEngine.getSystemTime();
        renderer = new ParticleRenderer();
		vao = ParticlesVao.create(new Loader());
		//particles = new ParticleSystem();
		renderer.prepare();
    }

    /**
     * Updates the entity renderer
     */
    public void updateRenderer()
    {
        if(MiystEngine.miystengine.renderViewEntity == null)
        {
            MiystEngine.miystengine.renderViewEntity = MiystEngine.miystengine.thePlayer;
        }
     }
    
    public static float mouseOverX,mouseOverY=151,mouseOverZ;
 
    public static WorldServer serverWorld;
    public static int onWorldLoaded = 0;
   
    public static boolean refreshArea4 = false;
    public static boolean refreshArea5 = false;
    public static boolean refreshArea6 = false;
    public static boolean refreshArea7 = false;
    public static boolean refreshArea8 = false;
    public static boolean refreshArea9 = false;
    public static boolean refreshArea10 = false;
    public static boolean refreshArea11 = false;
    public static boolean refreshArea12 = false;
    
    public static List<WaterTile> waterList = new ArrayList<WaterTile>();
    public static List<Light> light = new ArrayList<Light>();
    public Terrain terrain;
    public static float[] skyColor;
	public static float fogDensity = 4.1F;
	public static float fogGradient = 5F;
	public static WaterFrameBuffers buffer = new WaterFrameBuffers();
	
	public void setFogColor(float[] color3F)
	{
		skyColor = new float[]{color3F[0],color3F[1],color3F[2],1F};	
	}

    public PassingSeconds passingTime = new PassingSeconds();
    public int renderDistance = 25;
    
    public float[] maxCustomSkyColor = new float[]{1F,1F,1F};
    public float[] maxCustomFogColor = new float[]{0.9F,1F,0.9F};
    public static List<ArrayListOBJModels> OBJModelList = new ArrayList<ArrayListOBJModels>();
    
	public static void loadModels()
	{
	   //Hand Models
        OBJModelList.add(new ArrayListOBJModels("player/arm"));
        OBJModelList.add(new ArrayListOBJModels("player/hand"));
        OBJModelList.add(new ArrayListOBJModels("player/arm_mirror"));
        OBJModelList.add(new ArrayListOBJModels("player/hand_mirror"));
        //End
        OBJModelList.add(new ArrayListOBJModels("particles/dirt_particle"));
        OBJModelList.add(new ArrayListOBJModels("particles/dirt_particle_low"));
        OBJModelList.add(new ArrayListOBJModels("particles/plank"));
        OBJModelList.add(new ArrayListOBJModels("particles/smoke"));
        OBJModelList.add(new ArrayListOBJModels("particles/wood_splint"));
 	}
    
	public boolean setLayDown = false;
	private MousePicker picker = new MousePicker();
	public float dayTime = 0;


	public void renderWorld(float ticker)
    { 
		this.rendererController.turnRenders();
		//Player height states
		if(setLayDown)
		{
			MiystEngine.miystengine.thePlayer.setLayingdown(true);
			setLayDown = false;
		}
		//End
		try
		{
		int time = (60 * IngameGui.Hours) + IngameGui.minutes;
		EntityLivingBase base = MiystEngine.miystengine.renderViewEntity;
		
		if(base != null && base.worldObj != null)
		{
			fogDensity = base.worldObj.StructureWorldInfo.WorldFog;
			camera.getUpAnimation(base);
		}

		passingTime.seconds();
		
		if(passingTime.secondspassed && base != null)
	    {
			if(this.skyRender!=null)
	        {
	        	this.skyRender.updateClouds();
	        }
			camera.breathAnimation((EntityPlayer)base);
			camera.walkAnimationWhenMoved((EntityPlayer)base);
			MouseControl.setTime();
			GameProfile.AdminCommands();
	    }
		
		if(base != null && ((EntityPlayer)base).hasMoved && onWorldLoaded > 1)
		{
			this.updateArea();
		}
		
		if(serverWorld != null && serverWorld.StructureWorldInfo != null && Keyboard.isKeyDown(Keyboard.KEY_MINUS) && Keyboard.isKeyDown(Keyboard.KEY_EQUALS))
		{
			serverWorld.StructureWorldInfo.stopTime = true;
		}
		
		this.worldRenderer.updateFogAndSun(this, time);
		
		camera.setCamposAndPitch(ticker, base,(float)nl.miystengine.client.renderer.EntityRenderer.allRenderLists.cameraX,(float)nl.miystengine.client.renderer.EntityRenderer.allRenderLists.cameraY + camera.walkingAnimation + camera.bodyPos,(float)nl.miystengine.client.renderer.EntityRenderer.allRenderLists.cameraZ, camera.pitch ,camera.walkAnimation*(camera.drunkWalk));  
		
        if(this.serverWorld == null){this.serverWorld = MiystEngineServer.getServer().worldServer();}
        
        RefreshShaderKeybinds.hideStatGui();
        RefreshShaderKeybinds.RefreshTerrainShader(base);
        RefreshShaderKeybinds.RefreshObjectShader();
        
        if(MiystEngine.miystengine.theWorld != null && MiystEngine.miystengine.theWorld.StructureWorldInfo != null)
        {
        	dayTime = skyColor[1] * MiystEngine.miystengine.theWorld.StructureWorldInfo.waterHeightFromTides;
        }
        
         
        if(onWorldLoaded == 1)
        {
        	MiystEngine.miystengine.getGame().updateOnEnterWorld();
        	
    	 	for(int i =0;i < 5;++i)
        	{
        	  	EntityRenderer.nmr.spawnEntity(new LODSmallModel(6,false,"plants/red_grass","Plant/grasses",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)}));     	  		
        	   	EntityRenderer.nmr.spawnEntity(new LODSmallModel(6,false,"plants/red_grass","Plant/grass_sod",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)}));     	  		
        	   	EntityRenderer.nmr.spawnEntity(new LODSmallModel(3,false,"Rock/Iron_Rock_Small","Rock/Iron_Rock_Small",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)}));     	  		
        	   	EntityRenderer.nmr.spawnEntity(new LODSmallModel(6,false,"plants/long_weed","Plant/grasses",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)},0.4F));     	  		
        	   	EntityRenderer.nmr.spawnEntity(new LODSmallModel(6,false,"plants/long_weed","Plant/grass_sod",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)},1F));     	  			
        	   	EntityRenderer.nmr.spawnEntity(new LODSmallModel(6,false,"plants/needle_grass","Plant/grass_sod",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)},0.6F));     	  		
        	  	EntityRenderer.nmr.spawnEntity(new LODSmallModel(18,false,"plants/small_weed","Plant/weeds",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)}));     	  		
        	  	EntityRenderer.nmr.spawnEntity(new LODSmallModel(18,false,"plants/fern","Plant/weeds",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)},2F));     	  		    
        	 	EntityRenderer.nmr.spawnEntity(new LODSmallModel(6,false,"plants/LongLeaf","Plant/weeds",new float[]{1,1,0,0},new float[]{259 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25),155.5F,249 - MiystEngine.miystengine.rand.nextInt(25) + MiystEngine.miystengine.rand.nextInt(25)},1F));     	  		
        	  	//for(int i2 =0;i2 < 50;++i2)
            	{
        	  		EntityRenderer.nmr.spawnGrassEntity(new BasicGrassesEntityRender(new ModelBasic(false,0,10,2F,2F,"objectsandterrain/plants/LongLeaf",new Vector4f(1F,2.5F,0F,0F),"Plant/weeds",true,false), new float[]{270,154.5F,270}, 0, 0, 0, 0, 1F));     	  		      	
            	}
        	}
    	 	
    	 	for(int i2 =0;i2 < 16;++i2)
            { 
    	 		
    	 		LODSmallModel entity = new LODSmallModel(1,"plants/dead_grass",LODSmallModel.class);
        		entity.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity);
        		
        		LODSmallModel entity1 = new LODSmallModel(1,"plants/dead_grass_blade",LODSmallModel.class);
        		entity1.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity1);
        		
        		LODSmallModel entity2 = new LODSmallModel(1,"plants/dead_grass_long",LODSmallModel.class);
        		entity2.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity2);
            }
    	 	
        	for(int i2 =0;i2 < 30;++i2)
            { 
        		LODBasicModel entity = new LODBasicModel(18,"plants/trees/Thin_Tree",LODBasicModel.class);
        		entity.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity);
        		
        		EntityPineTree entity2 = new EntityPineTree(18,"plants/trees/Pine_Tree",LODBasicModel.class);
        		entity2.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity2);
        		
        		LODBasicModel entity4 = new LODBasicModel(4F,"Rock/Iron_Rock",LODBasicModel.class);
        		entity4.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity4);
        		
        		LODBasicModel entity5 = new LODBasicModel(4F,"Rock/Iron_Rock_2",LODBasicModel.class);
        		entity5.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity5);
        		
        		LODBasicModel entity6 = new LODBasicModel(4F,"Rock/Iron_Rock_3",LODBasicModel.class);
        		entity6.deleteMe = true;
        		EntityRenderer.nmr.spawnEntity(entity6);
            }
        
     	 
     	
        	this.nmr.spawnEntity(new EntityCrates(17,"crate_LOD","crates/military_crate","crate_detail",new float[]{1,1,0,0},new float[]{258 + MiystEngine.miystengine.rand.nextInt(10) - MiystEngine.miystengine.rand.nextInt(10),155,215 + MiystEngine.miystengine.rand.nextInt(10) - MiystEngine.miystengine.rand.nextInt(10)},0,0,0,0, 1F));     	
        	this.nmr.spawnEntity(new EntityCrates("crate_LOD","crates/crate","crate_detail",new float[]{1,1,0,0},new float[]{250 + MiystEngine.miystengine.rand.nextInt(10) - MiystEngine.miystengine.rand.nextInt(10),155,215 + MiystEngine.miystengine.rand.nextInt(10) - MiystEngine.miystengine.rand.nextInt(10)},0,0,0,0, 1F));     	
        	this.nmr.spawnEntity(new EntityCrates("crate_LOD","crates/old_crate","crate_detail",new float[]{1,1,0,0},new float[]{253,155,212},0,0,0,0, 1F));     	
        }
       
        
        if(onWorldLoaded == 1)
        {
            ((EntityPlayer)base).hasMoved = true;
            ((EntityPlayer)base).X = -66666666;
            ((EntityPlayer)base).Z = -66666666;
            this.specialRefresh = true;
            this.updateArea();   
        }  
        
	        GL11.glEnable(GL11.GL_DEPTH_TEST);
	        GL11.glEnable(GL11.GL_ALPHA_TEST);
	        
	        RefreshShaderKeybinds.updateWorldMap(base,this);
	        
	        EntityRenderer.viewMatrix = camera.createViewMatrix();
	        EntityRenderer.viewMatrixTerrain = camera.createViewMatrixTerrain();
	        
	        EntityRenderer.reflectionViewMatrix = camera.createViewMatrixReflection();
	        
	        if(this.worldRenderer != null)
	        {
	        	this.allRenderLists.setupRenderList(base.lastTickPosX+(base.posX-base.lastTickPosX)*ticker,base.lastTickPosY+(base.posY-base.lastTickPosY)*ticker,base.lastTickPosZ+(base.posZ-base.lastTickPosZ)*ticker);
	        }
	       
	        if(this.prevMinute != IngameGui.miliSeconds)
	        {
	        	this.prevMinute = IngameGui.miliSeconds;
	        }
	        
	        if(this.rendererController.renderTerrain && EntityRenderer.terrainRenderer != null && MiystEngine.miystengine.entityRenderer.terrain != null && this.nmr.BodyParts.size() > 0)
		    {
	        	picker.update();
		        EntityRenderer.terrainRenderer.render(0,0,EntityRenderer.viewMatrix,MiystEngine.miystengine.entityRenderer.terrain,EntityRenderer.light,0F,10,true);
		    }
	        
	        GL11.glEnable(GL30.GL_CLIP_DISTANCE0);
	        
	        if(EntityRenderer.shaderW != null && this.nmr != null && light != null && EntityRenderer.viewMatrix != null)
	        {
	        	this.nmr.render(false,false, light, EntityRenderer.viewMatrix, true);
	        }
	        
	        if(this.rendererController.renderWater && LoadingScreenGui.renderObjectsInWorld && this.nmr != null)
	        {
	        	this.nmr.renderWater(true, light, EntityRenderer.viewMatrix, true);
	        }
	        
	  		GL13.glActiveTexture(GL13.GL_TEXTURE0);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,0);
		}
    	catch(Exception e)
		{
    		e.printStackTrace();
		}
     }
	
	private ParticleSystem system = new ParticleSystem(100,25F,new float[]{0,155F,0});
	
	public int getShadowTexture()
	{
		return this.shadowMasterRenderer.getShadowMap();
	}
	public MousePicker picker()
	{
		return this.picker;
	}
 
	public void refraction()
	{
		if(this.terrain != null && this.light != null && this.terrainRenderer != null)
		{
	        GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
	        GL11.glEnable(GL30.GL_CLIP_DISTANCE0);
	        if(EntityRenderer.skyColor != null)
	        {
	        	GL11.glClearColor(EntityRenderer.skyColor[0], EntityRenderer.skyColor[1], EntityRenderer.skyColor[2], EntityRenderer.skyColor[3]);
	        }
		    GL11.glEnable(GL11.GL_DEPTH_TEST);
		    GL11.glEnable(GL11.GL_ALPHA_TEST);
		    GL11.glEnable(GL11.GL_CULL_FACE);
		    
		    if(EntityRenderer.terrainRenderer != null && MiystEngine.miystengine.entityRenderer.terrain != null && EntityRenderer.light != null)
		    {
		    	if(EntityRenderer.light.size() == 0)
				{
					EntityRenderer.light.add(new Light(new float[]{0,2500,0},new float[]{1F,1F,1F}));
				}
		        EntityRenderer.terrainRenderer.render(1,1,EntityRenderer.viewMatrixTerrain,MiystEngine.miystengine.entityRenderer.terrain,EntityRenderer.light,0F,10,true);
		    }
		    
	        if(LoadingScreenGui.renderObjectsInWorld && this.nmr != null)
	        {
	        	this.nmr.render(true,false, light, EntityRenderer.viewMatrixTerrain, false);
	        }
       
        	if(this.skyRender!=null)
        	{
        		this.skyRender.render(light,false);
        	}
        	MiystEngine.miystengine.getGame().updateAfterRenderering();
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_N) && distanceTimer == 0)
		{
			++distance;
			distanceTimer = 500;
			System.out.println("Left");
		}
		if(Keyboard.isKeyDown(Keyboard.KEY_M) && distanceTimer == 0)
		{
			--distance;
			distanceTimer = 500;
			System.out.println("Right");
		}
		if(distanceTimer > 0)
		{
			--distanceTimer;
		}
	}
	
	private long prevMinute = IngameGui.miliSeconds;

	public static Matrix4f viewMatrix;
	public static Matrix4f viewMatrixTerrain;
	public static Matrix4f reflectionViewMatrix;
	public static Matrix4f projectionMatrix;
 	public static float waterHeight = 150F;

	public void updateArea()
	{
        this.moveArea(1, 5, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain6);
        this.moveArea(1, 4, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain5);
        this.moveArea(1, 6, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain4);
        //
        this.moveArea(1, 12, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListTerrain11);
        this.moveArea(1, 7, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain12);
        this.moveArea(1, 11, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain7);
        //
        this.moveArea(1, 9, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain10);
        this.moveArea(1, 8, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain9);
        this.moveArea(1, 10, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain8);
        //
        this.moveArea(2, 6, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain5);
        this.moveArea(2, 4, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain6);
        this.moveArea(2, 5, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain4);
        //
        this.moveArea(2, 11, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain12);
        this.moveArea(2, 7, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain11);
        this.moveArea(2, 12, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListTerrain7);
        //
        this.moveArea(2, 10, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain9);
        this.moveArea(2, 8, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain10);
        this.moveArea(2, 9, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain8);
        //
        this.moveArea(3, 8, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain8);
        this.moveArea(3, 4, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain4);
        this.moveArea(3, 7, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain7);
        //
        this.moveArea(3, 9, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain9);
        this.moveArea(3, 5, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain5);
        this.moveArea(3, 12, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain12);
        //
        this.moveArea(3, 10, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain10);
        this.moveArea(3, 6, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain6);
        this.moveArea(3, 11, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain11);
        //
        this.moveArea(4, 7, this.worldRenderer.ArrayListTerrain8, this.worldRenderer.ArrayListTerrain7);
        this.moveArea(4, 4, this.worldRenderer.ArrayListTerrain7, this.worldRenderer.ArrayListTerrain4);
        this.moveArea(4, 8, this.worldRenderer.ArrayListTerrain4, this.worldRenderer.ArrayListTerrain8);
        
        this.moveArea(4, 11, this.worldRenderer.ArrayListTerrain10, this.worldRenderer.ArrayListTerrain11);
        this.moveArea(4, 6, this.worldRenderer.ArrayListTerrain11, this.worldRenderer.ArrayListTerrain6);
        this.moveArea(4, 10, this.worldRenderer.ArrayListTerrain6, this.worldRenderer.ArrayListTerrain10);
        //
        this.moveArea(4, 9, this.worldRenderer.ArrayListTerrain5, this.worldRenderer.ArrayListTerrain9);
        this.moveArea(4, 5, this.worldRenderer.ArrayListTerrain12, this.worldRenderer.ArrayListTerrain5);
        this.moveArea(4, 12, this.worldRenderer.ArrayListTerrain9, this.worldRenderer.ArrayListTerrain12);	
        if(this.specialRefresh){this.specialRefresh = false;}
   }
	
	public static boolean specialRefresh = false;
	private float distance = 0F;
	private int distanceTimer = 0;
	
	private int faceX = 40;
	private int faceZ = 40;
	
	public void moveArea(int side,int areaNumber,List<ArrayListTerrain> listAfter,List<ArrayListTerrain> listTLoad)
	{
		EntityLivingBase base = MiystEngine.miystengine.renderViewEntity;

		boolean refresh;
		if(side==1&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&
		(((EntityPlayer)base).posX - faceX) < Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]) && 
		Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]) < Integer.parseInt(listAfter.get(0).AreaCode.split("_")[0]))
		{
			refresh = true;
		}
		else if(side==2&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&
		(((EntityPlayer)base).posX - (faceX - 40)) > Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]) && 
		Integer.parseInt(listAfter.get(0).AreaCode.split("_")[0]) < Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[0]))
		{
			refresh = true;
		}
		else if(side==3&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&
		(((EntityPlayer)base).posZ - (faceZ - 40)) > Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]) && Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[1]) < Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]))
		{
			refresh = true;
		}
		else if(side==4&&!listTLoad.isEmpty()&&!listAfter.isEmpty()&&
		(((EntityPlayer)base).posZ - faceZ) < Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]) && 
		Integer.parseInt(listAfter.get(0).AreaCode.split("_")[1]) < Integer.parseInt(listTLoad.get(0).AreaCode.split("_")[1]))
		{
			refresh = true;
		}
		else{refresh = false;}
		if(refresh||this.specialRefresh)
		{
		String[] coordsZ = listAfter.get(0).AreaCode.split("_");
		String[] coordsX = listTLoad.get(0).AreaCode.split("_");
		if(refresh||this.specialRefresh){if(areaNumber==4){this.worldRenderer.clear4();}if(areaNumber==5){this.worldRenderer.clear5();}if(areaNumber==6){this.worldRenderer.clear6();}if(areaNumber==7){this.worldRenderer.clear7();}if(areaNumber==8){this.worldRenderer.clear8();}if(areaNumber==9){this.worldRenderer.clear9();}if(areaNumber==10){this.worldRenderer.clear10();}if(areaNumber==11){this.worldRenderer.clear11();}if(areaNumber==12){this.worldRenderer.clear12();}}
		
		List<ArrayListTerrain> ground;
		if(areaNumber==4)
		{
			ground = this.worldRenderer.ArrayListTerrain4;	
		}
		else if(areaNumber==5)
		{
			ground = this.worldRenderer.ArrayListTerrain5;
		}
		else if(areaNumber==6)
		{
			ground = this.worldRenderer.ArrayListTerrain6;
		}
		else if(areaNumber==7)
		{
			ground = this.worldRenderer.ArrayListTerrain7;
		}
		else if(areaNumber==8)
		{
			ground = this.worldRenderer.ArrayListTerrain8;
		}
		else if(areaNumber==9)
		{
			ground = this.worldRenderer.ArrayListTerrain9;
		}
		else if(areaNumber==10)
		{
			ground = this.worldRenderer.ArrayListTerrain10;
		}
		else if(areaNumber==11)
		{
			ground = this.worldRenderer.ArrayListTerrain11;
		}
		else if(areaNumber==12)
		{
			ground = this.worldRenderer.ArrayListTerrain12;
		}
		else
		{
			ground = listAfter;
		}
		
		if(LoadingScreenGui.loadObjects < 30)
		{	
			if(side==1)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0])-(10 + (renderDistance * 2)),Integer.parseInt(coordsZ[1]),false);
			}
			else if(side==2)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0])+(10 + (renderDistance * 2)),Integer.parseInt(coordsZ[1]),false);
			}
			else if(side==3)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0]),Integer.parseInt(coordsZ[1])+(10 + (renderDistance * 2)),false);
			}
			else if(side==4)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0]),Integer.parseInt(coordsZ[1])-(10 + (renderDistance * 2)),false);
			}
			LoadingScreenGui.loadObjects += 1;
		}
		else
		{
			if(side==1)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0])-(10 + (renderDistance * 2)),Integer.parseInt(coordsZ[1]),true);
			}
			else if(side==2)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0])+(10 + (renderDistance * 2)),Integer.parseInt(coordsZ[1]),true);
			}
			else if(side==3)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0]),Integer.parseInt(coordsZ[1])+(10 + (renderDistance * 2)),true);
			}
			else if(side==4)
			{
				this.worldRenderer.splitIntoAreas(areaNumber,ground,base,Integer.parseInt(coordsX[0]),Integer.parseInt(coordsZ[1])-(10 + (renderDistance * 2)),true);
			}
		}
	    }  
		if(areaNumber==4){Entity.coords4 = this.worldRenderer.ArrayListTerrain4.get(0).AreaCode.split("_");}
		if(areaNumber==5){Entity.coords5 = this.worldRenderer.ArrayListTerrain5.get(0).AreaCode.split("_");}
		if(areaNumber==6){Entity.coords6 = this.worldRenderer.ArrayListTerrain6.get(0).AreaCode.split("_");}
		if(areaNumber==7){Entity.coords7 = this.worldRenderer.ArrayListTerrain7.get(0).AreaCode.split("_");}
		if(areaNumber==8){Entity.coords8 = this.worldRenderer.ArrayListTerrain8.get(0).AreaCode.split("_");}
		if(areaNumber==9){Entity.coords9 = this.worldRenderer.ArrayListTerrain9.get(0).AreaCode.split("_");}
		if(areaNumber==10){Entity.coords10 = this.worldRenderer.ArrayListTerrain10.get(0).AreaCode.split("_");}
		if(areaNumber==11){Entity.coords11 = this.worldRenderer.ArrayListTerrain11.get(0).AreaCode.split("_");}
		if(areaNumber==12){Entity.coords12 = this.worldRenderer.ArrayListTerrain12.get(0).AreaCode.split("_");}	
	}

    /**
     * set null to clear
     */
    public void setWorldAndLoadRenderers(WorldClient wordclient)
    {
        if (this.theWorld != null)
        {
            this.theWorld.removeWorldAccess(this);
        }
        this.theWorld = wordclient;
        if (wordclient != null)
        {
        	wordclient.addWorldAccess(this);
        }
    }
}
