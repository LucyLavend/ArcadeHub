package nl.thestructureworld.client.renderer.terrain;

import java.util.Random;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.renderer.Tessellator;
import nl.thestructureworld.terrainandobjects.TerrainObject;


public class RenderPlants
{
	 public Tessellator modelDrawer;
	 public Random rand;
	 
	 public RenderPlants(Tessellator ModelDrawer, Random Rand)
	 {
		 this.rand = Rand;
		 this.modelDrawer = ModelDrawer;
	 }
	 
	 public void renderPlants(TerrainObject o, double x, double y, double z,int data)
	 {
		 	String texture = ""+data;
		 	if(o == TerrainObject.DecorativeCreeperBush){this.renderCreeperBush(x, y, z,data);}
	    	if(o.isPlant() && texture.length() > 1)
	    	{
	    	float f =(Float.parseFloat(""+texture.charAt(0)/6));
	        float f2 =(Float.parseFloat(""+texture.charAt(1)/75));
	        
	        
	        
	        String coc = ""+new String(""+x).charAt(new String(""+x).length())*new String(""+z).charAt(new String(""+z).length());
	        
	        
	        
	    	if(FileBasicJava.containsNumber(""+texture.charAt(0)))
	    	{
	    	if((""+texture.charAt(0)).contains("0")){modelDrawer.setTranslation(x+0.48-(f/30F),z-0.23+(f2/30F));}
	    	if((""+texture.charAt(0)).contains("1")){modelDrawer.setTranslation(x-0.32+(f2/30F),z+0.23-(f2/30F));}
	    	if((""+texture.charAt(0)).contains("2")){modelDrawer.setTranslation(x-0.24+(f2/30F),z+0.43-(f/30F));}
	    	if((""+texture.charAt(0)).contains("3")){modelDrawer.setTranslation(x+0.33-(f/30F),z-0.33+(f2/30F));}
	    	if((""+texture.charAt(0)).contains("4")){modelDrawer.setTranslation(x+0.31-(f/30F),z+0.13-(f/30F));}
	    	if((""+texture.charAt(0)).contains("5")){modelDrawer.setTranslation(x-0.24+(f2/30F),z-0.33+(f/30F));}
	    	if((""+texture.charAt(0)).contains("6")){modelDrawer.setTranslation(x-0.4+(f2/30F),z-0.43+(f/30F));}
	    	if((""+texture.charAt(0)).contains("7")){modelDrawer.setTranslation(x+0.1+(f/30F),z+0.47-(f/30F));}
	    	if((""+texture.charAt(0)).contains("8")){modelDrawer.setTranslation(x-0.1+(f2/30F),z+0.33-(f/30F));}
	    	if((""+texture.charAt(0)).contains("9")){modelDrawer.setTranslation(x-0.3+(f2/30F),z-0.33+(f2/30F));}
	    	modelDrawer.setTranslation(y-(0.1+(f2/10F)));
	    	}
	     	
	    	float color = Float.parseFloat(new String("0."+(""+(x*z)).replace(".", "")));
	    	if(color<0.4F)color = color+0.5F;
	    	modelDrawer.setColorOpaque_F(1F,color, 1F);
	    	
	    	if(o == TerrainObject.SpikePlant){this.renderSpikePlant();}
	    	if(o == TerrainObject.Reeds){this.renderReeds(y,f2);}
	    	if(o == TerrainObject.SmallFern){this.renderSmallFern(y,texture);}
	    	if(o == TerrainObject.SmallCrop){this.renderSmallCrop(y);}
	    	if(o == TerrainObject.TreeLeaf){this.renderTreeLeaf();}
	    	if(o == TerrainObject.SmallLeaf){this.renderSmallLeaf(y);}
	    	if(o == TerrainObject.Fern){this.renderFerns(y,0);}
	    	if(o == TerrainObject.SpikeFern){this.renderBushPlants(false,y,0,0,texture,"SpikeFern");}
	    	if(o == TerrainObject.ThickLeave){this.renderBushPlants(false,y,0.1,0,texture,"ThickLeaf");}
	    	if(o == TerrainObject.HighBush){this.renderBushPlants(true,y,0.0,0.2,texture,"HighBush");}
	    	if(o == TerrainObject.Bush){this.renderBushPlants(false,y,0.4,0.2,texture,"Bush");}
	    	if(o == TerrainObject.TreeBush){this.renderBushPlants(false,y,0.0,0.4,texture,"TreeBush");}
	    	if(o == TerrainObject.jungleGrass)
	    	{
	    		this.renderSmallGrass(0.1,x-0.6,y-0.1,z,0);
	    		this.renderSmallGrass(0.1,x-0.6,y-0.1,z+0.25+(f/32),0);
	    		this.renderSmallGrass(0.1,x    ,y-0.1,z+0.25+(f2/43),0.1);
	    		this.renderSmallGrass(0.1,x    ,y-0.1,z-0.25-(f2/39),0);
	    	}
	    	if(o == TerrainObject.jungleGrassSmall)
	    	{
	    		this.renderSmallGrass(1,x-0.6,y-0.1,z,-0.2);
	    		this.renderSmallGrass(1,x-0.6,y-0.1,z+0.25+(f/32),-0.2);
	    		this.renderSmallGrass(1,x-0.3,y-0.1,z+0.25+(f2/65),-0.2);
	    		this.renderSmallGrass(1,x-0.3,y-0.1,z-0.25-(f/86),-0.2);
	    	}
	    	if(o == TerrainObject.jungleGrassNormal)
	    	{
	    		this.renderSmallGrass(0.5,x-0.6,y-0.1,z,-0.1);
	    		this.renderSmallGrass(0.5,x-0.6,y-0.1,z+0.25+(f/32),-0.1);
	    		this.renderSmallGrass(0.5,x    ,y-0.1,z+0.25+(f2/43),-0.1);
	    		this.renderSmallGrass(0.5,x    ,y-0.1,z-0.25-(f2/39),-0.1);	
	    	}
	    	} 
	 }
	
	 
	 	public double LeftOrRight1 = 0;
		public double Movement1 = 0.001;
		public double Movement1Random1 = 0;
		
		 double LeftOrRight2 = 0;
		 double Movement2 = 0.001;
		 double MovementRandom2 = 0;
		
		public void SwingAnimation1()
		{
			if(LeftOrRight1 > (-0.7-Movement1Random1) && LeftOrRight1 < (-0.5)){Movement1-=0.001;}
	    	if(LeftOrRight1 >  (0.5) && LeftOrRight1 <  (0.7+Movement1Random1)){Movement1+=0.001;}
	    	LeftOrRight1 -=Movement1+(this.rand.nextInt(100)/100000D);
		}
		
		public void SwingAnimation2()
		{
			if(LeftOrRight2 > (-0.7-MovementRandom2) && LeftOrRight2 < (-0.5)){Movement2-=0.001;}
	    	if(LeftOrRight2 >  (0.5) && LeftOrRight2 <  (0.7+MovementRandom2)){Movement2+=0.001;}
	    	LeftOrRight2 -=Movement2+(this.rand.nextInt(100)/100000D);
		}

		
		public void randomGrassNummer()
		{
	    	if(this.rand.nextInt(100)==0){double i = this.rand.nextInt(9)/30D;if((0.7+Movement1Random1) < i ){Movement1Random1 = i;}}
	       	if(this.rand.nextInt(100)==0){double i = this.rand.nextInt(9)/30D;if((0.7+MovementRandom2) < i ){MovementRandom2 = i;}}
		}
		
	    public void renderSmallGrass(double A,double x,double y,double z,double TP)
	    {  	   	
	        modelDrawer.setTranslation(x,y,z);
	    	modelDrawer.addVertexWithUV(0.6, 0.0,1.0,0.4+TP,  0.3);
	    	modelDrawer.addVertexWithUV(0.6, 0.0,0.0,0.3+TP,  0.3);
	    	modelDrawer.addVertexWithUV(1.0+(LeftOrRight1*A),   1.4,0.0+(LeftOrRight2*A),0.3+TP,  0.2);
	    	modelDrawer.addVertexWithUV(1.2+(LeftOrRight1*A), 0.8,1.0+(LeftOrRight2*A),0.4+TP,  0.2);

	    	modelDrawer.addVertexWithUV(0.65-(LeftOrRight2*A), 1.1,0.994+(LeftOrRight2*A),0.4+TP,     0.2);
	    	modelDrawer.addVertexWithUV(0.25-(LeftOrRight2*A), 1.2,-0.036+(LeftOrRight2*A),0.3+TP,  0.2);
	    	modelDrawer.addVertexWithUV(0.83, 0,0.1,0.3+TP,  0.3);
	    	modelDrawer.addVertexWithUV(0.65, 0,1.1,0.4+TP,0.3);
	    	
	    	modelDrawer.addVertexWithUV(0.65, 0,1.1,0.4+TP,0.3);
	    	modelDrawer.addVertexWithUV(0.83, 0,0.05,0.3+TP,0.3);
	    	modelDrawer.addVertexWithUV(0.25+(LeftOrRight1*A), 1.2,-0.04-(LeftOrRight2*A),0.3+TP,0.2);
	    	modelDrawer.addVertexWithUV(0.65+(LeftOrRight1*A), 1.1,0.99-(LeftOrRight2*A),0.4+TP,0.2);
	 
	    	modelDrawer.addVertexWithUV(0.02-(LeftOrRight2*A), 1.6-(LeftOrRight1*A),-0.15,0.4+TP,  0.2);
	    	modelDrawer.addVertexWithUV(1.2-(LeftOrRight2*A), 1.17,0.84-(LeftOrRight1*A),0.3+TP,  0.2);
	    	modelDrawer.addVertexWithUV(1.3, 0.0,0.42+0.3,0.3+TP,  0.3);
	    	modelDrawer.addVertexWithUV(0.4, 0.0,0.6+0.3,0.4+TP,  0.3);
	    	
	    }
	    
	    public void renderBushPlants(boolean High,double y,double i,double v,String s,String name)
	    {	
	    	double F1=0.0;
	    	double F2=0.0;
	    	double H;
	    	double YY = 0;
	    	if(High)
	    	{
	    	H=(Float.parseFloat(""+s.charAt(0)/75F));	
	    	}
	    	else if(s.contains("1")||s.contains("8")||s.contains("4"))
	    	{
	    		F1=0.1;
	    		F2=0.1;
	    		H=0.0;
	    		modelDrawer.setTranslation(y-0.2);
	    	}
	    	else
	    	{
	    		F1=0.0;
	    		F2=0.0;
	    		H=0.0;
	    		if(name.contains("ThickLeaf")){YY = 0.2D;}
	    		modelDrawer.setTranslation(y-0.4);
	    	}
	    	if(name.contains("SpikeFern"))
	    	{
	    		modelDrawer.addVertexWithUV(1.0, 0.41+YY,1.0,0.9,  0.1);
	        	modelDrawer.addVertexWithUV(1.0, 0.41+YY,0.0,0.9,  0.0);
	        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,0.0,1.0,  0.0);
	        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,1.0,1.0,  0.1);	
	    	}
	    	if(name.equals("TreeBush"))
	    	{
	    		modelDrawer.addVertexWithUV(1.0, 0.4+YY,1.0,0.9,  0.5);
	        	modelDrawer.addVertexWithUV(1.0, 0.4+YY,0.0,0.9,  0.4);
	        	modelDrawer.addVertexWithUV(0.0, 0.4+YY,0.0,1,  0.4);
	        	modelDrawer.addVertexWithUV(0.0, 0.4+YY,1.0,1,  0.5);	
	        	modelDrawer.addVertexWithUV(1.0, 0.6+YY,1.0,0.9,  0.5);
	        	modelDrawer.addVertexWithUV(1.0, 0.6+YY,0.0,0.9,  0.4);
	        	modelDrawer.addVertexWithUV(0.0, 0.6+YY,0.0,1,  0.4);
	        	modelDrawer.addVertexWithUV(0.0, 0.6+YY,1.0,1,  0.5);	
	    	}
	    	if(name.equals("Bush"))
	    	{
	    		modelDrawer.addVertexWithUV(1.0, 0.41+YY,1.0,0.5,  0.3);
	        	modelDrawer.addVertexWithUV(1.0, 0.41+YY,0.0,0.5,  0.2);
	        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,0.0,0.6,  0.2);
	        	modelDrawer.addVertexWithUV(0.0, 0.41+YY,1.0,0.6,  0.3);	
	    	}
	    	if(name.contains("ThickLeaf"))
	    	{
	    		modelDrawer.addVertexWithUV(1.0, 0.3+YY,1.0,0.7,  0.3);
	        	modelDrawer.addVertexWithUV(1.0, 0.3+YY,0.0,0.7,  0.2);
	        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,0.0,0.8,  0.2);
	        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,1.0,0.8,  0.3);
	        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,1.0,0.8,  0.3);
	        	modelDrawer.addVertexWithUV(0.0, 0.3+YY,0.0,0.8,  0.2);
	        	modelDrawer.addVertexWithUV(1.0, 0.3+YY,0.0,0.7,  0.2);
	        	modelDrawer.addVertexWithUV(1.0, 0.3+YY,1.0,0.7,  0.3);	
	    	}
	    	if(name.contains("HighBush"))
	    	{
	    	modelDrawer.setTranslation(y-0.4);
	    	modelDrawer.addVertexWithUV(1.0, 0.5,1.0,0.8,  0.3);
	    	modelDrawer.addVertexWithUV(1.0, 0.5,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.5,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.5,1.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.5,1.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.5,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.5,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.5,1.0,0.8,  0.3);
	    	
	    	modelDrawer.addVertexWithUV(1.1, 0.7,1.1,0.8,  0.3);
	    	modelDrawer.addVertexWithUV(1.1, 0.7,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.7,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.7,1.1,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.7,1.1,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.7,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(1.1, 0.7,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(1.1, 0.7,1.1,0.8,  0.3);
	    	
	    	modelDrawer.addVertexWithUV(1.1, 0.9,1.0,0.8,  0.3);
	    	modelDrawer.addVertexWithUV(1.1, 0.9,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.9,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.9,1.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.9,1.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.9,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(1.1, 0.9,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(1.1, 0.9,1.0,0.8,  0.3);
	    	
	    	modelDrawer.addVertexWithUV(1.0, 1.1,1.0,0.8,  0.3);
	    	modelDrawer.addVertexWithUV(1.0, 1.1,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 1.1,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 1.1,1.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 1.1,1.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 1.1,0.0,0.9,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 1.1,0.0,0.8,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 1.1,1.0,0.8,  0.3);
	    	}
	    	modelDrawer.addVertexWithUV(0.5, 0.7+H,1.,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.7+H,0.0,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.7+H,0.0,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.5, 0.7+H,1.,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(0.8, 0.7+H,0.5,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(0.1, 0.7+H,0.5,		0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.1, 0.7+H,0.5,		0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.8, 0.7+H,0.5,		0.9-i+F2,0.1+v);
	    	modelDrawer.addTranslation(0.105,0.16);  
	    	
	    	modelDrawer.addVertexWithUV(0., 0.7+H,0.7,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.7+H,0.0,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.7+H,0.0,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0., 0.7+H,0.7,		0.9-i+F2,0.1+v);         	
	    	
	    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(0.088, 0.7+H,0.0,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.088, 0.7+H,0.0,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);   
	    	
	    	modelDrawer.addTranslation(-0.2,0.16);  
	    	modelDrawer.addVertexWithUV(0.3, 0.7+H,0.7,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.7+H,-0.3,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.2,-0.3,	1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.3, 0.2,0.7,		1-i-F1,0.1+v);
	    	
	    	modelDrawer.addVertexWithUV(0.3, 0.2,0.7,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.2,-0.3,	1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.788, 0.7+H,-0.3,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.3, 0.7+H,0.7,		0.9-i+F2,0.1+v);  
	    	
	    	modelDrawer.addTranslation(0.5,-0.3);
	    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);
	    	modelDrawer.addVertexWithUV(-0.388, 0.7+H,0.3,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(-0.388, 0.2,0.3,	1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
	    	
	    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1-i-F1,0.1+v);
	    	modelDrawer.addVertexWithUV(-0.388, 0.2,0.3,	1-i-F1,0.0+v);
	    	modelDrawer.addVertexWithUV(-0.388, 0.7+H,0.3,	0.9-i+F2,0.0+v);
	    	modelDrawer.addVertexWithUV(0.7, 0.7+H,0.7,		0.9-i+F2,0.1+v);   
	    }
	    
	    public void renderFerns(double y, float f2)
	    {	
	    	modelDrawer.setTranslation(y-0.2);  
	    	modelDrawer.addVertexWithUV(1.0, 0.3,1.0,0.9,  0.4);
	    	modelDrawer.addVertexWithUV(1.0, 0.3,0.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.3,0.0,1,  0.3);
	    	modelDrawer.addVertexWithUV(0.0, 0.3,1.0,1,  0.4);
	    	
	    	modelDrawer.addVertexWithUV(0.0, 0.3,1.0,1,  0.4);
	    	modelDrawer.addVertexWithUV(0.0, 0.3,0.0,1,  0.3);
	    	modelDrawer.addVertexWithUV(1.0, 0.3,0.0,0.9,  0.3);
	    	modelDrawer.addVertexWithUV(1.0, 0.3,1.0,0.9,  0.4);
	    	
	    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,1.,		0.9,0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,0.0,	0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,0.0,	0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.7+f2,1.,		0.9,0.2);
	    	modelDrawer.addVertexWithUV(0.8, 0.7+f2,0.5,		0.9,0.2);
	    	modelDrawer.addVertexWithUV(0.1, 0.7+f2,0.5,		0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.1, 0.7+f2,0.5,		0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.8, 0.7+f2,0.5,		0.9,0.2);
	    	modelDrawer.addTranslation(0.105,0.16);  
	    	modelDrawer.addVertexWithUV(0., 0.7+f2,0.7,		0.9,0.2);
	    	modelDrawer.addVertexWithUV(0.788, 0.7+f2,0.0,	0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1,0.1);
	    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1,0.2);
	    	modelDrawer.addVertexWithUV(0., 0.2,0.7,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.788, 0.2,0.0,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.788, 0.7+f2,0.0,	0.9,0.1);
	    	modelDrawer.addVertexWithUV(0., 0.7+f2,0.7,		0.9,0.2);         	
	    	modelDrawer.addVertexWithUV(0.7, 0.7+f2,0.7,		0.9,0.2);
	    	modelDrawer.addVertexWithUV(0.088, 0.7+f2,0.0,	0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.7, 0.2,0.7,		1,0.2);
	    	modelDrawer.addVertexWithUV(0.088, 0.2,0.0,		1,0.1);
	    	modelDrawer.addVertexWithUV(0.088, 0.7+f2,0.0,	0.9,0.1);
	    	modelDrawer.addVertexWithUV(0.7, 0.7+f2,0.7,		0.9,0.2);    	
	    }
	    
	    public void renderSmallLeaf(double y)
	    {
	    	modelDrawer.setTranslation(y-0.2); 
	    	modelDrawer.addVertexWithUV(1.01, 0.51,  1.0,  0.2,    0.2);
	    	modelDrawer.addVertexWithUV(1.01, 0.51,  0.0,  0.2,    0.1);
	    	modelDrawer.addVertexWithUV(0.01, 0.21,  0.0,  0.3,    0.1);
	    	modelDrawer.addVertexWithUV(0.01, 0.21,  1.0,  0.3,    0.2);
	    	
	    	modelDrawer.addVertexWithUV(0.99, 0.21,  1.0,  0.2,    0.2);
	    	modelDrawer.addVertexWithUV(0.99, 0.21,  0.0,  0.2,    0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.51,  0.0,  0.3,    0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.51,  1.0,  0.3,    0.2);
	    	
	    	modelDrawer.addVertexWithUV(1.02, 0.21,  1.0,  0.2,    0.2);
	    	modelDrawer.addVertexWithUV(1.02, 0.51,  0.0,  0.2,    0.1);
	    	modelDrawer.addVertexWithUV(0.01, 0.51,  0.0,  0.3,    0.1);
	    	modelDrawer.addVertexWithUV(0.01, 0.21,  1.0,  0.3,    0.2);
	    	
	    	modelDrawer.addVertexWithUV(1.02, 0.51,  1.0,  0.2,    0.2);
	    	modelDrawer.addVertexWithUV(1.03, 0.21,  0.0,  0.2,    0.1);
	    	modelDrawer.addVertexWithUV(0.03, 0.21,  0.0,  0.3,    0.1);
	    	modelDrawer.addVertexWithUV(0.01, 0.51,  1.0,  0.3,    0.2);
	    }
	    
	    public void renderTreeLeaf()
	    {
	    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.2,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.2,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.2,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.2,  0.2);
	    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.2,  0.2);
	    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.2,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.2,  0.1);
	    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.2,  0.2);
	    }
	    
	    public void renderSmallCrop(double y)
	    {
	    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.2,0.0,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.0,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,1.0,0,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.57,1.0,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, -0.13,0.0,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, -0.17,0.0,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.56,0.98,0,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.57,-0.063,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.27,-0.02,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, -0.098,1.0,0,  0.2);
	    	modelDrawer.setTranslation(y-0.4);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,0,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.1,  0.2);
	    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0,  0.2);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,0,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,0,  0.1);
	    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,0.1,  0.1);
	    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,0.1,  0.2);
	    }
	    
	    public void renderSmallFern(double y, String texture2)
	    {
	    	double i;
	    	double i2 = 0.0D;
	    	double i3 = 0.0D;
	    	double i4 = 0.0D;
	    	double i5 = 0.0D;
	    	String texture = ""+texture2.charAt(0);
	    	if((""+texture).contains("0")||(""+texture).contains("8")){i = 0.1;}
	    	else if((""+texture).contains("1")){i = 0.2;}
	    	else if((""+texture).contains("2")||(""+texture).contains("9")){i = 0.3;}
	    	else if((""+texture).contains("3")||(""+texture).contains("6")){i = 0.5;}
	    	else if((""+texture).contains("4")){i = 0.0;}
	    	else{i = 0.4D;}
	    	if(texture2.length() == 2)
	    	{
	    		if((""+texture2).contains("0")||(""+texture2).contains("8")){i2 = 0.1;}
	        	else if((""+texture2).contains("1")){i2 = 0.2;}
	        	else if((""+texture2).contains("2")||(""+texture2).contains("9")){i2 = 0.3;}
	        	else if((""+texture2).contains("3")||(""+texture2).contains("6")){i2 = 0.5;}
	        	else if((""+texture2).contains("4")){i2 = 0.0;}
	        	else{i2 = 0.4D;}	
	    	}
	    	if(texture2.length() == 2)
	    	{
	    		if((""+texture2).contains("3")||(""+texture2).contains("9")){i3 = 0.1;}
	        	else if((""+texture2).contains("1")){i3 = 0.2;}
	        	else if((""+texture2).contains("2")||(""+texture2).contains("8")){i3 = 0.3;}
	        	else if((""+texture2).contains("0")||(""+texture2).contains("4")){i3 = 0.5;}
	        	else if((""+texture2).contains("6")){i3 = 0.0;}
	        	else{i3 = 0.4D;}	
	    	}
	    	if(texture2.length() == 2)
	    	{
	    		if((""+texture2).contains("4")){i4 = 0.1;}
	        	else if((""+texture2).contains("8")){i4 = 0.2;}
	        	else if((""+texture2).contains("2")){i4 = 0.3;}
	        	else if((""+texture2).contains("1")||(""+texture2).contains("6")){i4 = 0.5;}
	        	else if((""+texture2).contains("0")){i4 = 0.0;}
	        	else{i4 = 0.4D;}	
	    	}
	    	if((""+texture2).contains("8")){i5 = 0.1;}
	        else if((""+texture2).contains("0")){i5 = 0.2;}
	        else if((""+texture2).contains("2")){i5 = 0.3;}
	        else if((""+texture2).contains("7")||(""+texture2).contains("6")){i5 = 0.5;}
	        else if((""+texture2).contains("6")){i5 = 0.0;}
	        else{i5 = 0.4D;}	
	    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.3+i,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.2,0.0,0.3+i,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.0,0.4+i,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,1.0,0.4+i,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.57,1.0,    	    0.4+i2,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, -0.13,0.0, 	    0.4+i2,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, -0.17,0.0,       	0.3+i2,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.56,0.98, 		0.3+i2,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,			0.4+i2,  0.2);
	    	modelDrawer.addVertexWithUV(1.0, 0.57,-0.063,		0.4+i2,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.27,-0.02,		0.3+i2,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, -0.098,1.0,		0.3+i2,  0.2);
	    	modelDrawer.setTranslation(y-0.4);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,		0.4+i3,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,		0.4+i3,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		0.3+i3,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		0.3+i3,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1.,		0.3+i4,  0.2);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,		0.3+i4,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,0.0,		0.4+i4,  0.1);
	    	modelDrawer.addVertexWithUV(0.5, 0.6,1.,		0.4+i4,  0.2);
	    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,		0.4+i5,  0.2);
	    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,		0.4+i5,  0.1);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		0.3+i5,  0.1);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		0.3+i5,  0.2);
	    	modelDrawer.addVertexWithUV(0.9, 0.2,0.5,		0.3+i5,  0.2);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.5,		0.3+i5,  0.1);
	    	modelDrawer.addVertexWithUV(0.1, 0.68,0.5,		0.4+i5,  0.1);
	    	modelDrawer.addVertexWithUV(0.8, 0.7,0.5,		0.4+i5,  0.2);
	    }
	    
	    public boolean renderFastBush = true;
	    public void renderCreeperBush(double x, double y, double z,int data)
	    {
	    		double	XX = data/10D;
	    		if(this.renderFastBush && data == 4)
	    		{
	    		modelDrawer.setTranslation(x, y-0.18, z-0.1);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.2);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.3);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.4);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.5);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.6);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.7);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.setTranslation(x, y-0.18, z-0.8);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	        	modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	        	modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	    		}
	    		modelDrawer.setTranslation(x, y-0.2, z);
	    		modelDrawer.addVertexWithUV(0.246, 1.19,1.0,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.246, 1.19,0.0,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.246, 0.194,0.0,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.246, 0.194,1.0,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.246, 0.194,1.0,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.246, 0.194,0.0,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.246, 1.19,0.0,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.246, 1.19,1.0,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.765, 0.19674917,1.0,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.765, 0.19674917,0.0,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.765, 1.2,0.0,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.765, 1.2,1.0,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.765, 1.2,1.0,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.765, 1.2,0.0,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.765, 0.19674917,0.0,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.765, 0.19674917,1.0,0.3+XX,0.1);
	    		if(data == 4)
	    		{
	    		modelDrawer.addVertexWithUV(0.9, 1.1166533,0.98,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.826, 1.1478585,0.0,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.13, 1.1152191,0.0,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.13, 1.1,0.98,0.3+XX,0.1);	
	    		modelDrawer.addVertexWithUV(0.13, 1.1,0.98,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.13, 1.1152191,0.0,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.826, 1.1478585,0.0,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.9, 1.1166533,0.98,0.4+XX,0.1);
	    		}
	    		modelDrawer.addVertexWithUV(0.16, 1.19,0.035,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.88, 1.149,0.07,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.88, 0.16,0.07,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.16, 0.13,0.042,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.16, 0.13,0.042,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.88, 0.16,0.07,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.88, 1.149,0.07,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.16, 1.19,0.035,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.16, 1.17,0.96,0.4+XX,0.1);
	    		modelDrawer.addVertexWithUV(0.9, 1.13,0.95,0.4+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.8, 0.13,0.95,0.3+XX,0.0);
	    		modelDrawer.addVertexWithUV(0.1, 0.2,0.96,0.3+XX,0.1);
	    }
	  
	    public void renderReeds(double y, float f2)
	    {	
	    	modelDrawer.setTranslation(y-0.2);   	
	    	modelDrawer.addVertexWithUV(0.5+(LeftOrRight1*0.1)+(LeftOrRight2*0.1), 1.2+f2,1+(LeftOrRight2*0.1),0.3,0.1);
	    	modelDrawer.addVertexWithUV(0.5+(LeftOrRight1*0.1)+(LeftOrRight2*0.1), 1.2+f2,0.0+(LeftOrRight2*0.1),0.3,0.0);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,0.0,0.1,0.0);
	    	modelDrawer.addVertexWithUV(0.5, 0.2,1,0.1,0.1);
	    		
	    	modelDrawer.addVertexWithUV(1+(LeftOrRight1*0.1)+(LeftOrRight2*0.1), 1.2+f2,0.5+(LeftOrRight2*0.1),0.3,0.1);
	    	modelDrawer.addVertexWithUV(0+(LeftOrRight1*0.1)+(LeftOrRight2*0.1), 1.2+f2,0.5+(LeftOrRight2*0.1),0.3,0.0);
	    	modelDrawer.addVertexWithUV(0, 0.2,0.5,0.1,0.0);
	    	modelDrawer.addVertexWithUV(1, 0.2,0.5,0.10,0.1);
	    }
	    
	    /**
	     * Renders an object using the given texture.
	     */
	    public void renderSpikePlant()
	    {	
	    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.1,0.1);
	    	modelDrawer.addVertexWithUV(1.0, 0.2,0.0,0.1,0.0);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,0.0,0.0,0.0);
	    	modelDrawer.addVertexWithUV(0.0, 0.2,1.0,0.0,0.1);
	    	modelDrawer.addVertexWithUV(1.0, 0.57,1.0,0.1,0.1);
	    	modelDrawer.addVertexWithUV(1.0, -0.13,0.0,0.1,0.0);
	    	modelDrawer.addVertexWithUV(0.0, -0.17,0.0,0.0,0.0);
	    	modelDrawer.addVertexWithUV(0.0, 0.56,0.98,0.0,0.1);
	    	modelDrawer.addVertexWithUV(1.0, 0.2,1.0,0.1,0.1);
	    	modelDrawer.addVertexWithUV(1.0, 0.57,-0.063,0.1,0.0);
	    	modelDrawer.addVertexWithUV(0.0, 0.27,-0.02,0.0,0.0);
	    	modelDrawer.addVertexWithUV(0.0, -0.098,1.0,0.0,0.1);
	   }
}