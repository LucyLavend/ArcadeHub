package nl.miystengine.entity;

import java.util.List;
import org.lwjgl.input.Keyboard;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.KeySettings;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.audio.AudioMaster;
import nl.miystengine.client.audio.Source;
import nl.miystengine.client.gui.ScreenGui;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.ObjectRenderer;
import nl.miystengine.client.renderer.entity.BasicEntityRender;
import nl.miystengine.client.renderer.entity.EntityRendererBodyParts;
import nl.miystengine.client.renderer.entity.EntityCrates;
import nl.miystengine.client.water.WaterRender;
import nl.miystengine.util.MathHelper;
import nl.miystengine.util.MovementInputFromOptions;
import nl.miystengine.util.Session;
import nl.miystengine.world.World;

public class PlayerSPEntity extends EntityPlayer
{
    public MovementInputFromOptions movementInput;
    protected MiystEngine worldstructureblahxD;
    public int RunningTicksLeft;
    public float renderArmYaw;
    public float renderArmPitch;
    public float prevRenderArmYaw;
    public float prevRenderArmPitch;

    public PlayerSPEntity(MiystEngine sw, World w)
    {
        super(w);
        this.worldstructureblahxD = sw;
    }

    public void updateEntityActionState()
    {
        super.updateEntityActionState();
        this.moveStrafing = this.movementInput.moveStrafe;
        this.moveForward = this.movementInput.moveForward;
        this.isEntityJumping = this.movementInput.jump;
        this.prevRenderArmYaw = this.renderArmYaw;
        this.prevRenderArmPitch = this.renderArmPitch;
        this.renderArmPitch = (float)((double)this.renderArmPitch + (double)(this.rotationPitch - this.renderArmPitch) * 0.5D);
        this.renderArmYaw = (float)((double)this.renderArmYaw + (double)(this.rotationYaw - this.renderArmYaw) * 0.5D);
    }

    private int layDownTimer = 0;
    private int crouchTimer = 0;
    public static boolean canMove = true;
    private int footstep = 0;

    /**
     * Called frequently so the entity can update its state every tick as required.
     */
    public void onLivingUpdate()
    {
    	if(Keyboard.isKeyDown(Keyboard.KEY_W) || Keyboard.isKeyDown(Keyboard.KEY_S) || Keyboard.isKeyDown(Keyboard.KEY_A) || Keyboard.isKeyDown(Keyboard.KEY_D))
    	{
    		if(this.footstep == 0)
    		{
    		 Source source = new Source(false);
    		 source.setPosition((float)this.posX,(float)this.posY - 1.8F,(float)this.posZ);
    		 source.setSoundDistance(5F, 7F, 9F);
    			 
			 if(this.isRunning())
			 {
				 source.setVolume(((float)MiystEngine.miystengine.rand.nextInt(20)) + 20F); 
				 this.footstep = 14;
			 }
			 else
			 {
				 source.setVolume(((float)MiystEngine.miystengine.rand.nextInt(20)) + 10F); 
				 this.footstep = 18;
			 }
			 MiystEngine.miystengine.getGame().playFootsteps(source);
    		}
    	}
    	else 
    	{
    		this.footstep = 0;
    	}
    	
    	if(this.footstep > 0)
    	{
    		--this.footstep;
    	}
    	
        if(this.RunningTicksLeft > 0)
        {
            --this.RunningTicksLeft;

            if (this.RunningTicksLeft == 1)
            {
                this.setRunning(false);
                this.RunningTicksLeft = 0;
            }
        }
 
            this.movementInput.updatePlayerMoveState();
            
          
            if(MovementInputFromOptions.canMove && this.layDownTimer == 0 && !this.isLayingdown() && Keyboard.isKeyDown(KeySettings.LayDown))
            {
                this.layDownTimer = 9;
            	this.setLayingdown(true);
            	this.setCrouching(false);
            }
            else if(MovementInputFromOptions.canMove && this.layDownTimer < 5 && Keyboard.isKeyDown(KeySettings.LayDown))
            {
            	this.setLayingdown(false);
            	this.layDownTimer = -8;
            }
            
            if(MovementInputFromOptions.canMove && !this.isLayingdown() && !this.isCrouching() && this.crouchTimer == 0 && Keyboard.isKeyDown(KeySettings.Crouch))
            {
                this.crouchTimer = 8;
                this.setCrouching(true);
                this.setLayingdown(false);
            }
            else if(MovementInputFromOptions.canMove && this.crouchTimer < 5 && Keyboard.isKeyDown(KeySettings.Crouch))
            {
            	this.setCrouching(false);
            	this.crouchTimer = -8;
            }
            
        	
            if(!this.isRunning() && this.layDownTimer <= 0)
            {
            	this.movementInput.moveStrafe *= 0.3F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.movementInput.moveForward *= 0.3F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
            }
            else if(this.crouchTimer > 0 && !this.isRunning())
            {
            	this.movementInput.moveStrafe *= 0.1F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.movementInput.moveForward *= 0.1F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.setCrouching(true);
                this.setLayingdown(false);
            }
            else if(this.layDownTimer > 0 && !this.isRunning())
            {
            	if(EntityRendererBodyParts.crawlingMove)
            	{
            		this.movementInput.moveStrafe *= 0.08F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
            		this.movementInput.moveForward *= 0.08F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
            	}
            	else
            	{
            		this.movementInput.moveStrafe = 0F;
            		this.movementInput.moveForward = 0F;  
            	}
                this.setLayingdown(true);
                this.setCrouching(false);
            }
            else if(this.crouchTimer > 0 && this.isRunning())
            {
            	this.movementInput.moveStrafe *= 0.15F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.movementInput.moveForward *= 0.15F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.setCrouching(true);
                this.setLayingdown(false);
            }
            else if(this.layDownTimer > 0 && this.isRunning())
            {
            	if(EntityRendererBodyParts.crawlingMove)
            	{
            		this.movementInput.moveStrafe *= 0.1F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
            		this.movementInput.moveForward *= 0.1F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
            	}
            	else
            	{
            		this.movementInput.moveStrafe = 0F;
            		this.movementInput.moveForward = 0F;  
            	}
                this.setLayingdown(true);
                this.setCrouching(false);
            }
            else if(this.isRunning())
            {
            	this.movementInput.moveStrafe *= 0.35F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.movementInput.moveForward *= 0.35F / (MiystEngine.miystengine.theWorld.StructureWorldInfo.gravity / 10);
                this.setCrouching(false);
                this.setLayingdown(false);
            }
  
            if(this.Crouching)
            {
            	if(this.isRunning())
            	{
            		this.noiseMakingArea = 1.8F;
            	}
            	else
            	{
            		this.noiseMakingArea = 1.2F;
            	} 
            	this.bodyPosition = 1F;
            }
            else if(this.layingDown)
            {
            	if(this.isRunning())
            	{
            		this.noiseMakingArea = 0.9F;
            	}
            	else
            	{
            		this.noiseMakingArea = 0.6F;
            	} 
            	this.bodyPosition = 0.1F;
            }
            else
            {
            	if(this.isRunning())
            	{
            		this.noiseMakingArea = 6.8F;
            	}
            	else
            	{
            		this.noiseMakingArea = 3.8F;
            	} 
            	this.bodyPosition = 1.8F;
            }
            
            if(this.layDownTimer > 1)
            {
            	--this.layDownTimer;
            }
            if(this.layDownTimer < 0)
            {
            	++this.layDownTimer;
            }
            
            if(this.crouchTimer > 1)
            {
            	--this.crouchTimer;
            }
            if(this.crouchTimer < 0)
            {
            	++this.crouchTimer;
            }
            
        
            if(MovementInputFromOptions.canMove && !this.isRunning() && Keyboard.isKeyDown(KeySettings.Running))
            {
                this.setRunning(true);
            }
            else if(this.movespeedX == 0 && this.movespeedZ == 0)
            {
            	this.setRunning(false);
            }
            
            super.onLivingUpdate();  
    }

   
    /**
     * Set Running switch for Entity.
     */
    public void setRunning(boolean b)
    {
        super.setRunning(b);
        if(b)
        {
        	this.RunningTicksLeft = 50;
        }
    }

    /**
     * Returns whether the entity is in a local (client) world
     */
    public boolean isClientWorld()
    {
        return true;
    }

	@Override
	protected void entityInit() {}
}
