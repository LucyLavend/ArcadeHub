package nl.miystengine.client.gui;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.imageio.ImageIO;
import nl.miystengine.client.RefreshShaderKeybinds;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.GameProfile;
import nl.miystengine.client.KeySettings;
import nl.miystengine.client.MouseControl;
import nl.miystengine.client.PassingSeconds;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.gui.console.AcceptedKeyboardKeys;
import nl.miystengine.client.gui.console.ConsoleCommands;
import nl.miystengine.client.multiplayer.NetHandlerPlayClient;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.Tessellator;
import nl.miystengine.client.renderer.texture.ITextureObject;
import nl.miystengine.client.shaders.Loader;
import nl.miystengine.client.shaders.basicscreen.Fbo;
import nl.miystengine.entity.Entity;
import nl.miystengine.entity.EntityLivingBase;
import nl.miystengine.entity.EntityPlayer;
import nl.miystengine.util.MathHelper;
import nl.miystengine.util.MovementInputFromOptions;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.vector.Vector3f;

public class IngameGui extends ScreenGui
{
    public float prevVignetteBrightness = 1.0F;
    public static List<ArrayListStrings> arraylistTips = new ArrayList<ArrayListStrings>();
	
    public IngameGui()
    {
        this.backGroundTexture = "/menu/none.png";
    }

     public int timePassed = 0;
     
     public class ArrayListConsole
     {
     	public float x;
     	public float y;
     	public String text;

     	public ArrayListConsole(float xP1,float yP1, String s)
     	{
     		this.x = xP1;
     		this.y = yP1;
     		this.text = s;
     	}
     }

     public static int Hours;
     public static int minutes;
     public static int seconds;
     public static long miliSeconds;
     public static int addTime = 0;
     public boolean showGui = true;
     public FontRenderer font;
     
     public static boolean nearbyObject = false;
     public static String text = "";
     public static int worldTime = 0;
     //Console
     public static boolean openConsole = false;
     private int consoleOpenTimer = 0;
     private String consoleText = "";
     public int showCommandResult = 0;
     private ConsoleCommands commands = new ConsoleCommands();
     private int getSeconds = 0;
     
     public AcceptedKeyboardKeys keyList = new AcceptedKeyboardKeys();
 
    /**
     * Render the in-game overlay..
     */
    public void renderGameOverlay(float bright) 
    {
	 	GL11.glPushMatrix();
	 	GL11.glEnable(GL11.GL_BLEND);
	 	if(MiystEngine.miystengine.fontRenderer!=null&&this.font==null)
        {
        	this.font = MiystEngine.miystengine.fontRenderer;
        }
////////////////Console///////////////////	 
	 	if(this.openConsole)
	 	{
	 		if(Keyboard.isKeyDown(Keyboard.KEY_RETURN) && this.consoleText.length() > 0)
	 		{
	 			EntityPlayer player = MiystEngine.miystengine.thePlayer;
	 			this.consoleText = this.commands.command(this.consoleText,new Vector3f((float)player.posX,(float)player.posY,(float)player.posZ));
	 			this.showCommandResult = 500;
	 			this.openConsole = false;
	 			MovementInputFromOptions.canMove = true;
	 		}
	 	}
		
	 	//Result command answer
	 	if(this.showCommandResult > 0)
	 	{
	 		this.drawStringWithColor(font, "Console: " + this.consoleText, 2, 116, 1F,0F,0F,1F);
	 	}
	 	
	 	if(this.showCommandResult > 1 && this.showCommandResult < 4)
	 	{
	 		this.consoleText = "";
	 	}
	 	//End
	 	
	 	if(Keyboard.isKeyDown(Keyboard.KEY_TAB) && this.consoleOpenTimer == 0)
	 	{
	 		if(!this.openConsole)
	 		{
	 			this.openConsole = true;
	 			MovementInputFromOptions.canMove = false;
	 			this.consoleOpenTimer = 100;
	 		}
	 		else
	 		{
	 			this.openConsole = false;
	 			MovementInputFromOptions.canMove = true;
	 			this.consoleOpenTimer = 100;
	 		}
	 	}
	 	
	 	if(this.openConsole)
	 	{
	 		this.drawStringWithColor(font, "Console: " + this.consoleText, 2, 116, 1F,0F,0F,1F);	    
	 	}
	 	
	 	if(this.consoleOpenTimer > 0)
	 	{
	 		--this.consoleOpenTimer;
	 	}
////////////////////////////////////////////////////////////////////////////
        MiystEngine.miystengine.entityRenderer.camera.setupOverlayRendering();
	 	
        if(MiystEngine.miystengine.thePlayer != null)
        {
	        int t = (int)((float)MiystEngine.miystengine.thePlayer.worldObj.getStructureWorldInfo().getWorldTime()/100);
	        this.worldTime = t;
	        
		 	if(font != null && MiystEngine.miystengine != null && MiystEngine.miystengine.thePlayer != null && MiystEngine.miystengine.fontRenderer != null)
	        {
	        
	     	int days = ((t/60)/24);
	     	Hours = (t/60) - (((t/60)/24)*24);
	     	minutes = (t)-(Hours*60)-(days*60*24);
	     	String fakeSeconds = (""+(int)System.currentTimeMillis());
	     	if(!fakeSeconds.substring(fakeSeconds.length()-3, fakeSeconds.length()-2).contains("_"))
	     	{
	     		seconds = Integer.parseInt(fakeSeconds.substring(fakeSeconds.length()-3, fakeSeconds.length()-2));
	     	}
	     	else
	     	{
	     		seconds = 0;
	     	}
	     	
	     	miliSeconds = System.nanoTime();
	     	
	     	 int fps = MiystEngine.getMiystEngine().debugFPS;
	     	 
	     	 if(MiystEngine.getMiystEngine().settings.detectFPS)
	     	 {
	     		if(MiystEngine.getMiystEngine().settings.getFPS != 0)
	     		{
	     			if(MiystEngine.getMiystEngine().settings.getFPS - 30 < fps)
	     			{
	     				++MiystEngine.getMiystEngine().settings.getLowerFPSTimes;
	     			}
	     			else
	     			{
	     				if(MiystEngine.getMiystEngine().settings.getLowerFPSTimes != 0)
	     				{
	     					MiystEngine.getMiystEngine().settings.getLowerFPSTimes = 0;
	     				}
	     				MiystEngine.getMiystEngine().settings.getFPS = (MiystEngine.getMiystEngine().settings.getFPS + fps)/ 2;
	     			}
	     		}
	     		else
	     		{
	     			MiystEngine.getMiystEngine().settings.getFPS = fps;
	     		}
	     	 }
	     	 
	     	 if(MiystEngine.getMiystEngine().settings.getLowerFPSTimes > 5000)
	     	 {
	     		//MiystEngine.getMiystEngine().settings.renderHighTerrain = 3;
	     		//MiystEngine.getMiystEngine().settings.noNormalmap = false;
	     		//MiystEngine.getMiystEngine().settings.getLowerFPSTimes = 0;
	     		//MiystEngine.getMiystEngine().settings.getFPS = 0;
	     	 }
	     	 
	         if(!RefreshShaderKeybinds.hideStatGui)
	         {
	        	this.drawString(MiystEngine.miystengine.fontRenderer,"" + fps + " fps", 2, 54, 14737632);
		 		this.drawString(font, "x: "+Double.valueOf(MiystEngine.miystengine.thePlayer.posX), 2, 64, 14737632);
	     		this.drawString(font, "y: "+Double.valueOf(MiystEngine.miystengine.thePlayer.posY), 2, 72, 14737632);
	     		this.drawString(font, "z: "+Double.valueOf(MiystEngine.miystengine.thePlayer.posZ), 2, 80, 14737632);
	     		this.drawString(font, "Direction: " +  this.getLookDirection(), 2, 88, 14737632);  
	     		this.drawString(font, "Days: " + days + " Hours: " + Hours + " Minutes: " + minutes + " Seconds: " + seconds, 2, 96, 14737632);
	     		this.drawString(font, "Yaw: " + MiystEngine.getMiystEngine().thePlayer.rotationYaw + " Pitch: " + MiystEngine.getMiystEngine().thePlayer.rotationPitch, 2, 96 + 8, 14737632);
	         }
	        }
        }
        
        for(int i = 0;i < arraylistTips.size();++i)
        {
        	if(arraylistTips.get(i).getRGB() != null)
        	{
        		if(arraylistTips.get(i).timer() < 501)
	        	{
	        		GL11.glEnable(GL11.GL_BLEND);
	        		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
	        	  	this.drawStringWithColor(font, "Picked up: " + arraylistTips.get(i).tipName(), 2, (Display.getHeight() / 2) - (i * 10), arraylistTips.get(i).getRGB()[0], arraylistTips.get(i).getRGB()[1], arraylistTips.get(i).getRGB()[2],arraylistTips.get(i).timer() / 500F);
	        	}
	        	else
	        	{
	        		this.drawStringWithColor(font, "Picked up: " + arraylistTips.get(i).tipName(), 2, (Display.getHeight() / 2) - (i * 10), arraylistTips.get(i).getRGB()[0], arraylistTips.get(i).getRGB()[1], arraylistTips.get(i).getRGB()[2],1F);
	        	}
	        	arraylistTips.get(i).setTimer(-1);
	        	if(arraylistTips.get(i).timer() == 0)
	        	{
	        		arraylistTips.remove(i);
	        	}
        	}
        	else
        	{
	        	if(arraylistTips.get(i).timer() < 501)
	        	{
	        		GL11.glEnable(GL11.GL_BLEND);
	        		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
	        	  	this.drawStringWithColor(font, "Picked up: " + arraylistTips.get(i).tipName(), 2, (Display.getHeight() / 2) - (i * 10), 1F,1F,1F,arraylistTips.get(i).timer() / 500F);
	        	}
	        	else
	        	{
	        		this.drawStringWithColor(font, "Picked up: " + arraylistTips.get(i).tipName(), 2, (Display.getHeight() / 2) - (i * 10), 1F,1F,1F,1F);
	        	}
	        	arraylistTips.get(i).setTimer(-1);
	        	if(arraylistTips.get(i).timer() == 0)
	        	{
	        		arraylistTips.remove(i);
	        	}
        	}
        } 
	 	GL11.glDisable(GL11.GL_BLEND);
	 	GL11.glPopMatrix(); 
    }
  
    
    public static String getLookDirection()
    {
    	int compass = MathHelper.floor_double((double)(MiystEngine.getMiystEngine().thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
    	return Compass.directions[compass];
    }
  
    private int backspaceDown = 0;
    
    /**
     * Handles keyboard input.
     */
    public void handleKeyboardInputs()
    {
        if (Keyboard.getEventKeyState() && this.openConsole)
        {
            this.keypresseds(Keyboard.getEventCharacter(), Keyboard.getEventKey());
        }
        
        if(Keyboard.isKeyDown(Keyboard.KEY_BACK) && this.consoleText.length() > 0 && this.backspaceDown == 1 && this.openConsole)
 		{
 			this.consoleText = this.consoleText.substring(0, this.consoleText.length() - 1);
 		}
    }
    
    protected void keypresseds(char c, int i)
    {
    	String text = keyList.getEacceptedKeyC();
 		if(Keyboard.isKeyDown(Keyboard.KEY_BACK) && this.consoleText.length() > 0)
 		{
 			this.consoleText = this.consoleText.substring(0, this.consoleText.length() - 1);
 			this.backspaceDown = 1;
 		}
 		else if((c +"").equals(text))
 		{
 			this.consoleText += c;
 			this.backspaceDown = 0;
 		}
    }
   
    public void drawTextured(double x, double y, double widht,double height, double moveX,double moveY,int texture)
    {
    	GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
        float var7 = 0.00390625F;
        float var8 = 0.00390625F;
        Tessellator tes = Tessellator.instance;
        tes.startDrawingQuads();
        tes.addVertexWithUV(x + moveX, y + height + moveY, this.zLevel,0, 1);
        tes.addVertexWithUV((x + widht)+moveX, (y + height)+ moveY, this.zLevel, 1, 1);
        tes.addVertexWithUV((x + widht)+moveX, y + moveY, this.zLevel, 1, 0);
        tes.addVertexWithUV(x + moveX , y + moveY, this.zLevel, 0, 0);
        tes.draw();
    }
   

    
    /**
     * The update tick for the ingame UI
     */
    public void updateTick()
    {     
       
    }
}
