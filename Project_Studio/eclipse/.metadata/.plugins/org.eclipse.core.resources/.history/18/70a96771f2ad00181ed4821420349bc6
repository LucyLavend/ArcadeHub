package nl.thestructureworld.world;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.Callable;

import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.crash.CrashReport;
import nl.thestructureworld.crash.CrashReportCategory;
import nl.thestructureworld.crash.ExceptionA;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.entity.EntitySpider;
import nl.thestructureworld.entity.player.EntityPlayer;
import nl.thestructureworld.item.ItemData;
import nl.thestructureworld.nbt.NBTTagCompound;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.terrainandobjects.Material;
import nl.thestructureworld.tileentity.TileEntity;
import nl.thestructureworld.util.AxisAlignedBB;
import nl.thestructureworld.util.AreaCoordinates;
import nl.thestructureworld.util.Facing;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.util.MovingObjectPosition;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.util.Vec3;
import nl.thestructureworld.world.area.Area;
import nl.thestructureworld.world.area.IAreaProvider;
import nl.thestructureworld.world.storage.ISaveHandler;
import nl.thestructureworld.world.storage.MapStorage;
import nl.thestructureworld.world.storage.StructureWorldInfo;

public abstract class World implements ITerrainObjectAccess
{
    public boolean scheduledUpdatesAreImmediate;
    public List loadedEntityList = new ArrayList();
    public List unloadedEntityList = new ArrayList();
    public List field_147482_g = new ArrayList();
    private List field_147484_a = new ArrayList();
    private List field_147483_b = new ArrayList();
    public List playerEntities = new ArrayList();
    public List weatherEffects = new ArrayList();
    private long cloudColour = 16777215L;
    public int skylightSubtracted;
    protected int updateLCG = (new Random()).nextInt();
    protected float prevRainingStrength;
    protected float rainingStrength;
    protected float prevThunderingStrength;
    protected float thunderingStrength;
    public int lastLightningBolt;
    public String difficultySetting;
    public Random rand = new Random();
    public int WindStrengh = 1;
    public int cloudWeather = 0;
    public int cloudsky = 0;
    
    /** The WorldProvider instance that World uses. */
    public final WorldProvider provider;
    protected List worldAccesses = new ArrayList();
    protected IAreaProvider AreaProvider;
    protected final ISaveHandler saveHandler;
    public float Gravity = 9.81F;
    public StructureWorldInfo StructureWorldInfo;
    public boolean findingSpawnPoint;
    public MapStorage mapStorage;
    private final Calendar theCalendar = Calendar.getInstance();

    /** This is set to true for client worlds, and false for server worlds. */
    public boolean isClient;

    /** Positions to update */
    protected Set activeAreaSet = new HashSet();

    /** number of ticks until the next random ambients play */
    private int ambientTickCountdown;

    /** indicates if enemies are spawned or not */
    protected boolean spawnHostileMobs;

    /** A flag indicating whether we should spawn peaceful mobs. */
    protected boolean spawnPeacefulMobs;
    public ArrayList collidingBoundingBoxes;
    private boolean field_147481_N;

	
 
    int[] lightUpdateTerrainObjectList;
   
   
    public WorldAreaManager getWorldAreaManager()
    {
        return this.provider.worldAreaMgr;
    }

    public World(ISaveHandler p_i45368_1_, String p_i45368_2_, WorldProvider p_i45368_3_, WorldSettings p_i45368_4_)
    {
        this.ambientTickCountdown = this.rand.nextInt(12000);
        this.spawnHostileMobs = true;
        this.spawnPeacefulMobs = true;
        this.collidingBoundingBoxes = new ArrayList();
        this.lightUpdateTerrainObjectList = new int[32768];
        this.saveHandler = p_i45368_1_;
        this.StructureWorldInfo = new StructureWorldInfo(p_i45368_4_, p_i45368_2_);
        this.difficultySetting = this.StructureWorldInfo.getDifficulty();
        this.provider = p_i45368_3_;
        this.mapStorage = new MapStorage(p_i45368_1_);
        p_i45368_3_.registerWorld(this);
        this.AreaProvider = this.createAreaProvider();
        this.Gravity = this.StructureWorldInfo.gravity;
     }

    public World(ISaveHandler p_i45369_1_, String p_i45369_2_, WorldSettings p_i45369_3_, WorldProvider p_i45369_4_)
    {
        this.ambientTickCountdown = this.rand.nextInt(12000);
        this.spawnHostileMobs = true;
        this.spawnPeacefulMobs = true;
        this.collidingBoundingBoxes = new ArrayList();
        this.lightUpdateTerrainObjectList = new int[32768];
        this.saveHandler = p_i45369_1_;
        this.mapStorage = new MapStorage(p_i45369_1_);
        this.StructureWorldInfo = p_i45369_1_.loadStructureWorldInfo();
        this.provider = (WorldProvider)new WorldProviderSurface();
        if (this.StructureWorldInfo == null)
        {
            this.StructureWorldInfo = new StructureWorldInfo(p_i45369_3_, p_i45369_2_);
        }
        else
        {
            this.StructureWorldInfo.setWorldName(p_i45369_2_);
        }
        this.provider.registerWorld(this);
        this.AreaProvider = this.createAreaProvider();
        
        if (!this.StructureWorldInfo.isInitialized())
        {
            try
            {
                this.initialize(p_i45369_3_);
            }
            catch (Throwable var10)
            {
                CrashReport var7 = CrashReport.makeCrashReport(var10, "Exception initializing level");

                try
                {
                    this.addStructureWorldInfoToCrashReport(var7);
                }
                catch (Throwable var9)
                {
                    ;
                }

                throw new ReportedException(var7);
            }

            this.StructureWorldInfo.setServerInitialized(true);
        }
        this.calculateInitialSkylight();
        this.Gravity = this.StructureWorldInfo.gravity;
    }

    /**
     * Creates the Area provider for this world. Called in the constructor. Retrieves provider from worldProvider?
     */
    protected abstract IAreaProvider createAreaProvider();

    protected void initialize(WorldSettings p_72963_1_)
    {
        this.StructureWorldInfo.setServerInitialized(true);
    }

    /**
     * Sets a new spawn location by finding an uncovered TerrainObject at a random (x,z) location in the Area.
     */
    public void setSpawnLocation()
    {
        this.setSpawnLocation(8, 64, 8);
    }

    public TerrainObject getTopTerrainObject(int p_147474_1_, int p_147474_2_)
    {
        int var3;

        for (var3 = 63; !this.isAirTerrainObject(p_147474_1_, var3 + 1, p_147474_2_); ++var3)
        {
            ;
        }

        return this.getTerrainObject(p_147474_1_, var3, p_147474_2_);
    }
    
    
    
    
    public TerrainObject getTerrainObject(double x, double y, double z)
    {
        if(x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000 && y >= 0 && y < 256)
        {
            Area var4 = null;

            try
            {
                var4 = this.getAreaFromAreaCoords((int)x >> 4, (int)z >> 4);
                return var4.getTerrainObjectInArea((int)x & 15, (int)y, (int)z & 15);
            }
            catch (Throwable var8)
            {
                CrashReport var6 = CrashReport.makeCrashReport(var8, "Exception getting TerrainObject type in world");
                CrashReportCategory var7 = var6.makeCategory("Requested TerrainObject coordinates");
                var7.addCrashSection("Found Area", Boolean.valueOf(var4 == null));
                var7.addCrashSection("Location", CrashReportCategory.getLocationInfo((int)x,(int) y, (int) z));
                throw new ReportedException(var6);
            }
        }
        else
        {
            return TerrainObject.air;
        }
    }

    public TerrainObject getTerrainObject(int x, int y, int z)
    {
        if (x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000 && y >= 0 && y < 256)
        {
            Area var4 = null;

            try
            {
                var4 = this.getAreaFromAreaCoords(x >> 4, z >> 4);
                return var4.getTerrainObjectInArea(x & 15, y, z & 15);
            }
            catch (Throwable var8)
            {
                CrashReport var6 = CrashReport.makeCrashReport(var8, "Exception getting TerrainObject type in world");
                CrashReportCategory var7 = var6.makeCategory("TerrainObject coordinates");
                var7.addCrashSection("Location", CrashReportCategory.getLocationInfo(x, y, z));
                var7.addCrashSection("Found Area", Boolean.valueOf(var4 == null));
                throw new ReportedException(var6);
            }
        }
        else
        {
            return TerrainObject.air;
        }
    }

    /**
     * Returns true if the TerrainObject at the specified coordinates is empty
     */
    public boolean isAirTerrainObject(int p_147437_1_, int p_147437_2_, int p_147437_3_)
    {
        return this.getTerrainObject(p_147437_1_, p_147437_2_, p_147437_3_).getMaterial() == Material.air;
    }

    /**
     * Returns whether a TerrainObject exists at world coordinates x, y, z
     */
    public boolean TerrainObjectExists(int p_72899_1_, int p_72899_2_, int p_72899_3_)
    {
        return p_72899_2_ >= 0 && p_72899_2_ < 256 ? this.AreaExists(p_72899_1_ >> 4, p_72899_3_ >> 4) : false;
    }

    /**
     * Checks if any of the Areas within distance (argument 4) BasicEntityRender of the given TerrainObject exist
     */
    public boolean doAreasNearAreaExist(int p_72873_1_, int p_72873_2_, int p_72873_3_, int p_72873_4_)
    {
        return this.checkAreasExist(p_72873_1_ - p_72873_4_, p_72873_2_ - p_72873_4_, p_72873_3_ - p_72873_4_, p_72873_1_ + p_72873_4_, p_72873_2_ + p_72873_4_, p_72873_3_ + p_72873_4_);
    }

    /**
     * Checks between a min and max all the Areas inbetween actually exist. Args: minX, minY, minZ, maxX, maxY, maxZ
     */
    public boolean checkAreasExist(int p_72904_1_, int p_72904_2_, int p_72904_3_, int p_72904_4_, int p_72904_5_, int p_72904_6_)
    {
        if (p_72904_5_ >= 0 && p_72904_2_ < 256)
        {
            p_72904_1_ >>= 4;
            p_72904_3_ >>= 4;
            p_72904_4_ >>= 4;
            p_72904_6_ >>= 4;

            for (int var7 = p_72904_1_; var7 <= p_72904_4_; ++var7)
            {
                for (int var8 = p_72904_3_; var8 <= p_72904_6_; ++var8)
                {
                    if (!this.AreaExists(var7, var8))
                    {
                        return false;
                    }
                }
            }

            return true;
        }
        else
        {
            return false;
        }
    }

    /**
     * Returns whether a Area exists at Area coordinates x, y
     */
    protected boolean AreaExists(int p_72916_1_, int p_72916_2_)
    {
        return this.AreaProvider.AreaExists(p_72916_1_, p_72916_2_);
    }

    /**
     * Returns a Area looked up by TerrainObject coordinates. Args: x, z
     */
    public Area getAreaFromTerrainObjectCoords(int p_72938_1_, int p_72938_2_)
    {
        return this.getAreaFromAreaCoords(p_72938_1_ >> 4, p_72938_2_ >> 4);
    }

    /**
     * Returns back a Area looked up by Area coordinates Args: x, y
     */
    public Area getAreaFromAreaCoords(int x, int z)
    {
        return this.AreaProvider.provideArea(x, z);
    }

    /**
     * Sets the TerrainObject ID and metadata at a given location. Args: X, Y, Z, new TerrainObject ID, new metadata, flags. Flag 1 will
     * cause a TerrainObject update. Flag 2 will send the change to clients (you almost always want this). Flag 4 prevents the
     * TerrainObject from being re-rendered, if this is a client world. Flags can be added together.
     */
    public boolean setTerrainObject(int p_147465_1_, int p_147465_2_, int p_147465_3_, TerrainObject p_147465_4_, int p_147465_5_, int p_147465_6_)
    {
        if (p_147465_1_ >= -30000000 && p_147465_3_ >= -30000000 && p_147465_1_ < 30000000 && p_147465_3_ < 30000000)
        {
            if (p_147465_2_ < 0)
            {
                return false;
            }
            else if (p_147465_2_ >= 256)
            {
                return false;
            }
            else
            {
                Area var7 = this.getAreaFromAreaCoords(p_147465_1_ >> 4, p_147465_3_ >> 4);
                TerrainObject var8 = null;

                if ((p_147465_6_ & 1) != 0)
                {
                    var8 = var7.getTerrainObjectInArea(p_147465_1_ & 15, p_147465_2_, p_147465_3_ & 15);
                }

                boolean var9 = var7.func_150807_a(p_147465_1_ & 15, p_147465_2_, p_147465_3_ & 15, p_147465_4_, p_147465_5_);

                return var9;
            }
        }
        else
        {
            return false;
        }
    }

    public boolean setTerrainObjectToAir(int x, int y, int z)
    {
        return this.setTerrainObject(x, y, z, TerrainObject.air, 0, 3);
    }

    public boolean func_147480_a(int p_147480_1_, int p_147480_2_, int p_147480_3_, boolean p_147480_4_)
    {
        TerrainObject var5 = this.getTerrainObject(p_147480_1_, p_147480_2_, p_147480_3_);

        if (var5.getMaterial() == Material.air)
        {
            return false;
        }
        else
        {
            if (p_147480_4_)
            {
                var5.dropTerrainObjectAsItem(this, p_147480_1_, p_147480_2_, p_147480_3_, 0, 0);
            }

            return this.setTerrainObject(p_147480_1_, p_147480_2_, p_147480_3_, TerrainObject.air, 0, 3);
        }
    }

    /**
     * Sets a TerrainObject by a coordinate
     */
    public boolean setTerrainObject(int x, int y, int z, TerrainObject o)
    {
        return this.setTerrainObject(x, y, z, o, 0, 3);
    }
     
    public boolean func_147477_a(int p_147477_1_, int p_147477_2_, int p_147477_3_, TerrainObject p_147477_4_)
    {
        return false;
    }

    /**
     * Checks if the specified TerrainObject is able to see the sky
     */
    public boolean canBasicEntityRendereeTheSky(int p_72937_1_, int p_72937_2_, int p_72937_3_)
    {
        return this.getAreaFromAreaCoords(p_72937_1_ >> 4, p_72937_3_ >> 4).canBasicEntityRendereeTheSky(p_72937_1_ & 15, p_72937_2_, p_72937_3_ & 15);
    }

    /**
     * Does the same as getTerrainObjectLightValue_do but without checking if its not a normal TerrainObject
     */
    public int getFullTerrainObjectLightValue(int p_72883_1_, int p_72883_2_, int p_72883_3_)
    {
        if (p_72883_2_ < 0)
        {
            return 0;
        }
        else
        {
            if (p_72883_2_ >= 256)
            {
                p_72883_2_ = 255;
            }

            return this.getAreaFromAreaCoords(p_72883_1_ >> 4, p_72883_3_ >> 4).getTerrainObjectLightValue(p_72883_1_ & 15, p_72883_2_, p_72883_3_ & 15, 0);
        }
    }

   
    /**
     * Returns the y coordinate with a TerrainObject in it at this x, z coordinate
     */
    @SuppressWarnings("unused")
	public int getHeightValue(int x, int z)
    {
        for(int Y= 255;Y>0;--Y)
        {
        	if(this.getTerrainObject(x, Y, z) != TerrainObject.air)
        	{
        	return Y;
        	}
        	else return 4;
        }
		return 4;
    }

    /**
     * Gets the heightMapMinimum field of the given Area, or 0 if the Area is not loaded. Coords are in TerrainObject. Args:
     * X, Z
     */
    public int getAreaHeightMapMinimum(int p_82734_1_, int p_82734_2_)
    {
        if (p_82734_1_ >= -30000000 && p_82734_2_ >= -30000000 && p_82734_1_ < 30000000 && p_82734_2_ < 30000000)
        {
            if (!this.AreaExists(p_82734_1_ >> 4, p_82734_2_ >> 4))
            {
                return 0;
            }
            else
            {
                Area var3 = this.getAreaFromAreaCoords(p_82734_1_ >> 4, p_82734_2_ >> 4);
                return var3.heightMapMinimum;
            }
        }
        else
        {
            return 64;
        }
    }

 

    /**
     * Checks whether its daytime by seeing if the light subtracted from the skylight is less than 4
     */
    public boolean isDaytime()
    {
        return this.skylightSubtracted < 4;
    }

    /**
     * Performs a raycast against all BasicEntityRender in the world except liquids.
     */
    public MovingObjectPosition rayTraceBasicEntityRender(Vec3 p_72933_1_, Vec3 p_72933_2_)
    {
        return this.func_147447_a(p_72933_1_, p_72933_2_, false, false, false);
    }

    /**
     * Performs a raycast against all BasicEntityRender in the world, and optionally liquids.
     */
    public MovingObjectPosition rayTraceBasicEntityRender(Vec3 p_72901_1_, Vec3 p_72901_2_, boolean p_72901_3_)
    {
        return this.func_147447_a(p_72901_1_, p_72901_2_, p_72901_3_, false, false);
    }

    public MovingObjectPosition func_147447_a(Vec3 p_147447_1_, Vec3 p_147447_2_, boolean p_147447_3_, boolean p_147447_4_, boolean p_147447_5_)
    {
        if (!Double.isNaN(p_147447_1_.xCoord) && !Double.isNaN(p_147447_1_.yCoord) && !Double.isNaN(p_147447_1_.zCoord))
        {
            if (!Double.isNaN(p_147447_2_.xCoord) && !Double.isNaN(p_147447_2_.yCoord) && !Double.isNaN(p_147447_2_.zCoord))
            {
                int var6 = MathHelper.floor_double(p_147447_2_.xCoord);
                int var7 = MathHelper.floor_double(p_147447_2_.yCoord);
                int var8 = MathHelper.floor_double(p_147447_2_.zCoord);
                int var9 = MathHelper.floor_double(p_147447_1_.xCoord);
                int var10 = MathHelper.floor_double(p_147447_1_.yCoord);
                int var11 = MathHelper.floor_double(p_147447_1_.zCoord);
                TerrainObject var12 = this.getTerrainObject(var9, var10, var11);
                int var13 = 0;

                if ((!p_147447_4_ || var12.getCollisionBoundingBoxFromPool(this,var9, var10, var11) != null) && var12.canCollideCheck(var13, p_147447_3_))
                {
                    MovingObjectPosition var14 = var12.collisionRayTrace(this,var9, var10, var11, p_147447_1_, p_147447_2_);

                    if (var14 != null)
                    {
                        return var14;
                    }
                }

                MovingObjectPosition var40 = null;
                var13 = 200;

                while (var13-- >= 0)
                {
                    if (Double.isNaN(p_147447_1_.xCoord) || Double.isNaN(p_147447_1_.yCoord) || Double.isNaN(p_147447_1_.zCoord))
                    {
                        return null;
                    }

                    if (var9 == var6 && var10 == var7 && var11 == var8)
                    {
                        return p_147447_5_ ? var40 : null;
                    }

                    boolean var41 = true;
                    boolean var15 = true;
                    boolean var16 = true;
                    double var17 = 999.0D;
                    double var19 = 999.0D;
                    double var21 = 999.0D;

                    if (var6 > var9)
                    {
                        var17 = (double)var9 + 1.0D;
                    }
                    else if (var6 < var9)
                    {
                        var17 = (double)var9 + 0.0D;
                    }
                    else
                    {
                        var41 = false;
                    }

                    if (var7 > var10)
                    {
                        var19 = (double)var10 + 1.0D;
                    }
                    else if (var7 < var10)
                    {
                        var19 = (double)var10 + 0.0D;
                    }
                    else
                    {
                        var15 = false;
                    }

                    if (var8 > var11)
                    {
                        var21 = (double)var11 + 1.0D;
                    }
                    else if (var8 < var11)
                    {
                        var21 = (double)var11 + 0.0D;
                    }
                    else
                    {
                        var16 = false;
                    }

                    double var23 = 999.0D;
                    double var25 = 999.0D;
                    double var27 = 999.0D;
                    double var29 = p_147447_2_.xCoord - p_147447_1_.xCoord;
                    double var31 = p_147447_2_.yCoord - p_147447_1_.yCoord;
                    double var33 = p_147447_2_.zCoord - p_147447_1_.zCoord;

                    if (var41)
                    {
                        var23 = (var17 - p_147447_1_.xCoord) / var29;
                    }

                    if (var15)
                    {
                        var25 = (var19 - p_147447_1_.yCoord) / var31;
                    }

                    if (var16)
                    {
                        var27 = (var21 - p_147447_1_.zCoord) / var33;
                    }

                    boolean var35 = false;
                    byte var42;

                    if (var23 < var25 && var23 < var27)
                    {
                        if (var6 > var9)
                        {
                            var42 = 4;
                        }
                        else
                        {
                            var42 = 5;
                        }

                        p_147447_1_.xCoord = var17;
                        p_147447_1_.yCoord += var31 * var23;
                        p_147447_1_.zCoord += var33 * var23;
                    }
                    else if (var25 < var27)
                    {
                        if (var7 > var10)
                        {
                            var42 = 0;
                        }
                        else
                        {
                            var42 = 1;
                        }

                        p_147447_1_.xCoord += var29 * var25;
                        p_147447_1_.yCoord = var19;
                        p_147447_1_.zCoord += var33 * var25;
                    }
                    else
                    {
                        if (var8 > var11)
                        {
                            var42 = 2;
                        }
                        else
                        {
                            var42 = 3;
                        }

                        p_147447_1_.xCoord += var29 * var27;
                        p_147447_1_.yCoord += var31 * var27;
                        p_147447_1_.zCoord = var21;
                    }

                    Vec3 var36 = Vec3.createVectorHelper(p_147447_1_.xCoord, p_147447_1_.yCoord, p_147447_1_.zCoord);
                    var9 = (int)(var36.xCoord = (double)MathHelper.floor_double(p_147447_1_.xCoord));

                    if (var42 == 5)
                    {
                        --var9;
                        ++var36.xCoord;
                    }

                    var10 = (int)(var36.yCoord = (double)MathHelper.floor_double(p_147447_1_.yCoord));

                    if (var42 == 1)
                    {
                        --var10;
                        ++var36.yCoord;
                    }

                    var11 = (int)(var36.zCoord = (double)MathHelper.floor_double(p_147447_1_.zCoord));

                    if (var42 == 3)
                    {
                        --var11;
                        ++var36.zCoord;
                    }

                    TerrainObject var37 = this.getTerrainObject(var9, var10, var11);
                    int var38 = 0;

                    if (!p_147447_4_ || var37.getCollisionBoundingBoxFromPool(this,var9, var10, var11) != null)
                    {
                        if (var37.canCollideCheck(var38, p_147447_3_))
                        {
                            MovingObjectPosition var39 = var37.collisionRayTrace(this,var9, var10, var11, p_147447_1_, p_147447_2_);

                            if (var39 != null)
                            {
                                return var39;
                            }
                        }
                        else
                        {
                            var40 = new MovingObjectPosition(var9, var10, var11, var42, p_147447_1_, false);
                        }
                    }
                }

                return p_147447_5_ ? var40 : null;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return null;
        }
    }

    /**
     * Plays a sound at the entity's position. Args: entity, sound, volume (relative to 1.0), and frequency (or pitch,
     * also relative to 1.0).
     */
    public void playSoundAtEntity(Entity p_72956_1_, String p_72956_2_, float p_72956_3_, float p_72956_4_)
    {
        for (int var5 = 0; var5 < this.worldAccesses.size(); ++var5)
        {
            ((IWorldAccess)this.worldAccesses.get(var5)).playSound(p_72956_2_, p_72956_1_.posX, p_72956_1_.posY - (double)p_72956_1_.eyeOffset, p_72956_1_.posZ, p_72956_3_, p_72956_4_);
        }
    }

    /**
     * Plays sound to all near players except the player reference given
     */
    public void playSoundToNearExcept(EntityPlayer p_85173_1_, String p_85173_2_, float p_85173_3_, float p_85173_4_)
    {
        for (int var5 = 0; var5 < this.worldAccesses.size(); ++var5)
        {
            ((IWorldAccess)this.worldAccesses.get(var5)).playSoundToNearExcept(p_85173_1_, p_85173_2_, p_85173_1_.posX, p_85173_1_.posY - (double)p_85173_1_.eyeOffset, p_85173_1_.posZ, p_85173_3_, p_85173_4_);
        }
    }

    /**
     * Play a sound effect. Many many parameters for this function. Not sure what they do, but a classic call is :
     * (double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, 'random.door_open', 1.0F, world.rand.nextFloat() * 0.1F +
     * 0.9F with i,j,k position of the TerrainObject.
     */
    public void playSoundEffect(double p_72908_1_, double p_72908_3_, double p_72908_5_, String p_72908_7_, float p_72908_8_, float p_72908_9_)
    {
        for (int var10 = 0; var10 < this.worldAccesses.size(); ++var10)
        {
            ((IWorldAccess)this.worldAccesses.get(var10)).playSound(p_72908_7_, p_72908_1_, p_72908_3_, p_72908_5_, p_72908_8_, p_72908_9_);
        }
    }

    /**
     * par8 is loudness, all pars passed to The Structure WorldInstance.sndManager.playSound
     */
    public void playSound(double p_72980_1_, double p_72980_3_, double p_72980_5_, String p_72980_7_, float p_72980_8_, float p_72980_9_, boolean p_72980_10_) {}

   

    /**
     * adds a lightning bolt to the list of lightning bolts in this world.
     */
    public boolean addWeatherEffect(Entity p_72942_1_)
    {
        this.weatherEffects.add(p_72942_1_);
        return true;
    }

    /**
     * Called to place all entities as part of a world
     */
    public boolean spawnEntityInWorld(Entity p_72838_1_)
    {
        int var2 = MathHelper.floor_double(p_72838_1_.posX / 16.0D);
        int var3 = MathHelper.floor_double(p_72838_1_.posZ / 16.0D);
        boolean var4 = p_72838_1_.forceSpawn;

        if (p_72838_1_ instanceof EntityPlayer)
        {
            var4 = true;
        }

        if (!var4 && !this.AreaExists(var2, var3))
        {
            return false;
        }
        else
        {
            if (p_72838_1_ instanceof EntityPlayer)
            {
                EntityPlayer var5 = (EntityPlayer)p_72838_1_;
                this.playerEntities.add(var5);
                this.updateAllPlayersSleepingFlag();
            }

            this.getAreaFromAreaCoords(var2, var3).addEntity(p_72838_1_);
            this.loadedEntityList.add(p_72838_1_);
            this.onEntityAdded(p_72838_1_);
            return true;
        }
    }

    protected void onEntityAdded(Entity p_72923_1_)
    {
        for (int var2 = 0; var2 < this.worldAccesses.size(); ++var2)
        {
            ((IWorldAccess)this.worldAccesses.get(var2)).onEntityCreate(p_72923_1_);
        }
    }

    protected void onEntityRemoved(Entity p_72847_1_)
    {
        for (int var2 = 0; var2 < this.worldAccesses.size(); ++var2)
        {
            ((IWorldAccess)this.worldAccesses.get(var2)).onEntityDestroy(p_72847_1_);
        }
    }

    /**
     * Schedule the entity for removal during the next tick. Marks the entity dead in anticipation.
     */
    public void removeEntity(Entity p_72900_1_)
    {
        if (p_72900_1_.riddenByEntity != null)
        {
            p_72900_1_.riddenByEntity.mountEntity((Entity)null);
        }

        if (p_72900_1_.ridingEntity != null)
        {
            p_72900_1_.mountEntity((Entity)null);
        }

        p_72900_1_.setDead();

        if (p_72900_1_ instanceof EntityPlayer)
        {
            this.playerEntities.remove(p_72900_1_);
            this.updateAllPlayersSleepingFlag();
            this.onEntityRemoved(p_72900_1_);
        }
    }

    /**
     * Do NOT use this method to remove normal entities- use normal removeEntity
     */
    public void removePlayerEntityDangerously(Entity p_72973_1_)
    {
        p_72973_1_.setDead();

        if (p_72973_1_ instanceof EntityPlayer)
        {
            this.playerEntities.remove(p_72973_1_);
            this.updateAllPlayersSleepingFlag();
        }

        int var2 = p_72973_1_.AreaCoordX;
        int var3 = p_72973_1_.AreaCoordZ;

        if (p_72973_1_.addedToArea && this.AreaExists(var2, var3))
        {
            this.getAreaFromAreaCoords(var2, var3).removeEntity(p_72973_1_);
        }

        this.loadedEntityList.remove(p_72973_1_);
        this.onEntityRemoved(p_72973_1_);
    }

    /**
     * Adds a IWorldAccess to the list of worldAccesses
     */
    public void addWorldAccess(IWorldAccess p_72954_1_)
    {
        this.worldAccesses.add(p_72954_1_);
    }

    /**
     * Removes a worldAccess from the worldAccesses object
     */
    public void removeWorldAccess(IWorldAccess p_72848_1_)
    {
        this.worldAccesses.remove(p_72848_1_);
    }
    
    
    
    
    
    
    AxisAlignedBB collision;
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    /**
     * Returns a list of bounding boxes that collide with aabb excluding the passed in entity's collision. Args: entity,
     * aabb
     */
    public List getCollidingBoundingBoxes(Entity p_72945_1_, AxisAlignedBB p_72945_2_)
    {
        this.collidingBoundingBoxes.clear();
        int var3 = MathHelper.floor_double(p_72945_2_.minX);
        int var4 = MathHelper.floor_double(p_72945_2_.maxX + 1.0D);
        int var5 = MathHelper.floor_double(p_72945_2_.minY);
        int var6 = MathHelper.floor_double(p_72945_2_.maxY + 1.0D);
        int var7 = MathHelper.floor_double(p_72945_2_.minZ);
        int var8 = MathHelper.floor_double(p_72945_2_.maxZ + 1.0D);

        for (int var9 = var3; var9 < var4; ++var9)
        {
            for (int var10 = var7; var10 < var8; ++var10)
            {
                if (this.TerrainObjectExists(var9, 64, var10))
                {
                    for (int var11 = var5 - 1; var11 < var6; ++var11)
                    {
                        TerrainObject var12;

                        if (var9 >= -30000000 && var9 < 30000000 && var10 >= -30000000 && var10 < 30000000)
                        {
                            var12 = this.getTerrainObject(var9, var11, var10);
                        }
                        else
                        {
                            var12 = TerrainObject.stone;
                        }

                        var12.getCollisionBox(var9, var11, var10, p_72945_2_, this.collidingBoundingBoxes);
                    }
                }
            }
        }

        double var14 = 0.25D;
        List var15 = this.getEntitiesWithinAABBExcludingEntity(p_72945_1_, p_72945_2_.expand(var14, var14, var14));

        for (int var16 = 0; var16 < var15.size(); ++var16)
        {
            AxisAlignedBB var13 = ((Entity)var15.get(var16)).getBoundingBox();

            if (var13 != null && var13.intersectsWith(p_72945_2_))
            {
                this.collidingBoundingBoxes.add(var13);
            }

            var13 = p_72945_1_.getCollisionBox((Entity)var15.get(var16));

            if (var13 != null && var13.intersectsWith(p_72945_2_))
            {
                this.collidingBoundingBoxes.add(var13);
            }
        }

        return this.collidingBoundingBoxes;
    }

    public List getBoundingBoxes(AxisAlignedBB p_147461_1_)
    {
        this.collidingBoundingBoxes.clear();
        int var2 = MathHelper.floor_double(p_147461_1_.minX);
        int var3 = MathHelper.floor_double(p_147461_1_.maxX + 1.0D);
        int var4 = MathHelper.floor_double(p_147461_1_.minY);
        int var5 = MathHelper.floor_double(p_147461_1_.maxY + 1.0D);
        int var6 = MathHelper.floor_double(p_147461_1_.minZ);
        int var7 = MathHelper.floor_double(p_147461_1_.maxZ + 1.0D);

        for (int var8 = var2; var8 < var3; ++var8)
        {
            for (int var9 = var6; var9 < var7; ++var9)
            {
                if (this.TerrainObjectExists(var8, 64, var9))
                {
                    for (int var10 = var4 - 1; var10 < var5; ++var10)
                    {
                        TerrainObject var11;

                        if (var8 >= -30000000 && var8 < 30000000 && var9 >= -30000000 && var9 < 30000000)
                        {
                            var11 = this.getTerrainObject(var8, var10, var9);
                        }
                        else
                        {
                            var11 = TerrainObject.stone;
                        }

                        var11.getCollisionBox(var8, var10, var9, p_147461_1_, this.collidingBoundingBoxes);
                    }
                }
            }
        }

        return this.collidingBoundingBoxes;
    }

    /**
     * Returns the amount of skylight subtracted for the current time
     */
    public int calculateSkylightSubtracted(float p_72967_1_)
    {
        float var2 = this.getCelestialAngle(p_72967_1_);
        float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);

        if (var3 < 0.0F)
        {
            var3 = 0.0F;
        }

        if (var3 > 1.0F)
        {
            var3 = 1.0F;
        }

        var3 = 1.0F - var3;
        var3 = (float)((double)var3 * (0.0D * 5.0F) / 16.0D);
        var3 = (float)((double)var3 * (0.0D * 5.0F) / 16.0D);
        var3 = 1.0F - var3;
        return (int)(var3 * 11.0F);
    }

    /**
     * Returns the sun brightness - checks time of day, rain and thunder
     */
    public float getSunBrightness(float p_72971_1_)
    {
        float var2 = this.getCelestialAngle(p_72971_1_);
        float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.2F);

        if (var3 < 0.0F)
        {
            var3 = 0.0F;
        }

        if (var3 > 1.0F)
        {
            var3 = 1.0F;
        }

        var3 = 1.0F - var3;
        var3 = (float)((double)var3 * (1.0D - 1D * 5.0F) / 16.0D);
        var3 = (float)((double)var3 * (1.0D - 1D  * 5.0F) / 16.0D);
        return var3 * 0.8F + 0.2F;
    }

   

    /**
     * calls calculateCelestialAngle
     */
    public float getCelestialAngle(float p_72826_1_)
    {
        return this.provider.calculateCelestialAngle(this.StructureWorldInfo.getWorldTime(), p_72826_1_);
    }


    /**
     * Return getCelestialAngle()*2*PI
     */
    public float getCelestialAngleRadians(float p_72929_1_)
    {
        float var2 = this.getCelestialAngle(p_72929_1_);
        return var2 * (float)Math.PI * 2.0F;
    }

    public Vec3 getCloudColour(float p_72824_1_)
    {
        float var2 = this.getCelestialAngle(p_72824_1_);
        float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;

        if (var3 < 0.0F)
        {
            var3 = 0.0F;
        }

        if (var3 > 1.0F)
        {
            var3 = 1.0F;
        }

        float var4 = (float)(this.cloudColour >> 16 & 255L) / 255.0F;
        float var5 = (float)(this.cloudColour >> 8 & 255L) / 255.0F;
        float var6 = (float)(this.cloudColour & 255L) / 255.0F;
        float var7 = 1F;
        float var8;
        float var9;

        if (var7 > 0.0F)
        {
            var8 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.6F;
            var9 = 1.0F - var7 * 0.95F;
            var4 = var4 * var9 + var8 * (1.0F - var9);
            var5 = var5 * var9 + var8 * (1.0F - var9);
            var6 = var6 * var9 + var8 * (1.0F - var9);
        }

        var4 *= var3 * 0.9F + 0.1F;
        var5 *= var3 * 0.9F + 0.1F;
        var6 *= var3 * 0.85F + 0.15F;
        var8 = 1F;

        if (var8 > 0.0F)
        {
            var9 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.2F;
            float var10 = 1.0F - var8 * 0.95F;
            var4 = var4 * var10 + var9 * (1.0F - var10);
            var5 = var5 * var10 + var9 * (1.0F - var10);
            var6 = var6 * var10 + var9 * (1.0F - var10);
        }

        return Vec3.createVectorHelper((double)var4, (double)var5, (double)var6);
    }

    /**
     * Gets the height to which rain/snow will fall. Calculates it if not already stored.
     */
    public int getPrecipitationHeight(int p_72874_1_, int p_72874_2_)
    {
        return this.getAreaFromTerrainObjectCoords(p_72874_1_, p_72874_2_).getPrecipitationHeight(p_72874_1_ & 15, p_72874_2_ & 15);
    }

    /**
     * Finds the highest TerrainObject on the x, z coordinate that is solid and returns its y coord. Args x, z
     */
    public int getTopSolidOrLiquidTerrainObject(int p_72825_1_, int p_72825_2_)
    {
        Area var3 = this.getAreaFromTerrainObjectCoords(p_72825_1_, p_72825_2_);
        int var4 = var3.getTopFilledSegment() + 15;
        p_72825_1_ &= 15;

        for (p_72825_2_ &= 15; var4 > 0; --var4)
        {
            TerrainObject var5 = var3.getTerrainObjectInArea(p_72825_1_, var4, p_72825_2_);

            if (var5.getMaterial().BasicEntityRenderMovement() && var5.getMaterial() != Material.leaves)
            {
                return var4 + 1;
            }
        }

        return -1;
    }

    /**
     * How bright are stars in the sky
     */
    public float getStarBrightness(float p_72880_1_)
    {
        float var2 = this.getCelestialAngle(p_72880_1_);
        float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.25F);

        if (var3 < 0.0F)
        {
            var3 = 0.0F;
        }

        if (var3 > 1.0F)
        {
            var3 = 1.0F;
        }

        return var3 * var3 * 0.5F;
    }

    /**
     * Schedules a tick to a TerrainObject with a delay (Most commonly the tick rate)
     */
    public void scheduleTerrainObjectUpdate(int p_147464_1_, int p_147464_2_, int p_147464_3_, TerrainObject p_147464_4_, int p_147464_5_) {}

    public void func_147454_a(int p_147454_1_, int p_147454_2_, int p_147454_3_, TerrainObject p_147454_4_, int p_147454_5_, int p_147454_6_) {}

    public void func_147446_b(int p_147446_1_, int p_147446_2_, int p_147446_3_, TerrainObject p_147446_4_, int p_147446_5_, int p_147446_6_) {}

    public boolean StopEverythingButPlayer = false;
   
    public boolean windUpdated = false;
    
    /**
     * Updates (and cleans up) entities and tile entities
     */
    public void updateEntities(boolean stopeverythingbutplayer)
    {
    	StopEverythingButPlayer = stopeverythingbutplayer;
        int var1;
        Entity var2;
        CrashReport var4;
        CrashReportCategory var5;
        if(this.windUpdated)
        {
        	this.windUpdated = false;
        }
        if(this.rand.nextInt(40) == 0)
        {
        if(this.rand.nextInt(2) == 0 && this.WindStrengh<11)
        {
        this.WindStrengh += 1+this.rand.nextInt(1);
        }
        else if(this.WindStrengh>1)
        {
        this.WindStrengh -= 1+this.rand.nextInt(1);
        }
        if(this.rand.nextInt(2) == 0 && this.cloudWeather<11)
        {
        this.cloudWeather += 1;
        }
        else if(this.cloudWeather>0)
        {
        this.cloudWeather -= 1;
        }
        if(this.rand.nextInt(4) == 0 && this.cloudsky<12)
        {
        this.cloudsky += 1;
        }
        else if(this.rand.nextInt(3) == 0 &&this.cloudsky>0)
        {
        this.cloudsky -= 1;
        }
        this.windUpdated = true;
        }
        
        for (var1 = 0; var1 < this.weatherEffects.size(); ++var1)
        {
            var2 = (Entity)this.weatherEffects.get(var1);

            try
            {
                ++var2.ticksExisted;
                var2.onUpdate();
            }
            catch (Throwable var8)
            {
                var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
                var5 = var4.makeCategory("Entity being ticked");

                if (var2 == null)
                {
                    var5.addCrashSection("Entity", "~~NULL~~");
                }
                else
                {
                    var2.addEntityCrashInfo(var5);
                }

                throw new ReportedException(var4);
            }

            if (var2.isDead)
            {
                this.weatherEffects.remove(var1--);
            }
        }

        
        this.loadedEntityList.removeAll(this.unloadedEntityList);
        int var3;
        int var14;

        for (var1 = 0; var1 < this.unloadedEntityList.size(); ++var1)
        {
            var2 = (Entity)this.unloadedEntityList.get(var1);
            var3 = var2.AreaCoordX;
            var14 = var2.AreaCoordZ;

            if (var2.addedToArea && this.AreaExists(var3, var14))
            {
                this.getAreaFromAreaCoords(var3, var14).removeEntity(var2);
            }
        }

        for (var1 = 0; var1 < this.unloadedEntityList.size(); ++var1)
        {
            this.onEntityRemoved((Entity)this.unloadedEntityList.get(var1));
        }

        this.unloadedEntityList.clear();
        
        
        for (var1 = 0; var1 < this.loadedEntityList.size(); ++var1)
        {
            var2 = (Entity)this.loadedEntityList.get(var1);
            if(!stopeverythingbutplayer || (stopeverythingbutplayer && !(var2 instanceof EntityPlayer)))
            {
            if (var2.ridingEntity != null)
            {
                if (!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2)
                {
                    continue;
                }

                var2.ridingEntity.riddenByEntity = null;
                var2.ridingEntity = null;
            }

        
            if (!var2.isDead)
            {
                try
                {
                    this.updateEntity(var2);
                }
                catch (Throwable var7)
                {
                    var4 = CrashReport.makeCrashReport(var7, "Ticking entity");
                    var5 = var4.makeCategory("Entity being ticked");
                    var2.addEntityCrashInfo(var5);
                    throw new ReportedException(var4);
                }
            }

            
            

            if (var2.isDead)
            {
                var3 = var2.AreaCoordX;
                var14 = var2.AreaCoordZ;

                if (var2.addedToArea && this.AreaExists(var3, var14))
                {
                    this.getAreaFromAreaCoords(var3, var14).removeEntity(var2);
                }

                this.loadedEntityList.remove(var1--);
                this.onEntityRemoved(var2);
            }
            }}
        this.field_147481_N = true;
        Iterator var9 = this.field_147482_g.iterator();

        while (var9.hasNext())
        {
            TileEntity var10 = (TileEntity)var9.next();

            if (!var10.isInvalid() && var10.hasWorldObj() && this.TerrainObjectExists(var10.field_145851_c, var10.field_145848_d, var10.field_145849_e))
            {
                try
                {
                    var10.updateEntity();
                }
                catch (Throwable var6)
                {
                    var4 = CrashReport.makeCrashReport(var6, "Ticking TerrainObject entity");
                    var5 = var4.makeCategory("TerrainObject entity being ticked");
                    var10.func_145828_a(var5);
                    throw new ReportedException(var4);
                }
            }

            if (var10.isInvalid())
            {
                var9.remove();

                if (this.AreaExists(var10.field_145851_c >> 4, var10.field_145849_e >> 4))
                {
                    Area var12 = this.getAreaFromAreaCoords(var10.field_145851_c >> 4, var10.field_145849_e >> 4);

                    if (var12 != null)
                    {
                        var12.removeTileEntity(var10.field_145851_c & 15, var10.field_145848_d, var10.field_145849_e & 15);
                    }
                }
            }
        }

        this.field_147481_N = false;

        if (!this.field_147483_b.isEmpty())
        {
            this.field_147482_g.removeAll(this.field_147483_b);
            this.field_147483_b.clear();
        }


        if (!this.field_147484_a.isEmpty())
        {
            for (int var11 = 0; var11 < this.field_147484_a.size(); ++var11)
            {
                TileEntity var13 = (TileEntity)this.field_147484_a.get(var11);

                if (!var13.isInvalid())
                {
                    if (!this.field_147482_g.contains(var13))
                    {
                        this.field_147482_g.add(var13);
                    }

                    if (this.AreaExists(var13.field_145851_c >> 4, var13.field_145849_e >> 4))
                    {
                        Area var15 = this.getAreaFromAreaCoords(var13.field_145851_c >> 4, var13.field_145849_e >> 4);

                        if (var15 != null)
                        {
                            var15.func_150812_a(var13.field_145851_c & 15, var13.field_145848_d, var13.field_145849_e & 15, var13);
                        }
                    }
                }
            }

            this.field_147484_a.clear();
        }

        
        
    }

    public void func_147448_a(Collection p_147448_1_)
    {
        if (this.field_147481_N)
        {
            this.field_147484_a.addAll(p_147448_1_);
        }
        else
        {
            this.field_147482_g.addAll(p_147448_1_);
        }
    }

    /**
     * Will update the entity in the world if the Area the entity is in is currently loaded. Args: entity
     */
    public void updateEntity(Entity p_72870_1_)
    {
        this.updateEntityWithOptionalForce(p_72870_1_, true);
    }

    /**
     * Will update the entity in the world if the Area the entity is in is currently loaded or its forced to update.
     * Args: entity, forceUpdate
     */
    public void updateEntityWithOptionalForce(Entity p_72866_1_, boolean p_72866_2_)
    {
        int var3 = MathHelper.floor_double(p_72866_1_.posX);
        int var4 = MathHelper.floor_double(p_72866_1_.posZ);
        byte var5 = 32;

        if (!p_72866_2_ || this.checkAreasExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5))
        {
            p_72866_1_.lastTickPosX = p_72866_1_.posX;
            p_72866_1_.lastTickPosY = p_72866_1_.posY;
            p_72866_1_.lastTickPosZ = p_72866_1_.posZ;
            p_72866_1_.prevRotationYaw = p_72866_1_.rotationYaw;
            p_72866_1_.prevRotationPitch = p_72866_1_.rotationPitch;

            if (p_72866_2_ && p_72866_1_.addedToArea)
            {
                ++p_72866_1_.ticksExisted;

                if (p_72866_1_.ridingEntity != null)
                {
                    p_72866_1_.updateRidden();
                }
                else
                {
                    p_72866_1_.onUpdate();
                }
            }

        
            if (Double.isNaN(p_72866_1_.posX) || Double.isInfinite(p_72866_1_.posX))
            {
                p_72866_1_.posX = p_72866_1_.lastTickPosX;
            }

            if (Double.isNaN(p_72866_1_.posY) || Double.isInfinite(p_72866_1_.posY))
            {
                p_72866_1_.posY = p_72866_1_.lastTickPosY;
            }

            if (Double.isNaN(p_72866_1_.posZ) || Double.isInfinite(p_72866_1_.posZ))
            {
                p_72866_1_.posZ = p_72866_1_.lastTickPosZ;
            }

            if (Double.isNaN((double)p_72866_1_.rotationPitch) || Double.isInfinite((double)p_72866_1_.rotationPitch))
            {
                p_72866_1_.rotationPitch = p_72866_1_.prevRotationPitch;
            }

            if (Double.isNaN((double)p_72866_1_.rotationYaw) || Double.isInfinite((double)p_72866_1_.rotationYaw))
            {
                p_72866_1_.rotationYaw = p_72866_1_.prevRotationYaw;
            }

            int var6 = MathHelper.floor_double(p_72866_1_.posX / 16.0D);
            int var7 = MathHelper.floor_double(p_72866_1_.posY / 16.0D);
            int var8 = MathHelper.floor_double(p_72866_1_.posZ / 16.0D);

            if (!p_72866_1_.addedToArea || p_72866_1_.AreaCoordX != var6 || p_72866_1_.AreaCoordY != var7 || p_72866_1_.AreaCoordZ != var8)
            {
                if (p_72866_1_.addedToArea && this.AreaExists(p_72866_1_.AreaCoordX, p_72866_1_.AreaCoordZ))
                {
                    this.getAreaFromAreaCoords(p_72866_1_.AreaCoordX, p_72866_1_.AreaCoordZ).removeEntityAtIndex(p_72866_1_, p_72866_1_.AreaCoordY);
                }

                if (this.AreaExists(var6, var8))
                {
                    p_72866_1_.addedToArea = true;
                    this.getAreaFromAreaCoords(var6, var8).addEntity(p_72866_1_);
                }
                else
                {
                    p_72866_1_.addedToArea = false;
                }
            }

            

            if (p_72866_2_ && p_72866_1_.addedToArea && p_72866_1_.riddenByEntity != null)
            {
                if (!p_72866_1_.riddenByEntity.isDead && p_72866_1_.riddenByEntity.ridingEntity == p_72866_1_)
                {
                    this.updateEntity(p_72866_1_.riddenByEntity);
                }
                else
                {
                    p_72866_1_.riddenByEntity.ridingEntity = null;
                    p_72866_1_.riddenByEntity = null;
                }
            }
        }
    }

    /**
     * Returns true if there are no solid, live entities in the specified AxisAlignedBB
     */
    public boolean checkNoEntityCollision(AxisAlignedBB p_72855_1_)
    {
        return this.checkNoEntityCollision(p_72855_1_, (Entity)null);
    }

    /**
     * Returns true if there are no solid, live entities in the specified AxisAlignedBB, excluding the given entity
     */
    public boolean checkNoEntityCollision(AxisAlignedBB p_72917_1_, Entity p_72917_2_)
    {
        List var3 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, p_72917_1_);

        for (int var4 = 0; var4 < var3.size(); ++var4)
        {
            Entity var5 = (Entity)var3.get(var4);

            if (!var5.isDead && var5.preventEntitySpawning && var5 != p_72917_2_)
            {
                return false;
            }
        }

        return true;
    }

    /**
     * Returns true if there are any BasicEntityRender in the region constrained by an AxisAlignedBB
     */
    public boolean checkTerrainObjectCollision(AxisAlignedBB p_72829_1_)
    {
        int var2 = MathHelper.floor_double(p_72829_1_.minX);
        int var3 = MathHelper.floor_double(p_72829_1_.maxX + 1.0D);
        int var4 = MathHelper.floor_double(p_72829_1_.minY);
        int var5 = MathHelper.floor_double(p_72829_1_.maxY + 1.0D);
        int var6 = MathHelper.floor_double(p_72829_1_.minZ);
        int var7 = MathHelper.floor_double(p_72829_1_.maxZ + 1.0D);

        if (p_72829_1_.minX < 0.0D)
        {
            --var2;
        }

        if (p_72829_1_.minY < 0.0D)
        {
            --var4;
        }

        if (p_72829_1_.minZ < 0.0D)
        {
            --var6;
        }

        for (int var8 = var2; var8 < var3; ++var8)
        {
            for (int var9 = var4; var9 < var5; ++var9)
            {
                for (int var10 = var6; var10 < var7; ++var10)
                {
                    TerrainObject var11 = this.getTerrainObject(var8, var9, var10);

                    if (var11.getMaterial() != Material.air)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    /**
     * Returns if any of the BasicEntityRender within the aabb are liquids. Args: aabb
     */
    public boolean isAnyLiquid(AxisAlignedBB p_72953_1_)
    {
        int var2 = MathHelper.floor_double(p_72953_1_.minX);
        int var3 = MathHelper.floor_double(p_72953_1_.maxX + 1.0D);
        int var4 = MathHelper.floor_double(p_72953_1_.minY);
        int var5 = MathHelper.floor_double(p_72953_1_.maxY + 1.0D);
        int var6 = MathHelper.floor_double(p_72953_1_.minZ);
        int var7 = MathHelper.floor_double(p_72953_1_.maxZ + 1.0D);

        if (p_72953_1_.minX < 0.0D)
        {
            --var2;
        }

        if (p_72953_1_.minY < 0.0D)
        {
            --var4;
        }

        if (p_72953_1_.minZ < 0.0D)
        {
            --var6;
        }

        return false;
    }

   

    /**
     * handles the acceleration of an object whilst in water. Not sure if it is used elsewhere.
     */
    public boolean handleMaterialAcceleration(AxisAlignedBB p_72918_1_, Material p_72918_2_, Entity p_72918_3_)
    {
        int var4 = MathHelper.floor_double(p_72918_1_.minX);
        int var5 = MathHelper.floor_double(p_72918_1_.maxX + 1.0D);
        int var6 = MathHelper.floor_double(p_72918_1_.minY);
        int var7 = MathHelper.floor_double(p_72918_1_.maxY + 1.0D);
        int var8 = MathHelper.floor_double(p_72918_1_.minZ);
        int var9 = MathHelper.floor_double(p_72918_1_.maxZ + 1.0D);

        if (!this.checkAreasExist(var4, var6, var8, var5, var7, var9))
        {
            return false;
        }
        else
        {
            boolean var10 = false;
            Vec3 var11 = Vec3.createVectorHelper(0.0D, 0.0D, 0.0D);

            for (int var12 = var4; var12 < var5; ++var12)
            {
                for (int var13 = var6; var13 < var7; ++var13)
                {
                    for (int var14 = var8; var14 < var9; ++var14)
                    {
                        TerrainObject var15 = this.getTerrainObject(var12, var13, var14);

                        if (var15.getMaterial() == p_72918_2_)
                        {
                            double var16 = (double)((float)(var13 + 1));

                            if ((double)var7 >= var16)
                            {
                                var10 = true;
                                var15.velocityToAddToEntity(this, var12, var13, var14, p_72918_3_, var11);
                            }
                        }
                    }
                }
            }

            if (var11.lengthVector() > 0.0D && p_72918_3_.isPushedByWater())
            {
                var11 = var11.normalize();
                double var18 = 0.014D;
                p_72918_3_.motionX += var11.xCoord * var18;
                p_72918_3_.motionY += var11.yCoord * var18;
                p_72918_3_.motionZ += var11.zCoord * var18;
            }

            return var10;
        }
    }

    /**
     * Returns true if the given bounding box contains the given material
     */
    public boolean isMaterialInBB(AxisAlignedBB p_72875_1_, Material p_72875_2_)
    {
        int var3 = MathHelper.floor_double(p_72875_1_.minX);
        int var4 = MathHelper.floor_double(p_72875_1_.maxX + 1.0D);
        int var5 = MathHelper.floor_double(p_72875_1_.minY);
        int var6 = MathHelper.floor_double(p_72875_1_.maxY + 1.0D);
        int var7 = MathHelper.floor_double(p_72875_1_.minZ);
        int var8 = MathHelper.floor_double(p_72875_1_.maxZ + 1.0D);

        for (int var9 = var3; var9 < var4; ++var9)
        {
            for (int var10 = var5; var10 < var6; ++var10)
            {
                for (int var11 = var7; var11 < var8; ++var11)
                {
                    if (this.getTerrainObject(var9, var10, var11).getMaterial() == p_72875_2_)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    /**
     * checks if the given AABB is in the material given. Used while swimming.
     */
    public boolean isAABBInMaterial(AxisAlignedBB p_72830_1_, Material p_72830_2_)
    {
        int var3 = MathHelper.floor_double(p_72830_1_.minX);
        int var4 = MathHelper.floor_double(p_72830_1_.maxX + 1.0D);
        int var5 = MathHelper.floor_double(p_72830_1_.minY);
        int var6 = MathHelper.floor_double(p_72830_1_.maxY + 1.0D);
        int var7 = MathHelper.floor_double(p_72830_1_.minZ);
        int var8 = MathHelper.floor_double(p_72830_1_.maxZ + 1.0D);

        for (int var9 = var3; var9 < var4; ++var9)
        {
            for (int var10 = var5; var10 < var6; ++var10)
            {
                for (int var11 = var7; var11 < var8; ++var11)
                {
                    TerrainObject var12 = this.getTerrainObject(var9, var10, var11);

                    if (var12.getMaterial() == p_72830_2_)
                    {
                        int var13 = 0;
                        double var14 = (double)(var10 + 1);

                        if (var13 < 8)
                        {
                            var14 = (double)(var10 + 1) - (double)var13 / 8.0D;
                        }

                        if (var14 >= p_72830_1_.minY)
                        {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    /**
     * Creates an explosion. Args: entity, x, y, z, strength
     */
    public Explosion createExplosion(Entity p_72876_1_, double p_72876_2_, double p_72876_4_, double p_72876_6_, float p_72876_8_, boolean p_72876_9_)
    {
        return this.newExplosion(p_72876_1_, p_72876_2_, p_72876_4_, p_72876_6_, p_72876_8_, false, p_72876_9_);
    }

    /**
     * returns a new explosion. Does initiation (at time of writing Explosion is not finished)
     */
    public Explosion newExplosion(Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_)
    {
        Explosion var11 = new Explosion(this, p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_);
        var11.isFlaming = p_72885_9_;
        var11.isSmoking = p_72885_10_;
        var11.doExplosionA();
        var11.doExplosionB(true);
        return var11;
    }

    /**
     * Gets the percentage of real BasicEntityRender within within a bounding box, along a specified vector.
     */
    public float getTerrainObjectDensity(Vec3 p_72842_1_, AxisAlignedBB p_72842_2_)
    {
        double var3 = 1.0D / ((p_72842_2_.maxX - p_72842_2_.minX) * 2.0D + 1.0D);
        double var5 = 1.0D / ((p_72842_2_.maxY - p_72842_2_.minY) * 2.0D + 1.0D);
        double var7 = 1.0D / ((p_72842_2_.maxZ - p_72842_2_.minZ) * 2.0D + 1.0D);

        if (var3 >= 0.0D && var5 >= 0.0D && var7 >= 0.0D)
        {
            int var9 = 0;
            int var10 = 0;

            for (float var11 = 0.0F; var11 <= 1.0F; var11 = (float)((double)var11 + var3))
            {
                for (float var12 = 0.0F; var12 <= 1.0F; var12 = (float)((double)var12 + var5))
                {
                    for (float var13 = 0.0F; var13 <= 1.0F; var13 = (float)((double)var13 + var7))
                    {
                        double var14 = p_72842_2_.minX + (p_72842_2_.maxX - p_72842_2_.minX) * (double)var11;
                        double var16 = p_72842_2_.minY + (p_72842_2_.maxY - p_72842_2_.minY) * (double)var12;
                        double var18 = p_72842_2_.minZ + (p_72842_2_.maxZ - p_72842_2_.minZ) * (double)var13;

                        if (this.rayTraceBasicEntityRender(Vec3.createVectorHelper(var14, var16, var18), p_72842_1_) == null)
                        {
                            ++var9;
                        }

                        ++var10;
                    }
                }
            }

            return (float)var9 / (float)var10;
        }
        else
        {
            return 0.0F;
        }
    }

    /**
     * If the TerrainObject in the given direction of the given coordinate is fire, extinguish it. Args: Player, X,Y,Z,
     * TerrainObjectDirection
     */
    public boolean extinguishFire(EntityPlayer p_72886_1_, int p_72886_2_, int p_72886_3_, int p_72886_4_, int p_72886_5_)
    {
        
            return false;
        
    }

    /**
     * This string is 'All: (number of loaded entities)' Viewable by press ing F3
     */
    public String getDebugLoadedEntities()
    {
        return "All: " + this.loadedEntityList.size();
    }

    /**
     * Returns the name of the current Area provider, by calling Areaprovider.makeString()
     */
    public String getProviderName()
    {
        return this.AreaProvider.makeString();
    }

    public TileEntity getTileEntity(int p_147438_1_, int p_147438_2_, int p_147438_3_)
    {
        if (p_147438_2_ >= 0 && p_147438_2_ < 256)
        {
            TileEntity var4 = null;
            int var5;
            TileEntity var6;

            if (this.field_147481_N)
            {
                for (var5 = 0; var5 < this.field_147484_a.size(); ++var5)
                {
                    var6 = (TileEntity)this.field_147484_a.get(var5);

                    if (!var6.isInvalid() && var6.field_145851_c == p_147438_1_ && var6.field_145848_d == p_147438_2_ && var6.field_145849_e == p_147438_3_)
                    {
                        var4 = var6;
                        break;
                    }
                }
            }

            if (var4 == null)
            {
                Area var7 = this.getAreaFromAreaCoords(p_147438_1_ >> 4, p_147438_3_ >> 4);

                if (var7 != null)
                {
                    var4 = var7.func_150806_e(p_147438_1_ & 15, p_147438_2_, p_147438_3_ & 15);
                }
            }

            if (var4 == null)
            {
                for (var5 = 0; var5 < this.field_147484_a.size(); ++var5)
                {
                    var6 = (TileEntity)this.field_147484_a.get(var5);

                    if (!var6.isInvalid() && var6.field_145851_c == p_147438_1_ && var6.field_145848_d == p_147438_2_ && var6.field_145849_e == p_147438_3_)
                    {
                        var4 = var6;
                        break;
                    }
                }
            }

            return var4;
        }
        else
        {
            return null;
        }
    }

    public void setTileEntity(int p_147455_1_, int p_147455_2_, int p_147455_3_, TileEntity p_147455_4_)
    {
        if (p_147455_4_ != null && !p_147455_4_.isInvalid())
        {
            if (this.field_147481_N)
            {
                p_147455_4_.field_145851_c = p_147455_1_;
                p_147455_4_.field_145848_d = p_147455_2_;
                p_147455_4_.field_145849_e = p_147455_3_;
                Iterator var5 = this.field_147484_a.iterator();

                while (var5.hasNext())
                {
                    TileEntity var6 = (TileEntity)var5.next();

                    if (var6.field_145851_c == p_147455_1_ && var6.field_145848_d == p_147455_2_ && var6.field_145849_e == p_147455_3_)
                    {
                        var6.invalidate();
                        var5.remove();
                    }
                }

                this.field_147484_a.add(p_147455_4_);
            }
            else
            {
                this.field_147482_g.add(p_147455_4_);
                Area var7 = this.getAreaFromAreaCoords(p_147455_1_ >> 4, p_147455_3_ >> 4);

                if (var7 != null)
                {
                    var7.func_150812_a(p_147455_1_ & 15, p_147455_2_, p_147455_3_ & 15, p_147455_4_);
                }
            }
        }
    }

    public void removeTileEntity(int p_147475_1_, int p_147475_2_, int p_147475_3_)
    {
        TileEntity var4 = this.getTileEntity(p_147475_1_, p_147475_2_, p_147475_3_);

        if (var4 != null && this.field_147481_N)
        {
            var4.invalidate();
            this.field_147484_a.remove(var4);
        }
        else
        {
            if (var4 != null)
            {
                this.field_147484_a.remove(var4);
                this.field_147482_g.remove(var4);
            }

            Area var5 = this.getAreaFromAreaCoords(p_147475_1_ >> 4, p_147475_3_ >> 4);

            if (var5 != null)
            {
                var5.removeTileEntity(p_147475_1_ & 15, p_147475_2_, p_147475_3_ & 15);
            }
        }
    }

    public void func_147457_a(TileEntity p_147457_1_)
    {
        this.field_147483_b.add(p_147457_1_);
    }

    public boolean func_147469_q(int p_147469_1_, int p_147469_2_, int p_147469_3_)
    {
        AxisAlignedBB var4 = this.getTerrainObject(p_147469_1_, p_147469_2_, p_147469_3_).getCollisionBoundingBoxFromPool(this,p_147469_1_, p_147469_2_, p_147469_3_);
        return var4 != null && var4.getAverageEdgeLength() >= 1.0D;
    }

    /**
     * Returns true if the TerrainObject at the given coordinate has a solid (buildable) top surface.
     */
    public static boolean doesTerrainObjectHaveSolidTopSurface(ITerrainObjectAccess p_147466_0_, int p_147466_1_, int p_147466_2_, int p_147466_3_)
    {
        TerrainObject var4 = p_147466_0_.getTerrainObject(p_147466_1_, p_147466_2_, p_147466_3_);
        return true;
    }

    

    /**
     * Called on construction of the World class to setup the initial skylight values
     */
    public void calculateInitialSkylight()
    {
        int var1 = this.calculateSkylightSubtracted(1.0F);

        if (var1 != this.skylightSubtracted)
        {
            this.skylightSubtracted = var1;
        }
    }

    /**
     * Set which types of mobs are allowed to spawn (peaceful vs hostile).
     */
    public void setAllowedSpawnTypes(boolean p_72891_1_, boolean p_72891_2_)
    {
        this.spawnHostileMobs = p_72891_1_;
        this.spawnPeacefulMobs = p_72891_2_;
    }

   
   
    protected void setActivePlayerAreasAndCheckLight()
    {
        this.activeAreaSet.clear();
        int var1;
        EntityPlayer var2;
        int var3;
        int var4;
        int var5;

        for (var1 = 0; var1 < this.playerEntities.size(); ++var1)
        {
            var2 = (EntityPlayer)this.playerEntities.get(var1);
            var3 = MathHelper.floor_double(var2.posX / 16.0D);
            var4 = MathHelper.floor_double(var2.posZ / 16.0D);
            var5 = this.ViewDistance();

            for (int var6 = -var5; var6 <= var5; ++var6)
            {
                for (int var7 = -var5; var7 <= var5; ++var7)
                {
                    this.activeAreaSet.add(new AreaCoordIntPair(var6 + var3, var7 + var4));
                }
            }
        }
        if (this.ambientTickCountdown > 0)
        {
            --this.ambientTickCountdown;
        }
    }

    public abstract int ViewDistance();


	protected void func_147467_a(int p_147467_1_, int p_147467_2_, Area p_147467_3_)
    {
        if (this.ambientTickCountdown == 0 && !this.isClient)
        {
            this.updateLCG = this.updateLCG * 3 + 1013904223;
            int var4 = this.updateLCG >> 2;
            int var5 = var4 & 15;
            int var6 = var4 >> 8 & 15;
            int var7 = var4 >> 16 & 255;
            TerrainObject var8 = p_147467_3_.getTerrainObjectInArea(var5, var7, var6);
            var5 += p_147467_1_;
            var6 += p_147467_2_;

            if (var8.getMaterial() == Material.air && this.getFullTerrainObjectLightValue(var5, var7, var6) <= this.rand.nextInt(8) )
            {
                EntityPlayer var9 = this.getClosestPlayer((double)var5 + 0.5D, (double)var7 + 0.5D, (double)var6 + 0.5D, 8.0D);

                if (var9 != null && var9.getDistanceSq((double)var5 + 0.5D, (double)var7 + 0.5D, (double)var6 + 0.5D) > 4.0D)
                {
                    this.playSoundEffect((double)var5 + 0.5D, (double)var7 + 0.5D, (double)var6 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
                    this.ambientTickCountdown = this.rand.nextInt(12000) + 6000;
                }
            }
        }
    }

    protected void func_147456_g()
    {
        this.setActivePlayerAreasAndCheckLight();
    }


    /**
     * Runs through the list of updates to run and ticks them
     */
    public boolean tickUpdates(boolean p_72955_1_)
    {
        return false;
    }

    public List getPendingTerrainObjectUpdates(Area p_72920_1_, boolean p_72920_2_)
    {
        return null;
    }

 
    public List getEntitiesWithinAABBExcludingEntity(Entity p_94576_1_, AxisAlignedBB p_94576_2_)
    {
        ArrayList var4 = new ArrayList();
        int var5 = MathHelper.floor_double((p_94576_2_.minX - 2.0D) / 16.0D);
        int var6 = MathHelper.floor_double((p_94576_2_.maxX + 2.0D) / 16.0D);
        int var7 = MathHelper.floor_double((p_94576_2_.minZ - 2.0D) / 16.0D);
        int var8 = MathHelper.floor_double((p_94576_2_.maxZ + 2.0D) / 16.0D);

        for (int var9 = var5; var9 <= var6; ++var9)
        {
            for (int var10 = var7; var10 <= var8; ++var10)
            {
                if (this.AreaExists(var9, var10))
                {
                    this.getAreaFromAreaCoords(var9, var10).getEntitiesWithinAABBForEntity(p_94576_1_, p_94576_2_, var4);
                }
            }
        }

        return var4;
    }

  
    public List selectEntitiesWithinAABB(Class p_82733_1_, AxisAlignedBB p_82733_2_)
    {
        int var4 = MathHelper.floor_double((p_82733_2_.minX - 2.0D) / 16.0D);
        int var5 = MathHelper.floor_double((p_82733_2_.maxX + 2.0D) / 16.0D);
        int var6 = MathHelper.floor_double((p_82733_2_.minZ - 2.0D) / 16.0D);
        int var7 = MathHelper.floor_double((p_82733_2_.maxZ + 2.0D) / 16.0D);
        ArrayList var8 = new ArrayList();

        for (int var9 = var4; var9 <= var5; ++var9)
        {
            for (int var10 = var6; var10 <= var7; ++var10)
            {
                if (this.AreaExists(var9, var10))
                {
                    this.getAreaFromAreaCoords(var9, var10).getEntitiesOfTypeWithinAAAB(p_82733_1_, p_82733_2_, var8);
                }
            }
        }

        return var8;
    }

    public Entity findNearestEntityWithinAABB(Class p_72857_1_, AxisAlignedBB p_72857_2_, Entity p_72857_3_)
    {
        List var4 = this.selectEntitiesWithinAABB(p_72857_1_, p_72857_2_);
        Entity var5 = null;
        double var6 = Double.MAX_VALUE;

        for (int var8 = 0; var8 < var4.size(); ++var8)
        {
            Entity var9 = (Entity)var4.get(var8);

            if (var9 != p_72857_3_)
            {
                double var10 = p_72857_3_.getDistanceSqToEntity(var9);

                if (var10 <= var6)
                {
                    var5 = var9;
                    var6 = var10;
                }
            }
        }

        return var5;
    }

    /**
     * Returns the Entity with the given ID, or null if it doesn't exist in this World.
     */
    public abstract Entity getEntityByID(int p_73045_1_);

    /**
     * Accessor for world Loaded Entity List
     */
    public List getLoadedEntityList()
    {
        return this.loadedEntityList;
    }

    public void func_147476_b(int p_147476_1_, int p_147476_2_, int p_147476_3_, TileEntity p_147476_4_)
    {
        if (this.TerrainObjectExists(p_147476_1_, p_147476_2_, p_147476_3_))
        {
            this.getAreaFromTerrainObjectCoords(p_147476_1_, p_147476_3_).setAreaModified();
        }
    }

    /**
     * Counts how many entities of an entity class exist in the world. Args: entityClass
     */
    public int countEntities(Class p_72907_1_)
    {
        int var2 = 0;

        for (int var3 = 0; var3 < this.loadedEntityList.size(); ++var3)
        {
            Entity var4 = (Entity)this.loadedEntityList.get(var3);

            if ((!(var4 instanceof EntityLivingBase) || !((EntityLivingBase)var4).isNoDespawnRequired()) && p_72907_1_.isAssignableFrom(var4.getClass()))
            {
                ++var2;
            }
        }

        return var2;
    }

    /**
     * adds entities to the loaded entities list, and loads thier skins.
     */
    public void addLoadedEntities(List p_72868_1_)
    {
        this.loadedEntityList.addAll(p_72868_1_);

        for (int var2 = 0; var2 < p_72868_1_.size(); ++var2)
        {
            this.onEntityAdded((Entity)p_72868_1_.get(var2));
        }
    }

    /**
     * Adds a list of entities to be unloaded on the next pass of World.updateEntities()
     */
    public void unloadEntities(List p_72828_1_)
    {
        this.unloadedEntityList.addAll(p_72828_1_);
    }

    public boolean canPlaceEntityOnSide(TerrainObject p_147472_1_, int p_147472_2_, int p_147472_3_, int p_147472_4_, boolean p_147472_5_, int p_147472_6_, Entity p_147472_7_, ItemData p_147472_8_)
    {
        TerrainObject var9 = this.getTerrainObject(p_147472_2_, p_147472_3_, p_147472_4_);
        AxisAlignedBB var10 = p_147472_5_ ? null : p_147472_1_.getCollisionBoundingBoxFromPool(this,p_147472_2_, p_147472_3_, p_147472_4_);
        return var10 != null && !this.checkNoEntityCollision(var10, p_147472_7_) ? false : (var9.getMaterial() == Material.circuits  ? true : var9.getMaterial().isReplaceable());
    }

    /**
     * Gets the closest player to the entity within the specified distance (if distance is less than 0 then ignored).
     * Args: entity, dist
     */
    public EntityPlayer getClosestPlayerToEntity(Entity p_72890_1_, double p_72890_2_)
    {
        return this.getClosestPlayer(p_72890_1_.posX, p_72890_1_.posY, p_72890_1_.posZ, p_72890_2_);
    }

    /**
     * Gets the closest player to the point within the specified distance (distance can be set to less than 0 to not
     * limit the distance). Args: x, y, z, dist
     */
    public EntityPlayer getClosestPlayer(double p_72977_1_, double p_72977_3_, double p_72977_5_, double p_72977_7_)
    {
        double var9 = -1.0D;
        EntityPlayer var11 = null;

        for (int var12 = 0; var12 < this.playerEntities.size(); ++var12)
        {
            EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
            double var14 = var13.getDistanceSq(p_72977_1_, p_72977_3_, p_72977_5_);

            if ((p_72977_7_ < 0.0D || var14 < p_72977_7_ * p_72977_7_) && (var9 == -1.0D || var14 < var9))
            {
                var9 = var14;
                var11 = var13;
            }
        }

        return var11;
    }

    /**
     * Returns the closest vulnerable player to this entity within the given radius, or null if none is found
     */
    public EntityPlayer getClosestVulnerablePlayerToEntity(Entity p_72856_1_, double p_72856_2_)
    {
        return this.getClosestVulnerablePlayer(p_72856_1_.posX, p_72856_1_.posY, p_72856_1_.posZ, p_72856_2_);
    }

    /**
     * Returns the closest vulnerable player within the given radius, or null if none is found.
     */
    public EntityPlayer getClosestVulnerablePlayer(double p_72846_1_, double p_72846_3_, double p_72846_5_, double p_72846_7_)
    {
        double var9 = -1.0D;
        EntityPlayer var11 = null;

        for (int var12 = 0; var12 < this.playerEntities.size(); ++var12)
        {
            EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);

            if (!var13.capAbilities.disableDamage && var13.isEntityAlive())
            {
                double var14 = var13.getDistanceSq(p_72846_1_, p_72846_3_, p_72846_5_);
                double var16 = p_72846_7_;

                if (var13.isCrouching())
                {
                    var16 = p_72846_7_ * 0.800000011920929D;
                }

                if (var13.isInvisible())
                {
                    float var18 = var13.getArmorVisibility();

                    if (var18 < 0.1F)
                    {
                        var18 = 0.1F;
                    }

                    var16 *= (double)(0.7F * var18);
                }

                if ((p_72846_7_ < 0.0D || var14 < var16 * var16) && (var9 == -1.0D || var14 < var9))
                {
                    var9 = var14;
                    var11 = var13;
                }
            }
        }

        return var11;
    }

    /**
     * Find a player by name in this world.
     */
    public EntityPlayer getPlayerEntityByName(String p_72924_1_)
    {
        for (int var2 = 0; var2 < this.playerEntities.size(); ++var2)
        {
            EntityPlayer var3 = (EntityPlayer)this.playerEntities.get(var2);

            if (p_72924_1_.equals(var3.getCommandSenderName()))
            {
                return var3;
            }
        }

        return null;
    }

    public EntityPlayer func_152378_a(UUID p_152378_1_)
    {
        for (int var2 = 0; var2 < this.playerEntities.size(); ++var2)
        {
            EntityPlayer var3 = (EntityPlayer)this.playerEntities.get(var2);

            if (p_152378_1_.equals(var3.getUniqueID()))
            {
                return var3;
            }
        }

        return null;
    }

    /**
     * If on MP, sends a quitting packet.
     */
    public void sendQuittingDisconnectingPacket() {}

    /**
     * Checks whether the session lock file was modified by another process
     */
    public void checkSessionLock() throws ExceptionA
    {
        this.saveHandler.checkSessionLock();
    }

   

    public long getTotalWorldTime()
    {
        return this.StructureWorldInfo.getWorldTotalTime();
    }

    public void setWorldTime(int t)
    {
       this.StructureWorldInfo.setWorldTime(0);
    }

    public int getWorldTime()
    {
        return this.StructureWorldInfo.getWorldTime();
    }

    /**
     * Returns the coordinates of the spawn point
     */
    public AreaCoordinates getSpawnPoint()
    {
        return new AreaCoordinates(this.StructureWorldInfo.getSpawnX(), this.StructureWorldInfo.getSpawnY(), this.StructureWorldInfo.getSpawnZ());
    }

    public void setSpawnLocation(int p_72950_1_, int p_72950_2_, int p_72950_3_)
    {
        this.StructureWorldInfo.setSpawnPosition(p_72950_1_, p_72950_2_, p_72950_3_);
    }

    /**
     * spwans an entity and loads surrounding Areas
     */
    public void joinEntityInSurroundings(Entity p_72897_1_)
    {
        int var2 = MathHelper.floor_double(p_72897_1_.posX / 16.0D);
        int var3 = MathHelper.floor_double(p_72897_1_.posZ / 16.0D);
        byte var4 = 2;

        for (int var5 = var2 - var4; var5 <= var2 + var4; ++var5)
        {
            for (int var6 = var3 - var4; var6 <= var3 + var4; ++var6)
            {
                this.getAreaFromAreaCoords(var5, var6);
            }
        }

        if (!this.loadedEntityList.contains(p_72897_1_))
        {
            this.loadedEntityList.add(p_72897_1_);
        }
    }

    /**
     * Called when checking if a certain TerrainObject can be mined or not. The 'spawn safe zone' check is located here.
     */
    public boolean canMineTerrainObject(EntityPlayer p_72962_1_, int p_72962_2_, int p_72962_3_, int p_72962_4_)
    {
        return true;
    }

    /**
     * sends a Packet 38 (Entity Status) to all tracked players of that entity
     */
    public void setEntityState(Entity p_72960_1_, byte p_72960_2_) {}

    /**
     * gets the IAreaProvider this world uses.
     */
    public IAreaProvider getAreaProvider()
    {
        return this.AreaProvider;
    }

    public void func_147452_c(int p_147452_1_, int p_147452_2_, int p_147452_3_, TerrainObject p_147452_4_, int p_147452_5_, int p_147452_6_)
    {
        p_147452_4_.onTerrainObjectEventReceived(this, p_147452_1_, p_147452_2_, p_147452_3_, p_147452_5_, p_147452_6_);
    }

    /**
     * Returns this world's current save handler
     */
    public ISaveHandler getSaveHandler()
    {
        return this.saveHandler;
    }

    /**
     * Gets the World's StructureWorldInfo instance
     */
    public StructureWorldInfo getStructureWorldInfo()
    {
        return this.StructureWorldInfo;
    }

    /**
     * Updates the flag that indicates whether or not all players in the world are sleeping.
     */
    public void updateAllPlayersSleepingFlag() {}

    
    /**
     * Assigns the given String id to the given MapDataBase using the MapStorage, removing any existing ones of the same
     * id.
     */
    public void setItemData(String p_72823_1_, WorldSavedData p_72823_2_)
    {
        this.mapStorage.setData(p_72823_1_, p_72823_2_);
    }

    /**
     * Loads an existing MapDataBase corresponding to the given String id from disk using the MapStorage, instantiating
     * the given Class, or returns null if none such file exists. args: Class to instantiate, String dataid
     */
    public WorldSavedData loadItemData(Class p_72943_1_, String p_72943_2_)
    {
        return this.mapStorage.loadData(p_72943_1_, p_72943_2_);
    }

    public int getUniqueDataId(String p_72841_1_)
    {
        return this.mapStorage.getUniqueDataId(p_72841_1_);
    }

    public void playBroadcastSound(int p_82739_1_, int p_82739_2_, int p_82739_3_, int p_82739_4_, int p_82739_5_)
    {
        for (int var6 = 0; var6 < this.worldAccesses.size(); ++var6)
        {
            ((IWorldAccess)this.worldAccesses.get(var6)).broadcastSound(p_82739_1_, p_82739_2_, p_82739_3_, p_82739_4_, p_82739_5_);
        }
    }
   
    /**
     * Returns current world height.
     */
    public int getHeight()
    {
        return 256;
    }

    /**
     * Returns current world height.
     */
    public int getActualHeight()
    {
        return this.provider.hasNoSky ? 128 : 256;
    }

    /**
     * set by !Area.getAreLevelsEmpty
     */
    public boolean extendedLevelsInAreaCache()
    {
        return false;
    }

    /**
     * Returns horizon height for use in rendering the sky.
     */
    public double getHorizon()
    {
        return  63.0D;
    }

    /**
     * Adds some basic stats of the world to the given crash report.
     */
    public CrashReportCategory addStructureWorldInfoToCrashReport(CrashReport cp)
    {
        CrashReportCategory var2 = cp.makeCategoryDepth("Affected level", 1);
        var2.addCrashSection("Level name", this.StructureWorldInfo == null ? "????" : this.StructureWorldInfo.getWorldName());
        var2.addCrashSectionCallable("All players", new Callable()
        {
            public String call()
            {
                return World.this.playerEntities.size() + " total; " + World.this.playerEntities.toString();
            }
        });
        var2.addCrashSectionCallable("Area stats", new Callable()
        {
            public String call()
            {
                return World.this.AreaProvider.makeString();
            }
        });
        try
        {
            this.StructureWorldInfo.addToCrashReport(var2);
        }
        catch (Throwable var4)
        {
            var2.addCrashSectionThrowable("Level Data Unobtainable", var4);
        }

        return var2;
    }
    
    /**
     * returns a calendar object containing the current date
     */
    public Calendar getCurrentDate()
    {
        if (this.getTotalWorldTime() % 600L == 0L)
        {
            this.theCalendar.setTimeInMillis(TheStructureWorldServer.getSystemTimeMillis());
        }

        return this.theCalendar;
    }

    /**
     * Returns the TerrainObject metadata at coords x,y,z
     */
    public int getTerrainObjectDataInteger(int x, int y, int z)
    {
    		if (y < 0)
            {
                return 0;
            }
            else if (y >= 256)
            {
                return 0;
            }
            else
            {
                Area c = this.getAreaFromAreaCoords(x >> 4, z >> 4);
                x &= 15;
                z &= 15;
                return c.getTerrainObjectMetadata(x, y, z);
            }
    }
    
    /**
     * Returns the TerrainObject metadata at coords x,y,z
     */
    public int getTerrainObjectDataInteger(double x, double y, double z)
    {
    		if ((int)y < 0)
            {
                return 0;
            }
            else if ((int)y >= 256)
            {
                return 0;
            }
            else
            {
                Area c = this.getAreaFromAreaCoords((int)x >> 4, (int)z >> 4);
                int X = (int)x;X &= 15;
                int Z = (int)z;Z &= 15;
                return c.getTerrainObjectMetadata((int)X, (int)y, (int)Z);
            }
    }
    
    
    /**
     * Sets the BasicEntityRender metadata and if set will then notify BasicEntityRender that this TerrainObject changed, depending on the flag. Args:
     * x, y, z, metadata, flag. See setTerrainObject for flag description
     */
    public boolean setTerrainObjectDataInteger(int x, int y, int z, int met, int f)
    {
            if (y < 0)
            {
                return false;
            }
            else if (y >= 256)
            {
                return false;
            }
            else
            {
                Area area = this.getAreaFromAreaCoords(x >> 4, z >> 4);
                int X = x & 15;
                int Z = z & 15;
                boolean var9 = area.setTerrainObjctDataInteger(X, y, Z, met);
                if (var9)
                {
                    TerrainObject objectorterrain = area.getTerrainObjectInArea(X, y, Z);
                    if ((f & 2) != 0 && (!this.isClient || (f & 4) == 0) && area.func_150802_k())
                    {
                       
                    }
                }
                return var9;
            }
    }
    
    
    /**
     * Used in StructureWorldInfo.
     * Updates time,temperature ,Creature spawns etc. 
     */
    public void tick() 
	{
        this.StructureWorldInfo.updateWorld(this);
    }
   
}
