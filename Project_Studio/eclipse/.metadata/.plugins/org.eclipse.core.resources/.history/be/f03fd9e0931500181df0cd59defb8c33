package nl.thestructureworld.client;


import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import nl.thestructureworld.client.renderer.RenderTerrain;
import nl.thestructureworld.client.renderer.RenderTerrain.ArrayListConsole;
import nl.thestructureworld.entity.EntityItem;
import nl.thestructureworld.entity.EntitySpider;
import nl.thestructureworld.entity.player.EntityPlayer;
import nl.thestructureworld.entity.player.EntityPlayerMP;
import nl.thestructureworld.item.ItemData;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.world.WorldSettings.GameType;

import org.lwjgl.input.Keyboard;

public class KeyAndOtherSettings
{
	public static String ModelSelected = "";
	public static String pictureFile = "/objectsanderrain/AgarthianMetal.png";
	public static boolean updatePosition = false;
	public static double moveObjectwith = 0.01D;
	public static int Point = -1;
	
	public static void MoveObject(ArrayListConsole arrayListConsole)
	{
		if(arrayListConsole != null && arrayListConsole.objectName != ""  && ModelSelected != "" && arrayListConsole.objectName.contains(ModelSelected))
		{
		if(Keyboard.isKeyDown(Keyboard.KEY_UP))
		{
			arrayListConsole.y += moveObjectwith/100D;
		}
		if(Keyboard.isKeyDown(Keyboard.KEY_DOWN))
		{
			arrayListConsole.y -= moveObjectwith/100D;
		}
		boolean isOn = Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK);
		if(!isOn && Keyboard.isKeyDown(Keyboard.KEY_RIGHT))
		{
			arrayListConsole.x += moveObjectwith/100D;
		}
		if(!isOn && Keyboard.isKeyDown(Keyboard.KEY_LEFT))
		{
			arrayListConsole.x -= moveObjectwith/100D;
		}
		if(isOn && Keyboard.isKeyDown(Keyboard.KEY_RIGHT))
		{
			arrayListConsole.z += moveObjectwith/100D;
		}
		if(isOn && Keyboard.isKeyDown(Keyboard.KEY_LEFT))
		{
			arrayListConsole.z -= moveObjectwith/100D;
		}
		}
	}
	//Commands:
	//Add Vertex <name> <Model Number>
	//Select Point <0-1-2-3-4>
	//Select Texture <Texture Name>
	//MoveWith <double Number>
	//Move <True/False>
	//Select <Name Object>
	
	
	
	@SuppressWarnings("unused")
	public static String createModelCommands(String command)
	{
		if(command.contains("Print"))
		{
			try{
			PrintWriter var1 = new PrintWriter(new FileWriter(new File(FileBasicJava.source, "The Structure World/options.txt")));
			var1.println("");
			}catch (IOException e){}
		}
		else if(command.contains("Delete Vertex "))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 4)
			{
			RenderTerrain terrain = new RenderTerrain();
			for(int id = 0;id<terrain.ArrayListConsole.size();++id)
			{
				if(terrain.ArrayListConsole.get(id).objectName.contains(spaces[2]))
				{
					terrain.ArrayListConsole.remove(id);
				}
			}
			return "`Delete Vertex "+spaces[2]+".";
			}
			else return "Vertex need a name!";
		}
		else if(command.contains("Add Vertex ") && !FileBasicJava.containsNumber(command))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 4)
			{
			RenderTerrain terrain = new RenderTerrain();
			terrain.ArrayListConsole.add(new ArrayListConsole(1, 1, 1, spaces[2],1,1,0,0));
			terrain.ArrayListConsole.add(new ArrayListConsole(1, 1, 0, spaces[2],1,0,1,0));
			terrain.ArrayListConsole.add(new ArrayListConsole(0, 1, 0, spaces[2],0,0,2,0));
			terrain.ArrayListConsole.add(new ArrayListConsole(0, 1, 1, spaces[2],0,1,3,0));
			return "Added Vertex "+spaces[2]+".";
			}
			else return "Vertex need a name!";
		}
		else if(command.contains("Add Vertex ") && FileBasicJava.containsNumber(command))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 5)
			{
			RenderTerrain terrain = new RenderTerrain();
			terrain.ArrayListConsole.add(new ArrayListConsole(1, 1, 1, spaces[2],1,1,0,Integer.parseInt(spaces[3])));
			terrain.ArrayListConsole.add(new ArrayListConsole(1, 1, 0, spaces[2],1,0,1,Integer.parseInt(spaces[3])));
			terrain.ArrayListConsole.add(new ArrayListConsole(0, 1, 0, spaces[2],0,0,2,Integer.parseInt(spaces[3])));
			terrain.ArrayListConsole.add(new ArrayListConsole(0, 1, 1, spaces[2],0,1,3,Integer.parseInt(spaces[3])));
			return "Added Vertex "+spaces[2]+".";
			}
			else return "Vertex need a name!";
		}
		else if(command.contains("Select Point ")&&FileBasicJava.containsNumber(command))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 3 && !FileBasicJava.containsLetters(spaces[2])&& FileBasicJava.containsNumber(spaces[2]))
			{
				Point = Integer.parseInt(spaces[2]);
				return "Point Selected "+Point+".";
			}
			else return "No point loaded!";
		}
		else if(command.contains("Select Texture"))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 3)
			{
			pictureFile = "/objectsanderrain/"+spaces[2]+".png";
			}
			else if(spaces.length == 4)
			{
			pictureFile = "/objectsanderrain/"+spaces[2]+" "+spaces[3]+".png";	
			}
			else if(spaces.length == 5)
			{
			pictureFile = "/objectsanderrain/"+spaces[2]+" "+spaces[3]+" "+spaces[4]+".png";	
			}
			return "Texture loaded "+pictureFile+".";
		}
		else if(command.contains("MoveWith "))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 2 && !FileBasicJava.containsLetters(spaces[1]) && FileBasicJava.containsNumber(spaces[1]))
			{
				moveObjectwith = Double.parseDouble(spaces[1]);
				return "Object will now move with "+moveObjectwith+".";
			}
			else if(FileBasicJava.containsLetters(spaces[1]))
			{
				return "Object movement not changed!";
			}
			else return "Object movement not changed!";
		}
		else if(command.contains("Move"))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 1 && !updatePosition)
			{
				updatePosition = true;
			    return "Update Position is "+updatePosition+".";
			}
			else if(spaces.length == 1 && updatePosition)
			{
				updatePosition = false;
				return "Update Position is "+updatePosition+".";
			}
			else return "Update Position not changed!";
		}
		else if(command.contains("Select "))
		{
			String[] spaces = command.split(" ");
			if(spaces.length == 2)
			{
			RenderTerrain terrain = new RenderTerrain();
			for(int id=0;id<terrain.ArrayListConsole.size();++id)
			{
				if(terrain.ArrayListConsole.get(id).objectName.contains(spaces[1]))
				{
					ModelSelected = terrain.ArrayListConsole.get(id).objectName;
				}
				return "Vertex selected "+ModelSelected+".";
			}
			}
			else return "There is no Vertex with that name!";
		}
		else
		{
			return "!Unknown Command!";
		}
		return command;
	}

	
	
	
	public static int MoveUp = Keyboard.KEY_W;
	public static int MoveDown = Keyboard.KEY_S;
	public static int MoveLeft = Keyboard.KEY_A;
	public static int MoveRight = Keyboard.KEY_D;
	public static int Console = Keyboard.KEY_TAB;
	public static int Jump = Keyboard.KEY_SPACE;
	public static int Crouch = Keyboard.KEY_C;
	public static int LayDown = Keyboard.KEY_Z;
	public static int Running = Keyboard.KEY_R;
	public static int OpenInventory = Keyboard.KEY_I;
	public static TheStructureWorld world = TheStructureWorld.TheStructureWorld;
	public static TheStructureWorldServer TheStructureWorld2 = TheStructureWorldServer.getServer();
	public static EntityPlayer EntityPlayermp = world.thePlayer;
	
	public static String helpCommand(double timer)
	{
		if(timer==499){return "!Add Item 'Item Name'";}
		else if(timer==450){return "!AllowEdit 'true/false'";}
		else if(timer==400){return "!InstaDestroy 'true/false'";}
		else if(timer==350){return "!AllowFly 'true/false'";}
		else if(timer==300){return "!AllowFly 'true/false'";}
		else if(timer==250){return "!AllowDamage 'true/false'";}
		else if(timer==200){return "!FlySpeed 'number between 0.5 - 0.05'";}
		else if(timer==150){return "!WalkSpeed 'number between 0.8 - 0.34'";}
		else return "";
	}
	
	public static String command(String command)
	{
		for(int pID = 0;pID<TheStructureWorld2.serverConfigManager.playerEntityList.size();++pID)
		{
		if(world.thePlayer.getCommandSenderName() == ((EntityPlayer)TheStructureWorld2.serverConfigManager.playerEntityList.get(pID)).getCommandSenderName())	
		{	
		EntityPlayermp = (EntityPlayer) TheStructureWorld2.serverConfigManager.playerEntityList.get(pID);
		}
		}
		//////////////////////////////////////////////////////////////////////////////////////////////
			if(command.contains("!Help"))
			{
				return "Help Command";
			}
			if(!command.contains("!"))
			{
			return createModelCommands(command);
			}
			else if(command.contains("!Add Item ") && command.length() > 11)
			{
				String[] terrain = command.split(" ");
				if(TerrainObject.TerrainObjectRegistry.getObjectFromName(terrain[2]) != TerrainObject.air)
				{
				EntityItem item = new EntityItem(TheStructureWorld2.getEntityWorld(), EntityPlayermp.posX, EntityPlayermp.posY, EntityPlayermp.posZ, new ItemData(TerrainObject.TerrainObjectRegistry.getObjectFromName(terrain[2])));		
				TheStructureWorld2.getEntityWorld().spawnEntityInWorld(item);
				return "Given the Player "+terrain[2];
				}
				else return "That Object doesn't exist.";
			}			
			if(command.contains("!AllowEdit")&&command.contains("true"))
			{
				EntityPlayermp.capAbilities.allowEdit = true;
				world.thePlayer.capAbilities.allowEdit = true;
				return "Player can place Objects without removing them from the inventory.";
			}
			else if(command.contains("!AllowEdit")&&command.contains("false"))
			{
				EntityPlayermp.capAbilities.allowEdit = false;
				world.thePlayer.capAbilities.allowEdit = false;			
				return "Player can no longer place Objects without removing them from the inventory.";
			}
			if(command.contains("!InstaDestroy")&&command.contains("true"))
			{
				EntityPlayermp.capAbilities.instaDestroy = true;
				world.thePlayer.capAbilities.instaDestroy = true;
				return "Player can now destroy Terrain in one hit.";
			}
			else if(command.contains("!InstaDestroy")&&command.contains("false"))
			{
				EntityPlayermp.capAbilities.instaDestroy = false;
				world.thePlayer.capAbilities.instaDestroy = false;
				return "Player can no longer destroy Terrain in one hit.";
			}
			if(command.contains("!AllowFly")&&command.contains("true"))
			{
				EntityPlayermp.capAbilities.allowFlying = true;
				world.thePlayer.capAbilities.allowFlying = true;
				return "Player can now fly by double pressing spacebar or use the Crouch button to get down.";
			}
			else if(command.contains("!AllowFly")&&command.contains("false"))
			{
				EntityPlayermp.capAbilities.allowFlying = false;
				EntityPlayermp.capAbilities.isFlying = false;
				world.thePlayer.capAbilities.isFlying = false;
				world.thePlayer.capAbilities.allowFlying = false;
				return "Player can no longer fly.";
			}
			if(command.contains("!AllowDamage")&&command.contains("true"))
			{
				EntityPlayermp.capAbilities.disableDamage = false;
				world.thePlayer.capAbilities.disableDamage = false;
				return "Player can be hurt.";
			}
			else if(command.contains("!AllowDamage")&&command.contains("false"))
			{
				EntityPlayermp.capAbilities.disableDamage = true;
				world.thePlayer.capAbilities.disableDamage = true;
				return "Player can no longer be hurt.";
			}
			if(command.contains("!NoClip")&&command.contains("true"))
			{
				EntityPlayermp.capAbilities.noClip = true;
				world.thePlayer.capAbilities.noClip = true;
				return "Player can now walk through Terrain and Objects.";
			}
			else if(command.contains("!NoClip")&&command.contains("false"))
			{
				EntityPlayermp.capAbilities.noClip = false;
				world.thePlayer.capAbilities.noClip = false;
				return "Player can no longerwalk through Terrain and Objects.";
			}
			if(command.contains("!FlySpeed ")&&!command.endsWith("f")&&!command.endsWith("F") && FileBasicJava.containsNumber(command.replaceAll("!FlySpeed ", "")) && !FileBasicJava.containsLetters(command.replaceAll("!FlySpeed ", ""))&& !FileBasicJava.containsSymbol(command.replaceAll("!FlySpeed ", "")))
			{
				EntityPlayermp.capAbilities.flySpeed = Float.parseFloat(command.replaceAll("!FlySpeed ", ""));
				world.thePlayer.capAbilities.flySpeed = Float.parseFloat(command.replaceAll("!FlySpeed ", ""));
				return "Player can now fly with "+EntityPlayermp.capAbilities.flySpeed +" speed.";
			}
			else if(command.contains("!FlySpeed")&&(command.endsWith("f")||command.endsWith("F")))
			{
				return "Don't use F or f at the end!";
			}
			
			if(command.contains("!WalkSpeed ")&&!command.endsWith("f")&&!command.endsWith("F") && FileBasicJava.containsNumber(command.replaceAll("!WalkSpeed ", "")) && !FileBasicJava.containsLetters(command.replaceAll("!WalkSpeed ", ""))&& !FileBasicJava.containsSymbol(command.replaceAll("!WalkSpeed ", "")))
			{
				EntityPlayermp.capAbilities.walkSpeed = Float.parseFloat(command.replaceAll("!WalkSpeed ", ""));
				world.thePlayer.capAbilities.walkSpeed = Float.parseFloat(command.replaceAll("!WalkSpeed ", ""));
				
				return "Player can now walk with "+EntityPlayermp.capAbilities.walkSpeed +" speed.";
			}
			else if(command.contains("!WalkSpeed ")&&!command.endsWith("f")&&!command.endsWith("F") && FileBasicJava.containsNumber(command.replaceAll("!WalkSpeed ", "")) && FileBasicJava.containsLetters(command.replaceAll("!WalkSpeed ", ""))&&Float.parseFloat(command.replaceAll("!WalkSpeed ", ""))<0.33F)
			{
				return "Player speed must be higher than 0.34";
			}
			else if(command.contains("!WalkSpeed")&&(command.endsWith("f")||command.endsWith("F")))
			{
				return "Don't use F or f at the end!";
			}
//////////////////////////////////////////////////////////////////////////////////////////////		
			else return "Invalid Command, it must start with a '!' or use '!help'";
	}
}