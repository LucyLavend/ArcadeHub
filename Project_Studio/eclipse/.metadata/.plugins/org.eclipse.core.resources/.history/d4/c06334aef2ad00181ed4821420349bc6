package nl.thestructureworld.entity.player;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import nl.thestructureworld.crash.CrashReport;
import nl.thestructureworld.crash.CrashReportCategory;
import nl.thestructureworld.entity.Entity;
import nl.thestructureworld.entity.EntityList;
import nl.thestructureworld.entity.EntityLivingBase;
import nl.thestructureworld.inventory.Container;
import nl.thestructureworld.inventory.ContainerChest;
import nl.thestructureworld.inventory.ContainerEnchantment;
import nl.thestructureworld.inventory.ContainerHopper;
import nl.thestructureworld.inventory.ContainerRepair;
import nl.thestructureworld.inventory.ContainerWorkbench;
import nl.thestructureworld.inventory.ICrafting;
import nl.thestructureworld.inventory.IInventory;
import nl.thestructureworld.inventory.SlotCrafting;
import nl.thestructureworld.item.EnumAction;
import nl.thestructureworld.item.ItemMapBase;
import nl.thestructureworld.item.ItemData;
import nl.thestructureworld.nbt.NBTTagCompound;
import nl.thestructureworld.network.NetHandlerPlayServer;
import nl.thestructureworld.network.Packet;
import nl.thestructureworld.network.play.client.C15PacketClientSettings;
import nl.thestructureworld.network.play.server.S06PacketUpdateHealth;
import nl.thestructureworld.network.play.server.S0BPacketAnimation;
import nl.thestructureworld.network.play.server.S13PacketDestroyEntities;
import nl.thestructureworld.network.play.server.S19PacketEntityStatus;
import nl.thestructureworld.network.play.server.S1BPacketEntityAttach;
import nl.thestructureworld.network.play.server.S26PacketMapAreaBulk;
import nl.thestructureworld.network.play.server.S2BPacketChangeGameState;
import nl.thestructureworld.network.play.server.S2DPacketOpenWindow;
import nl.thestructureworld.network.play.server.S2EPacketCloseWindow;
import nl.thestructureworld.network.play.server.S2FPacketSetSlot;
import nl.thestructureworld.network.play.server.S30PacketWindowItems;
import nl.thestructureworld.network.play.server.S31PacketWindowProperty;
import nl.thestructureworld.network.play.server.S39PacketPlayerAbilities;
import nl.thestructureworld.network.play.server.S3FPacketCustomPayload;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.server.management.EditTerrainwwoItem;
import nl.thestructureworld.server.management.UserListOpsEntry;
import nl.thestructureworld.tileentity.TileEntity;
import nl.thestructureworld.util.AreaCoordinates;
import nl.thestructureworld.util.DamageSource;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.util.ReportedException;
import nl.thestructureworld.world.AreaCoordIntPair;
import nl.thestructureworld.world.WorldServer;
import nl.thestructureworld.world.WorldSettings;
import nl.thestructureworld.world.WorldSettings.GameType;
import nl.thestructureworld.world.area.Area;
import org.apache.commons.io.Charsets;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import nl.thestructureworld.account.GameProfile;

public class EntityPlayerMP extends EntityPlayer implements ICrafting
{
    private static final Logger logger = LogManager.getLogger();

    /**
     * The NetServerHandler assigned to this player by the ServerConfigurationManager.
     */
    public NetHandlerPlayServer playerNetServerHandler;

    /** Reference to the TheStructureWorldServer object. */
    public final TheStructureWorldServer mcServer;

    /** The EditTerrainwwoItem belonging to this player */
    public final EditTerrainwwoItem theEditTerrainwwoItem;

    /** player X position as seen by PlayerManager */
    public double managedPosX;

    /** player Z position as seen by PlayerManager */
    public double managedPosZ;

    /** LinkedList that holds the loaded Areas. */
    public final List loadedAreas = new LinkedList();

    /** entities added to this list will  be packet29'd to the player */
    private final List destroyedItemsNetCache = new LinkedList();
    private float field_130068_bO = Float.MIN_VALUE;

    /** amount of health the client was last set to */
    private float lastHealth = -1.0E8F;

    /** set to foodStats.GetFoodLevel */
    private int lastFoodLevel = -99999999;

    /** set to foodStats.getSaturationLevel() == 0.0F each tick */
    private boolean wasHungry = true;

    /** Amount of experience the client was last set to */
    private int lastExperience = -99999999;
    private int field_147101_bU = 60;
    private EntityPlayer.EnumChatVisibility chatVisibility;
    private boolean chatColours = true;
    private long field_143005_bX = System.currentTimeMillis();

    /**
     * The currently in use window ID. Incremented every time a window is opened.
     */
    private int currentWindowId;

    /**
     * set to true when player is moving quantity of items from one inventory to another(crafting) but item in either
     * slot is not changed
     */
    public boolean isChangingQuantityOnly;
    public int ping;

    /**
     * Set when a player beats the ender dragon, used to respawn the player at the spawn point while retaining inventory
     * and XP
     */
    public boolean playerConqueredTheEnd;

    public EntityPlayerMP(TheStructureWorldServer p_i45285_1_, WorldServer p_i45285_2_, GameProfile p_i45285_3_, EditTerrainwwoItem p_i45285_4_)
    {
        super(p_i45285_2_, p_i45285_3_);
        p_i45285_4_.thisPlayerMP = this;
        this.theEditTerrainwwoItem = p_i45285_4_;
        AreaCoordinates var5 = p_i45285_2_.getSpawnPoint();
        int var6 = var5.posX;
        int var7 = var5.posZ;
        int var8 = var5.posY;
        int var9 = Math.max(5, p_i45285_1_.getSpawnProtectionSize() - 6);
        var6 += this.rand.nextInt(var9 * 2) - var9;
        var7 += this.rand.nextInt(var9 * 2) - var9;
        var8 = p_i45285_2_.getTopSolidOrLiquidTerrainObject(var6, var7);
        this.mcServer = p_i45285_1_;
        this.stepHeight = 0.0F;
        this.eyeOffset = 0.0F;
        this.setLocationAndAngles((double)var6 + 0.5D, (double)var8, (double)var7 + 0.5D, 0.0F, 0.0F);

        while (!p_i45285_2_.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty())
        {
            this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
        }
    }

    /**
     * (abstract) Protected helper method to read subclass entity data from NBT.
     */
    public void readEntityFromNBT(NBTTagCompound p_70037_1_)
    {
        super.readEntityFromNBT(p_70037_1_);

        if (p_70037_1_.func_150297_b("playerGameType", 99))
        {
            if (TheStructureWorldServer.getServer().getForceGamemode())
            {
                this.theEditTerrainwwoItem.setGameType(TheStructureWorldServer.getServer().getGameType());
            }
            else
            {
                this.theEditTerrainwwoItem.setGameType(WorldSettings.GameType.getByID(p_70037_1_.getInteger("playerGameType")));
            }
        }
    }

    /**
     * (abstract) Protected helper method to write subclass entity data to NBT.
     */
    public void writeEntityToNBT(NBTTagCompound p_70014_1_)
    {
        super.writeEntityToNBT(p_70014_1_);
        p_70014_1_.setInteger("playerGameType", this.theEditTerrainwwoItem.getGameType().getID());
    }

    public void addSelfToInternalCraftingInventory()
    {
        this.openContainer.addCraftingToCrafters(this);
    }

    /**
     * sets the players height back to normal after doing things like sleeping and dieing
     */
    protected void resetHeight()
    {
        this.eyeOffset = 0.0F;
    }

    public float getEyeHeight()
    {
        return 1.62F;
    }

    /**
     * Called to update the entity's position/logic.
     */
    public void onUpdate()
    {
        this.theEditTerrainwwoItem.updateTerrainObjectRemoving();
        --this.field_147101_bU;

        if (this.hurtResistantTime > 0)
        {
            --this.hurtResistantTime;
        }

        this.openContainer.detectAndSendChanges();

        if (!this.worldObj.isClient && !this.openContainer.canInteractWith(this))
        {
            this.closeScreen();
            this.openContainer = this.inventoryContainer;
        }

        while (!this.destroyedItemsNetCache.isEmpty())
        {
            int var1 = Math.min(this.destroyedItemsNetCache.size(), 127);
            int[] var2 = new int[var1];
            Iterator var3 = this.destroyedItemsNetCache.iterator();
            int var4 = 0;

            while (var3.hasNext() && var4 < var1)
            {
                var2[var4++] = ((Integer)var3.next()).intValue();
                var3.remove();
            }

            this.playerNetServerHandler.sendPacket(new S13PacketDestroyEntities(var2));
        }

        if (!this.loadedAreas.isEmpty())
        {
            ArrayList var6 = new ArrayList();
            Iterator var7 = this.loadedAreas.iterator();
            ArrayList var8 = new ArrayList();
            Area var5;

            while (var7.hasNext() && var6.size() < S26PacketMapAreaBulk.func_149258_c())
            {
                AreaCoordIntPair var9 = (AreaCoordIntPair)var7.next();

                if (var9 != null)
                {
                    if (this.worldObj.TerrainObjectExists(var9.AreaXPos << 4, 0, var9.AreaZPos << 4))
                    {
                        var5 = this.worldObj.getAreaFromAreaCoords(var9.AreaXPos, var9.AreaZPos);

                        if (var5.func_150802_k())
                        {
                            var6.add(var5);
                            var8.addAll(((WorldServer)this.worldObj).func_147486_a(var9.AreaXPos * 16, 0, var9.AreaZPos * 16, var9.AreaXPos * 16 + 16, 256, var9.AreaZPos * 16 + 16));
                            var7.remove();
                        }
                    }
                }
                else
                {
                    var7.remove();
                }
            }

            if (!var6.isEmpty())
            {
                this.playerNetServerHandler.sendPacket(new S26PacketMapAreaBulk(var6));
                Iterator var10 = var8.iterator();

                while (var10.hasNext())
                {
                    TileEntity var11 = (TileEntity)var10.next();
                    this.func_147097_b(var11);
                }

                var10 = var6.iterator();

                while (var10.hasNext())
                {
                    var5 = (Area)var10.next();
                    this.getServerForPlayer().getEntityTracker().func_85172_a(this, var5);
                }
            }
        }
    }

    public void onUpdateEntity()
    {
        try
        {
            super.onUpdate();

            for (int var1 = 0; var1 < this.inventory.getSizeInventory(); ++var1)
            {
                ItemData var6 = this.inventory.getStackInSlot(var1);

                if (var6 != null && var6.getItem().isMap())
                {
                    Packet var8 = ((ItemMapBase)var6.getItem()).func_150911_c(var6, this.worldObj, this);

                    if (var8 != null)
                    {
                        this.playerNetServerHandler.sendPacket(var8);
                    }
                }
            }

            if (this.getHealth() != this.lastHealth)
            {
                this.playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(this.getHealth(),0, 0));
                this.lastHealth = this.getHealth();
            }

            if (this.getHealth() + this.getAbsorptionAmount() != this.field_130068_bO)
            {
                this.field_130068_bO = this.getHealth() + this.getAbsorptionAmount();
               
            }

          

           
        }
        catch (Throwable var4)
        {
            CrashReport var2 = CrashReport.makeCrashReport(var4, "Ticking player");
            CrashReportCategory var3 = var2.makeCategory("Player being ticked");
            this.addEntityCrashInfo(var3);
            throw new ReportedException(var2);
        }
    }

   

    /**
     * Called when the mob's health reaches 0.
     */
    public void onDeath(DamageSource p_70645_1_)
    {
        EntityLivingBase var6 = this.func_94060_bK();

        if (var6 != null)
        {
            int var7 = EntityList.getEntityID(var6);
            EntityList.EntityEggInfo var8 = (EntityList.EntityEggInfo)EntityList.entityEggs.get(Integer.valueOf(var7));
        }

        this.func_110142_aN().func_94549_h();
    }

    /**
     * Called when the entity is attacked.
     */
    public boolean attackEntityFrom(DamageSource p_70097_1_, float p_70097_2_)
    {
        if (this.isEntityInvulnerable())
        {
            return false;
        }
        else
        {
            boolean var3 = this.mcServer.isDedicatedServer() && this.mcServer.isPVPEnabled() && "fall".equals(p_70097_1_.damageType);

            if (!var3 && this.field_147101_bU > 0 && p_70097_1_ != DamageSource.outOfWorld)
            {
                return false;
            }
            else
            {
                    Entity var4 = p_70097_1_.getEntity();

                    if (var4 instanceof EntityPlayer && !this.canAttackPlayer((EntityPlayer)var4))
                    {
                        return false;
                    }
                return super.attackEntityFrom(p_70097_1_, p_70097_2_);
            }
        }
    }

    public boolean canAttackPlayer(EntityPlayer p_96122_1_)
    {
        return !this.mcServer.isPVPEnabled() ? false : super.canAttackPlayer(p_96122_1_);
    }

    private void func_147097_b(TileEntity p_147097_1_)
    {
        if (p_147097_1_ != null)
        {
            Packet var2 = p_147097_1_.getDescriptionPacket();

            if (var2 != null)
            {
                this.playerNetServerHandler.sendPacket(var2);
            }
        }
    }

    /**
     * Called whenever an item is picked up from walking over it. Args: pickedUpEntity, stackSize
     */
    public void onItemPickup(Entity p_71001_1_, int p_71001_2_)
    {
        super.onItemPickup(p_71001_1_, p_71001_2_);
        this.openContainer.detectAndSendChanges();
    }

   

 

    /**
     * Called when a player mounts an entity. e.g. mounts a pig, mounts a boat.
     */
    public void mountEntity(Entity p_70078_1_)
    {
        super.mountEntity(p_70078_1_);
        this.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this, this.ridingEntity));
        this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
    }

    /**
     * Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
     * and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
     */
    protected void updateFallState(double p_70064_1_, boolean p_70064_3_) {}

    /**
     * process player falling based on movement packet
     */
    public void handleFalling(double p_71122_1_, boolean p_71122_3_)
    {
        super.updateFallState(p_71122_1_, p_71122_3_);
    }

    /**
     * get the next window id to use
     */
    private void getNextWindowId()
    {
        this.currentWindowId = this.currentWindowId % 100 + 1;
    }

    /**
     * Displays the crafting GUI for a workbench.
     */
    public void displayGUIWorkbench(int p_71058_1_, int p_71058_2_, int p_71058_3_)
    {
        this.getNextWindowId();
        this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 1, "Crafting", 9, true));
        this.openContainer = new ContainerWorkbench(this.inventory, this.worldObj, p_71058_1_, p_71058_2_, p_71058_3_);
        this.openContainer.windowId = this.currentWindowId;
        this.openContainer.addCraftingToCrafters(this);
    }

    public void displayGUIEnchantment(int p_71002_1_, int p_71002_2_, int p_71002_3_, String p_71002_4_)
    {
        this.getNextWindowId();
        this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 4, p_71002_4_ == null ? "" : p_71002_4_, 9, p_71002_4_ != null));
        this.openContainer = new ContainerEnchantment(this.inventory, this.worldObj, p_71002_1_, p_71002_2_, p_71002_3_);
        this.openContainer.windowId = this.currentWindowId;
        this.openContainer.addCraftingToCrafters(this);
    }

    /**
     * Displays the GUI for interacting with an anvil.
     */
    public void displayGUIAnvil(int p_82244_1_, int p_82244_2_, int p_82244_3_)
    {
        this.getNextWindowId();
        this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 8, "Repairing", 9, true));
        this.openContainer = new ContainerRepair(this.inventory, this.worldObj, p_82244_1_, p_82244_2_, p_82244_3_, this);
        this.openContainer.windowId = this.currentWindowId;
        this.openContainer.addCraftingToCrafters(this);
    }

    /**
     * Displays the GUI for interacting with a chest inventory. Args: chestInventory
     */
    public void displayGUIChest(IInventory p_71007_1_)
    {
        if (this.openContainer != this.inventoryContainer)
        {
            this.closeScreen();
        }

        this.getNextWindowId();
        this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 0, p_71007_1_.getInventoryName(), p_71007_1_.getSizeInventory(), p_71007_1_.isInventoryNameLocalized()));
        this.openContainer = new ContainerChest(this.inventory, p_71007_1_);
        this.openContainer.windowId = this.currentWindowId;
        this.openContainer.addCraftingToCrafters(this);
    }

    /**
     * Sends the contents of an inventory slot to the client-side Container. This doesn't have to match the actual
     * contents of that slot. Args: Container, slot number, slot contents
     */
    public void sendSlotContents(Container p_71111_1_, int p_71111_2_, ItemData p_71111_3_)
    {
        if (!(p_71111_1_.getSlot(p_71111_2_) instanceof SlotCrafting))
        {
            if (!this.isChangingQuantityOnly)
            {
                this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(p_71111_1_.windowId, p_71111_2_, p_71111_3_));
            }
        }
    }

    public void sendContainerToPlayer(Container p_71120_1_)
    {
        this.sendContainerAndContentsToPlayer(p_71120_1_, p_71120_1_.getInventory());
    }

    public void sendContainerAndContentsToPlayer(Container cont, List p_71110_2_)
    {
        this.playerNetServerHandler.sendPacket(new S30PacketWindowItems(cont.windowId, p_71110_2_));
        this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, this.inventory.getItemData()));
    }

    /**
     * Sends two ints to the client-side Container. Used for furnace burning time, smelting progress, brewing progress,
     * and enchanting level. Normally the first int identifies which variable to update, and the second contains the new
     * value. Both are truncated to shorts in non-local SMP.
     */
    public void sendProgressBarUpdate(Container cont, int p_71112_2_, int p_71112_3_)
    {
        this.playerNetServerHandler.sendPacket(new S31PacketWindowProperty(cont.windowId, p_71112_2_, p_71112_3_));
    }

    /**
     * set current crafting inventory back to the 2x2 square
     */
    public void closeScreen()
    {
        this.playerNetServerHandler.sendPacket(new S2EPacketCloseWindow(this.openContainer.windowId));
        this.closeContainer();
    }

    /**
     * updates item held by mouse
     */
    public void updateHeldItem()
    {
        if (!this.isChangingQuantityOnly)
        {
            this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, this.inventory.getItemData()));
        }
    }

    /**
     * Closes the container the player currently has open.
     */
    public void closeContainer()
    {
        this.openContainer.onContainerClosed(this);
        this.openContainer = this.inventoryContainer;
    }

    public void setEntityActionState(float p_110430_1_, float p_110430_2_, boolean p_110430_3_, boolean p_110430_4_)
    {
        if (this.ridingEntity != null)
        {
            if (p_110430_1_ >= -1.0F && p_110430_1_ <= 1.0F)
            {
                this.moveStrafing = p_110430_1_;
            }

            if (p_110430_2_ >= -1.0F && p_110430_2_ <= 1.0F)
            {
                this.moveForward = p_110430_2_;
            }

            this.isJumping = p_110430_3_;
            this.setCrouching(p_110430_4_);
        }
    }

   
    public void mountEntityAndWakeUp()
    {
        if (this.riddenByEntity != null)
        {
            this.riddenByEntity.mountEntity(this);
        } 
    }

    public void setPlayerHealthUpdated()
    {
        this.lastHealth = -1.0E8F;
    }

 
    /**
     * Used for when item use count runs out, ie: eating completed
     */
    protected void onItemUseFinish()
    {
        this.playerNetServerHandler.sendPacket(new S19PacketEntityStatus(this, (byte)9));
        super.onItemUseFinish();
    }

    /**
     * sets the itemInUse when the use item button is clicked. Args: ItemData, int maxItemUseDuration
     */
    public void setItemInUse(ItemData p_71008_1_, int p_71008_2_)
    {
        super.setItemInUse(p_71008_1_, p_71008_2_);

        if (p_71008_1_ != null && p_71008_1_.getItem() != null && p_71008_1_.getItem().getItemUseAction(p_71008_1_) == EnumAction.eat)
        {
            this.getServerForPlayer().getEntityTracker().func_151248_b(this, new S0BPacketAnimation(this, 3));
        }
    }



 
    /**
     * Sets the position of the entity and updates the 'last' variables
     */
    public void setPositionAndUpdate(double p_70634_1_, double p_70634_3_, double p_70634_5_)
    {
        this.playerNetServerHandler.setPlayerLocation(p_70634_1_, p_70634_3_, p_70634_5_, this.rotationYaw, this.rotationPitch);
    }

    /**
     * Called when the player performs a critical hit on the Entity. Args: entity that was hit critically
     */
    public void onCriticalHit(Entity p_71009_1_)
    {
        this.getServerForPlayer().getEntityTracker().func_151248_b(this, new S0BPacketAnimation(p_71009_1_, 4));
    }

    public void onEnchantmentCritical(Entity p_71047_1_)
    {
        this.getServerForPlayer().getEntityTracker().func_151248_b(this, new S0BPacketAnimation(p_71047_1_, 5));
    }

    /**
     * Sends the player's abilities to the server (if there is one).
     */
    public void sendPlayerAbilities()
    {
        if (this.playerNetServerHandler != null)
        {
            this.playerNetServerHandler.sendPacket(new S39PacketPlayerAbilities(this.capAbilities));
        }
    }

    public WorldServer getServerForPlayer()
    {
        return (WorldServer)this.worldObj;
    }

    /**
     * Sets the player's game mode and sends it to them.
     */
    public void setGameType(WorldSettings.GameType p_71033_1_)
    {
        this.theEditTerrainwwoItem.setGameType(p_71033_1_);
        this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(3, (float)p_71033_1_.getID()));
    }
 

    /**
     * Gets the player's IP address. Used in /banip.
     */
    public String getPlayerIP()
    {
        String var1 = this.playerNetServerHandler.netManager.getSocketAddress().toString();
        var1 = var1.substring(var1.indexOf("/") + 1);
        var1 = var1.substring(0, var1.indexOf(":"));
        return var1;
    }

    public void func_147100_a(C15PacketClientSettings pack)
    {
        int var2 = 256 >> pack.func_149521_d();

        if (var2 > 3 && var2 < 20)
        {
            ;
        }

        this.chatVisibility = pack.func_149523_e();
        this.chatColours = pack.func_149520_f();

        if (this.mcServer.isSinglePlayer() && this.mcServer.getServerOwner().equals(this.getCommandSenderName()))
        {
            this.mcServer.setDifficulty(pack.getDifficulty());
        }

    }

    public EntityPlayer.EnumChatVisibility func_147096_v()
    {
        return this.chatVisibility;
    }

    public void func_147095_a(String p_147095_1_)
    {
        this.playerNetServerHandler.sendPacket(new S3FPacketCustomPayload("SW|RPack", p_147095_1_.getBytes(Charsets.UTF_8)));
    }

    /**
     * Return the position for this command sender.
     */
    public AreaCoordinates getPlayerCoordinates()
    {
        return new AreaCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY + 0.5D), MathHelper.floor_double(this.posZ));
    }

    public void func_143004_u()
    {
        this.field_143005_bX = TheStructureWorldServer.getSystemTimeMillis();
    }

   

    public void func_152339_d(Entity p_152339_1_)
    {
        if (p_152339_1_ instanceof EntityPlayer)
        {
            this.playerNetServerHandler.sendPacket(new S13PacketDestroyEntities(new int[] {p_152339_1_.getEntityId()}));
        }
        else
        {
            this.destroyedItemsNetCache.add(Integer.valueOf(p_152339_1_.getEntityId()));
        }
    }

    public long func_154331_x()
    {
        return this.field_143005_bX;
    }
}
