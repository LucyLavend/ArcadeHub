package nl.thestructureworld.client.multiplayer;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import nl.thestructureworld.entity.EnumCreatureType;
import nl.thestructureworld.util.IProgressUpdate;
import nl.thestructureworld.util.LongHashMap;
import nl.thestructureworld.world.AreaCoordIntPair;
import nl.thestructureworld.world.AreaPosition;
import nl.thestructureworld.world.AreaCoordIntPair;
import nl.thestructureworld.world.World;
import nl.thestructureworld.world.area.Area;
import nl.thestructureworld.world.area.EmptyArea;
import nl.thestructureworld.world.area.IAreaProvider;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class AreaProviderClient implements IAreaProvider
{
    private static final Logger logger = LogManager.getLogger();

    /**
     * The completely empty Area used by AreaProviderClient when AreaMapping doesn't contain the requested
     * coordinates.
     */
    private Area blankArea;

    /**
     * The mapping between AreaCoordinates and Areas that AreaProviderClient maintains.
     */
    private LongHashMap AreaMapping = new LongHashMap();

    /**
     * This may have been intended to be an iterable version of all currently loaded Areas (MultiplayerAreaCache),
     * with identical contents to AreaMapping's values. However it is never actually added to.
     */
    private List AreaListing = new ArrayList();

    /** Reference to the World object. */
    private World worldObj;

    public AreaProviderClient(World w)
    {
        this.blankArea = new EmptyArea(w, 0, 0);
        this.worldObj = w;
    }

    /**
     * Checks to see if a Area exists at x, z
     */
    public boolean AreaExists(int x, int z)
    {
        return true;
    }

    /**
     * Unload Area from AreaProviderClient's hashmap. Called in response to a Packet50PreArea with its mode field set
     * to false
     */
    public void unloadArea(int x,int z)
    {
        Area var3 = this.provideArea(x,z);

        if (!var3.isEmpty())
        {
            var3.onAreaUnload();
        }

        this.AreaMapping.remove(AreaCoordIntPair.AreaXZ2Int(x, z));
        this.AreaListing.remove(var3);
    }

    /**
     * loads or generates the Area at the Area location specified
     */
    public Area loadArea(int x,int y, int z)
    {
        Area var3 = new Area(this.worldObj, x, z);
        this.AreaMapping.add(AreaCoordIntPair.AreaXZ2Int(x, z), var3);
        this.AreaListing.add(var3);
        var3.isAreaLoaded = true;
        return var3;
    }

    /**
     * Will return back a Area, if it doesn't exist and its not a MP client it will generates all the BasicEntityRender for the
     * specified Area from the map seed and Area seed
     */
    public Area provideArea(int x,int z)
    {
        Area var3 = (Area)this.AreaMapping.getValueByKey(AreaCoordIntPair.AreaXZ2Int(x, z));
        return var3 == null ? this.blankArea : var3;
    }

    /**
     * Two modes of operation: if passed true, save all Areas in one go.  If passed false, save up to two Areas.
     * Return true if all Areas have been saved.
     */
    public boolean saveAreas(boolean p_73151_1_, IProgressUpdate p_73151_2_)
    {
        return true;
    }

    /**
     * Save extra data not associated with any Area.  Not saved during autosave, only during world unload.  Currently
     * unimplemented.
     */
    public void saveExtraData() {}

    /**
     * Unloads Areas that are marked to be unloaded. This is not guaranteed to unload every such Area.
     */
    public boolean unloadQueuedAreas()
    {
        long var1 = System.currentTimeMillis();
        Iterator var3 = this.AreaListing.iterator();

        while (var3.hasNext())
        {
            Area var4 = (Area)var3.next();
            var4.func_150804_b(System.currentTimeMillis() - var1 > 5L);
        }

        if (System.currentTimeMillis() - var1 > 100L)
        {
            logger.info("Warning: Clientside Area ticking took {} ms", new Object[] {Long.valueOf(System.currentTimeMillis() - var1)});
        }

        return false;
    }

    /**
     * Returns if the IAreaProvider supports saving.
     */
    public boolean canSave()
    {
        return false;
    }

    /**
     * Populates Area with ores etc etc
     */
    public void populate(IAreaProvider iap, int x,int y, int z) {}

    /**
     * Converts the instance data to a readable string.
     */
    public String makeString()
    {
        return "MultiplayerAreaCache: " + this.AreaMapping.getNumHashElements() + ", " + this.AreaListing.size();
    }

    /**
     * Returns a list of creatures of the specified type that can spawn at the given location.
     */
    public List getPossibleCreatures(EnumCreatureType p_73155_1_, int p_73155_2_, int p_73155_3_, int p_73155_4_)
    {
        return null;
    }

    public AreaPosition func_147416_a(World p_147416_1_, String p_147416_2_, int p_147416_3_, int p_147416_4_, int p_147416_5_)
    {
        return null;
    }

    public int getLoadedAreaCount()
    {
        return this.AreaListing.size();
    }

    public void recreateStructures(int p_82695_1_, int p_82695_2_) {}

	}
