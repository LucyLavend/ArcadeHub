package nl.thestructureworld.client.renderer;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.imageio.ImageIO;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL13;
import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.KeyAndOtherSettings;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.terrainandobjects.TerrainDirt;
import nl.thestructureworld.terrainandobjects.TerrainObjectStone;
import nl.thestructureworld.terrainandobjects.ObjectDesertGrass;
import nl.thestructureworld.terrainandobjects.ObjectTree;
import nl.thestructureworld.util.MathHelper;
import nl.thestructureworld.world.World;

public class RenderTerrain
{
	/**
	 * Draw the Object
	 */
	Tessellator modelDrawer = Tessellator.instance;
	
    /** The minimum X value for rendering (default 0.0). */
    private double renderMinX;

    /** The maximum X value for rendering (default 1.0). */
    private double renderMaxX;

    /** The minimum Y value for rendering (default 0.0). */
    private double renderMinY;

    /** The maximum Y value for rendering (default 1.0). */
    private double renderMaxY;

    /** The minimum Z value for rendering (default 0.0). */
    private double renderMinZ;

    /** The maximum Z value for rendering (default 1.0). */
    private double renderMaxZ;

	TheStructureWorld worldstructure = TheStructureWorld.TheStructureWorld;

	public static World serverWorld;
  
    public RenderTerrain(){}
    
    /**
     *  Renders an object using the given texture.
     */
    public void renderTerrainandObjectUsingTexture(TerrainObject o)
    {
    	this.renderMinX = o.XMin;
        this.renderMaxX = o.YMax;
        this.renderMinY = o.XMax;
        this.renderMaxY = o.ZMin;
        this.renderMinZ = o.YMin;
        this.renderMaxZ = o.ZMax;
    }
    //this.renderGround(this.serverWorld, o, x, y, z, quality);
    /**
     *  Renders an object using the given texture.
     * @param worldObj 
     * @param quality 
     */
    public void renderAllTerrain(TerrainObject o, double x, double y, double z, int quality)
    {	
    	if(this.serverWorld != null){
    	String texture = ""+serverWorld.getTerrainObjectDataInteger(x, y, z);	
    	String firstC = ""+texture.charAt(0);	
    		
    		
    	if(o == TerrainObject.air){this.renderSky(o, x, y, z);}
    	if(o == TerrainObject.stone){this.renderStone(o, x, y, z,quality/1388D);}
    	if(o == TerrainObject.GreenPipe){this.renderHalfCircleNeg(x, y-0.2, z, 0.05D,1,-15,2,false);}
    	if(o == TerrainObject.unnamedObject){this.renderUnnamedObject((float)x, (float)y-0.2F, (float)z);}
    	if(o == TerrainObject.DirtTerrain){this.renderGround(this.serverWorld, o, x, y, z, quality);}
    	if(o == TerrainObject.SpikePlant){this.renderSpikePlant(x, y, z);}
    	if(o == TerrainObject.Reeds){this.renderReeds(x, y, z);}
    	if(o == TerrainObject.DecorativeCreeperBush){this.renderCreeperBush(x, y, z);}
    	if(o == TerrainObject.SmallFern){this.renderSmallFern(x, y, z);}
    	if(o == TerrainObject.SmallCrop){this.renderSmallCrop(x, y, z);}
    	if(o == TerrainObject.TreeLeaf){this.renderTreeLeaf(x, y, z);}
    	if(o == TerrainObject.SmallLeaf){this.renderSmallLeaf(x, y, z);}}
    	//if(o == TerrainObject.Tree){this.renderTree(x, y, z);}
    }
    
    //modelDrawer.setTranslation(x+(texture.codePointAt(0)/100D), y-0.2, z+(texture.codePointAt(0)/100D));
	
    public void renderSmallLeaf(double x, double y, double z)
    {
    	modelDrawer.setTranslation(y-0.2); 
    	modelDrawer.addVertexWithUV(1.01, 0.51,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(1.01, 0.51,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.21,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.21,  1.0,  0.3,    0.2);
    	
    	modelDrawer.addVertexWithUV(0.99, 0.21,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(0.99, 0.21,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.51,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.51,  1.0,  0.3,    0.2);
    	
    	modelDrawer.addVertexWithUV(1.02, 0.21,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(1.02, 0.51,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.51,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.21,  1.0,  0.3,    0.2);
    	
    	modelDrawer.addVertexWithUV(1.02, 0.51,  1.0,  0.2,    0.2);
    	modelDrawer.addVertexWithUV(1.03, 0.21,  0.0,  0.2,    0.1);
    	modelDrawer.addVertexWithUV(0.03, 0.21,  0.0,  0.3,    0.1);
    	modelDrawer.addVertexWithUV(0.01, 0.51,  1.0,  0.3,    0.2);
    }
    
    public void renderTreeLeaf(double x, double y, double z)
    {
    	modelDrawer.setTranslation(y-0.2);	
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,1.0026004,0.2,  0.2);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,0.0025999942,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,0.0025999942,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,1.0026004,0.2,  0.2);
    	modelDrawer.addVertexWithUV(0.88773495, 0.6941662,0.5082184,0.2,  0.2);
    	modelDrawer.addVertexWithUV(0.10230115, 0.6842645,0.508172,0.2,  0.1);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0.1,  0.2);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.10230115, 0.6842645,0.508172,0.2,  0.1);
    	modelDrawer.addVertexWithUV(0.88773495, 0.6941662,0.5082184,0.2,  0.2);
    }
    
    public void renderSmallCrop(double x, double y, double z)
    {
    	modelDrawer.setTranslation(x, y-0.2, z);
    	modelDrawer.addVertexWithUV(1.0, 0.20194925,1.0,0.1,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.20194925,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.20194925,0.0,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.20194925,1.0,0,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.571929,1.0,0.1,  0.2);
    	modelDrawer.addVertexWithUV(1.0, -0.13275525,0.0,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.0, -0.17025588,0.0,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.56282747,0.98149693,0,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.19584915,1.0,0,  0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.5655279,-0.0633005,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, 0.27444685,-0.024399966,0,  0.1);
    	modelDrawer.addVertexWithUV(0.0, -0.09765466,1.0,0,  0.2);
    	modelDrawer.setTranslation(y-0.4);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,1.0026004,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,0.0025999942,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0,  0.2);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0,  0.2);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,0.0025999942,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,1.0026004,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.88773495, 0.6941662,0.5082184,0.1,  0.2);
    	modelDrawer.addVertexWithUV(0.10230115, 0.6842645,0.508172,0.1,  0.1);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0,  0.1);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0,  0.2);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0,  0.2);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0,  0.1);
    	modelDrawer.addVertexWithUV(0.10230115, 0.6842645,0.508172,0.1,  0.1);
    	modelDrawer.addVertexWithUV(0.88773495, 0.6941662,0.5082184,0.1,  0.2);
    }
    
    public void renderSmallFern(double x, double y, double z)
    {
    	modelDrawer.setTranslation(y-0.2);
    	modelDrawer.addVertexWithUV(1.0, 0.20194925,1.0,1,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.20194925,0.0,1,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.20194925,0.0,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.20194925,1.0,0.9,0.1);
    	
    	modelDrawer.addVertexWithUV(1.0, 0.571929,1.0,0.9,0.1);
    	modelDrawer.addVertexWithUV(1.0, -0.13275525,0.0,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.0, -0.17025588,0.0,0.8,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.56282747,0.98149693,0.8,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.19584915,1.0,0.9,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.5655279,-0.0633005,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.27444685,-0.024399966,0.8,0.0);
    	modelDrawer.addVertexWithUV(0.0, -0.09765466,1.0,0.8,0.1);
    	modelDrawer.setTranslation(y-0.4);
        modelDrawer.addVertexWithUV(0.4886774, 0.6032677,1.0026004,1,0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,0.0025999942,1,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0.9,0.1);
    	
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0.9,0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,0.0025999942,1,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 0.6032677,1.0026004,1,0.1);
    	
    	modelDrawer.addVertexWithUV(0.88773495, 0.6941662,0.5082184,1,0.1);
    	modelDrawer.addVertexWithUV(0.10230115, 0.6842645,0.508172,1,0.0);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0.9,0.1);
    	
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0.9,0.1);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0.9,0.0);
    	modelDrawer.addVertexWithUV(0.10230115, 0.6842645,0.508172,1,0.0);
    	modelDrawer.addVertexWithUV(0.88773495, 0.6941662,0.5082184,1,0.1);
    }
    
    public boolean renderFastBush = true;
    public void renderCreeperBush(double x, double y, double z)
    {
    		double	XX = this.serverWorld.getTerrainObjectDataInteger(x, y, z)/10D;
    		if(this.renderFastBush && this.serverWorld.getTerrainObjectDataInteger(x, y, z) == 4)
    		{
    		modelDrawer.setTranslation(x, y-0.18, z-0.1);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.2);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.3);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.4);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.5);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.6);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.7);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.setTranslation(x, y-0.18, z-0.8);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
        	modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
        	modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
        	modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
    		}
    		modelDrawer.setTranslation(x, y-0.2, z);
    		modelDrawer.addVertexWithUV(0.24640359, 1.1934662,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.24640359, 1.1934662,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.24640359, 0.19354911,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.24640359, 0.19354911,1.0,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.24640359, 0.19354911,1.0,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.24640359, 0.19354911,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.24640359, 1.1934662,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.24640359, 1.1934662,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.76481456, 0.19674917,1.0,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.76481456, 0.19674917,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.76481456, 1.1966667,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.76481456, 1.1966667,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.76481456, 1.1966667,1.0,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.76481456, 1.1966667,0.0,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.76481456, 0.19674917,0.0,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.76481456, 0.19674917,1.0,0.3+XX,0.1);
    		if(this.serverWorld.getTerrainObjectDataInteger(x, y, z) == 4)
    		{
    		modelDrawer.addVertexWithUV(0.8960363, 1.1166533,0.9807968,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.82602465, 1.1478585,-0.019199973,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.13440168, 1.1152191,-0.019199973,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.13440168, 1.102417,0.9807968,0.3+XX,0.1);	
    		modelDrawer.addVertexWithUV(0.13440168, 1.102417,0.9807968,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.13440168, 1.1152191,-0.019199973,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.82602465, 1.1478585,-0.019199973,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.8960363, 1.1166533,0.9807968,0.4+XX,0.1);
    		}
    		modelDrawer.addVertexWithUV(0.15960208, 1.186665,0.034746423,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.8816339, 1.1486588,0.06840058,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.8816339, 0.16394861,0.06840058,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.15960208, 0.1335481,0.042346552,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.15960208, 0.1335481,0.042346552,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.8816339, 0.16394861,0.06840058,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.8816339, 1.1486588,0.06840058,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.15960208, 1.186665,0.034746423,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
    		modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.15520206, 1.1726626,0.9615936,0.4+XX,0.1);
    		modelDrawer.addVertexWithUV(0.9192401, 1.1318558,0.95444596,0.4+XX,0.0);
    		modelDrawer.addVertexWithUV(0.8240243, 0.13074805,0.95444596,0.3+XX,0.0);
    		modelDrawer.addVertexWithUV(0.078000754, 0.19994922,0.9615936,0.3+XX,0.1);
    }
    
  
    public void renderReeds(double x, double y, double z)
    {	
    	modelDrawer.setTranslation(y-0.2);   	
    	modelDrawer.addVertexWithUV(0.4886774, 1.2032677,1.0026004,0.3,0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 1.2032677,0.0025999942,0.3,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0.1,0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,1.0026004,0.1,0.1);
    	modelDrawer.addVertexWithUV(0.4886774, 0.20334928,0.0025999942,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 1.2032677,0.0025999942,0.3,0.0);
    	modelDrawer.addVertexWithUV(0.4886774, 1.2032677,1.0026004,0.3,0.1);
    	modelDrawer.addVertexWithUV(0.88773495, 1.1941662,0.5082184,0.3,0.1);
    	modelDrawer.addVertexWithUV(0.10230115, 1.1842645,0.508172,0.3,0.0);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0.10,0.1);
    	modelDrawer.addVertexWithUV(0.99995357, 0.19094907,0.5280217,0.1,0.1);
    	modelDrawer.addVertexWithUV(-0.009899989, 0.18434896,0.508172,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.10230115, 1.1842645,0.508172,0.3,0.0);
    	modelDrawer.addVertexWithUV(0.88773495, 1.1941662,0.5082184,0.3,0.1);
    }
    
    public void renderTree(double x, double y, double z)
    {
    	modelDrawer.addVertexWithUV(1+x, 1+y+0.2, 1+z, 1,1);
    	modelDrawer.addVertexWithUV(1+x, 1+y+0.2, 0+z, 1,0);
    	modelDrawer.addVertexWithUV(0+x, 1+y+0.2, 0+z, 0,0);
    	modelDrawer.addVertexWithUV(0+x, 1+y+0.2, 1+z,0,1);
    }
     
    public static List<ArrayListConsole> ArrayListConsole = new ArrayList<ArrayListConsole>();
    
    public static class ArrayListConsole
    {
    	public float x;
    	public float y;
    	public float z;
    	public String objectName = "";
    	public double X;
    	public double Y;
    	public int pointNumber;
    	public int ModelNumber;
    	public ArrayListConsole(float x,float y, float z,String name, double d, double dd,int n,int m)
    	{
    		this.x = x;
    		this.y = y;
    		this.z = z;
    		this.objectName = name;
    		this.X = d;
    		this.Y = dd;
    		this.pointNumber = n;
    		this.ModelNumber = m;
    	}
    }
   
   /**
    *Renders an object using the given texture.
    */
    public void renderUnnamedObject(float x, float y, float z)
    {	
	    for(int id=0;id<this.ArrayListConsole.size();++id)
	    {	
	    	if(KeyAndOtherSettings.Point == -1)
	    	{
	    	KeyAndOtherSettings.MoveObject(this.ArrayListConsole.get(id));
	    	}
	    	else if(this.ArrayListConsole.get(id).pointNumber == KeyAndOtherSettings.Point)
	    	{
	    	KeyAndOtherSettings.MoveObject(this.ArrayListConsole.get(id));
	    	}
	    	modelDrawer.addVertexWithUV(this.ArrayListConsole.get(id).x+x, this.ArrayListConsole.get(id).y+y, this.ArrayListConsole.get(id).z+z, this.ArrayListConsole.get(id).X, this.ArrayListConsole.get(id).Y);
	    }
    }
    
    public void renderSky(TerrainObject o, double x, double y, double z)
    {	
    	modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, 20.0D+z, 0.9D, 0.94D);
    	modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, -20.0D+z, 0.9D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, 20.0D+z, 1.0D, 0.94D);
    	modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, 20.0D+z, 0.0D, 0.0D);
    	modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, 20.0D+z, 0.0D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, 20.0D+z, 1.0D, 1.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 0.0D+y, 20.0D+z, 1.0D, 0.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 0.0D+y, -20.0D+z, 1.0D, 0.0D);
    	modelDrawer.addVertexWithUV( 20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, -20.0D+z, 0.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, -20.0D+z, 0.0D, 0.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, -20.0D+z, 1.0D, 0.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 60.0D+y, 20.0D+z, 0.0D, 1.0D);
		modelDrawer.addVertexWithUV(-20.0D+x, 0.0D+y, 20.0D+z, 0.0D, 0.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 0.0D+y, 20.0D+z, 0.0D, 0.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 60.0D+y, 20.0D+z, 0.0D, 1.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 60.0D+y, -20.0D+z, 1.0D, 1.0D);
		modelDrawer.addVertexWithUV(20.0D+x, 0.0D+y, -20.0D+z, 1.0D, 0.0D);
    }
       
    /**
     * Renders an object using the given texture.
     * @param worldObj 
     */
    public void renderGround(World world, TerrainObject o, double x, double y, double z, double q)
    {	
    	String texture = ""+serverWorld.getTerrainTextureOffset((int)x,(int)y,(int)z);
    	if(texture.length() < 3)
    	{
    		texture = ""+this.rand.nextInt(9)+""+this.rand.nextInt(9);
    	}
    	double randomX = 0.05D*Integer.parseInt(texture.substring(0,1));
    	double randomY = 0.05D*Integer.parseInt(texture.substring(1,2));
    	double Q = (q/500); 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 1  	    
    	 modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.25, 	0.05D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z, 		0.05D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z,			0.0D+randomX, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.25,  	0.0D+randomX, 0.05D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z, 		0.1D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z,		0.05D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.25, 0.05D+randomX-Q, 0.05D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.25, 	0.15D+randomX-Q, 0.05D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z, 		0.15D+randomX-Q, 0.0D+randomY);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z, 		0.1D+randomX-Q, 0.0D+randomY);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.25, 		 0.2D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z, 			 0.2D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z, 		 0.15D+randomX-Q, 0.0D+randomY);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.25,  0.15D+randomX-Q, 0.05D+randomY-Q);
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 2  	
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.5, 	0.05D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.25, 	0.05D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.25,	0.0D+randomX, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.5,  	0.0D+randomX, 0.1D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.25,	0.05D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.5, 	0.05D+randomX-Q, 0.1D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.5, 	0.15D+randomX-Q, 0.1D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.25, 	0.15D+randomX-Q, 0.05D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.25, 	0.1D+randomX-Q, 0.05D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.5, 		 0.2D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.25, 		 0.2D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.25,  0.15D+randomX-Q, 0.05D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.5,   0.15D+randomX-Q, 0.1D+randomY-Q);
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 3 	    
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.75, 	0.05D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.5, 	0.05D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.5,		0.0D+randomX, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.75,  	0.0D+randomX, 0.15D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.5,	0.05D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.75, 0.05D+randomX-Q, 0.15D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.75, 	0.15D+randomX-Q, 0.15D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.5, 	0.15D+randomX-Q, 0.1D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.5, 	0.1D+randomX-Q, 0.1D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.75, 		 0.2D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.5, 		 0.2D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.5,   0.15D+randomX-Q, 0.1D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.75,  0.15D+randomX-Q, 0.15D+randomY-Q);	  
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////Row 4    
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+1, 		0.05D+randomX-Q, 0.2D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25, y+1, z+0.75, 	0.05D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+0.75,	0.0D+randomX, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0,   y+1, z+1,  		0.0D+randomX, 0.2D+randomY-Q);
    	
   	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+1, 		0.1D+randomX-Q, 0.2D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.5, y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+0.75,	0.05D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.25,   y+1, z+1, 	0.05D+randomX-Q, 0.2D+randomY-Q);
	    
	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+1, 		0.15D+randomX-Q, 0.2D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.75, y+1, z+0.75, 	0.15D+randomX-Q, 0.15D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+0.75, 	0.1D+randomX-Q, 0.15D+randomY-Q);
   	     modelDrawer.addVertexWithUV(x+0.5,   y+1, z+1, 	0.1D+randomX-Q, 0.2D+randomY-Q);
   	    
   	     modelDrawer.addVertexWithUV(x+1, y+1, z+1, 		 0.2D+randomX-Q, 0.2D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+1, y+1, z+0.75, 		 0.2D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+0.75,  0.15D+randomX-Q, 0.15D+randomY-Q);
	     modelDrawer.addVertexWithUV(x+0.75,   y+1, z+1,   	 0.15D+randomX-Q, 0.2D+randomY-Q);		  
    }
    
    
    /**
     * Renders an object using the given texture.
     */
    public void renderSpikePlant(double x, double y, double z)
    {	
    	String texture = ""+serverWorld.getTerrainObjectDataInteger(x, y, z);
    	if(texture.length() == 3)
    	{
    	modelDrawer.setTranslation(x+(texture.codePointAt(0)/10D), y-0.2, z+(texture.codePointAt(0)/10D));
    	}
    	else
    	{
    	modelDrawer.setTranslation(x, y-0.2, z);
        }
    	modelDrawer.addVertexWithUV(1.0, 0.20194925,1.0,0.1,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.20194925,0.0,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.20194925,0.0,0.0,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.20194925,1.0,0.0,0.1);
    	modelDrawer.addVertexWithUV(1.0037006, 0.571929,1.0,0.1,0.1);
    	modelDrawer.addVertexWithUV(1.0, -0.13275525,0.0,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.0, -0.17025588,0.0,0.0,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.56282747,0.98149693,0.0,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.19584915,1.0,0.1,0.1);
    	modelDrawer.addVertexWithUV(1.0, 0.5655279,-0.0633005,0.1,0.0);
    	modelDrawer.addVertexWithUV(0.0, 0.27444685,-0.024399966,0.0,0.0);
    	modelDrawer.addVertexWithUV(0.0, -0.09765466,1.0,0.0,0.1);
   }

    
    /**
     *  Renders an object using the given texture.
     */
    public void renderDiamond_Plate(TerrainObject o, double x, double y, double z)
    {	
    	   double var26 = x + this.renderMinX;
 	       double var28 = x + this.renderMaxX;
 	       double var32 = z + this.renderMinZ;
 	       double var34 = z + this.renderMaxZ;
 	       double var30 = y + this.renderMaxY;
 	       modelDrawer.addVertexWithUV(var28, var30, var34, 0.35D, 0.0D);
 	       modelDrawer.addVertexWithUV(var28, var30, var32, 0.35D, 0.05D);
 	       modelDrawer.addVertexWithUV(var26, var30, var32, 0.4D, 0.05D);
 	       modelDrawer.addVertexWithUV(var26, var30, var34, 0.4D, 0.0D);
    }
    
    /**
     *  Renders an object using the given texture.
     * @param quality 
     */
    public void renderStone(TerrainObject o, double x, double y, double z, double quality)
    {
    	if(o instanceof TerrainObjectStone)
    	{
    	   double var26 = x + this.renderMinX;
   	       double var28 = x + this.renderMaxX;
   	       double var32 = z + this.renderMinZ;
   	       double var34 = z + this.renderMaxZ;
   	       double var30 = y + this.renderMaxY;
   	       modelDrawer.addVertexWithUV(var28, var30, var34, 0.0D+quality, 0.0D+quality);
   	       modelDrawer.addVertexWithUV(var28, var30, var32, 0.05D-quality, 0.0D+quality);
   	       modelDrawer.addVertexWithUV(var26, var30, var32, 0.05D-quality, 0.05D-quality);
   	       modelDrawer.addVertexWithUV(var26, var30, var34, 0.0D+quality, 0.05D-quality);
    	} 
    }
    
    public Random rand = new Random();
    
    
    /**
     * Half circle generator:
     * @param x: x position 
     * @param y: y position 
     * @param z: z position 
     * @param width: width between the two circles that are already connected
     * @param r: the variety of the +-Y and +-Z position and when it is lower than 5(If you set it yourself), 
     * there is no noticeable difference between the 'rough bark'.
     * @param maxExtra: how many parts down the Y position will be rendered.
     */
    public void renderHalfCircleNeg(double x, double y, double z, double width,int r,int maxExtra,double textureNumber,boolean innerNext)
    {	{
     		double XMN = x + this.renderMinX;
            double XMX = x + this.renderMaxX;
            double ZMIN = z + this.renderMinZ+0.525;
            double ZMAX = z + this.renderMinZ-0.025+0.5F;
            double YMX4 = y + this.renderMaxY+0.1D;
            double YMX = y + this.renderMaxY+0.1D;
            double YMX2 = y + this.renderMaxY+0.1D;
            double YMX3 = y + this.renderMaxY+0.1D;
            double TX = 0.2D+(textureNumber*0.05D);
            double TX1 = 0.2D+textureNumber*0.05D;
            double TX3 = 0.25D+textureNumber*0.05D;
            double TX2= 0.25D+textureNumber*0.05D;
            double XXX = 0.05;
    	    double XExtra = 0.006;
    	    double inner = 0.0D;
    	    if(innerNext)
    	    {
    	    	inner = 0.05D;
    	    }
            double TY = 0.0D;
            double TY3 = 0.0D; 
            double TY1 = 0.003D;
            double TY2 = 0.003D;
            for(double extra = 0;extra>maxExtra;extra-=1)
       	    {
            ZMIN = ZMIN-XXX; 
            ZMAX = ZMAX+XXX; 
            extra = extra+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
            YMX = YMX+(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
            YMX2 = YMX2-(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
            modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN+XXX+0.1D,TX+inner, TY);
       	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1+inner, TY1);
    	    modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX3+inner, TY2);
            modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN+XXX+0.1D, TX2+inner, TY3);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN+XXX+0.1D,TX, TY);
            modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX1, TY1);
            modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX3, TY2);
            modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN+XXX, TX2, TY3);
       	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1, TY1);
       	    modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN+XXX+0.1D, TX, TY); 
       	    modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN+XXX,TX2, TY3);
       	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3, TY2);   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    	  	modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN+XXX,TX, TY);
       	    modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX1, TY1);
    	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3, TY2);
            modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN+XXX, TX2, TY3);
            TY  = TY1;
            TY3 = TY2;
            if(extra > -12)
            {
            TY1 = TY1+0.003D;
            TY2 = TY2+0.003D;
            }
            else
            {
            TY1 = TY1-0.003D;
            TY2 = TY2-0.003D;
            }
            YMX4 = YMX;
            XXX *= 0.999+(extra/100D);
       	   }}
        {
    	double XMN = x + this.renderMinX;
        double XMX = x + this.renderMaxX;
        double ZMIN = z + this.renderMinZ+0.525;
        double ZMAX = z + this.renderMinZ-0.025+0.5F;
        double YMX4 = y + this.renderMaxY+0.1D;
        double YMX = y + this.renderMaxY+0.1D;
        double YMX2 = y + this.renderMaxY+0.1D;
        double YMX3 = y + this.renderMaxY+0.1D;
        double TX = 0.2D+(textureNumber*0.05D);
        double TX1 = 0.2D+textureNumber*0.05D;
        double TX3 = 0.25D+textureNumber*0.05D;
        double TX2= 0.25D+textureNumber*0.05D;
        double XXX = 0.05;
	    double XExtra = 0.006;
	    double inner = 0.0D;
	    if(innerNext)
	    {
	    	inner = 0.05D;
	    }
        double TY = 0.0D;
        double TY3 = 0.0D; 
        double TY1 = 0.003D;
        double TY2 = 0.003D;
        for(double extra = 0;extra>maxExtra;extra-=1)
   	    {
        ZMIN = ZMIN+XXX; 
        ZMAX = ZMAX-XXX; 
        extra = extra+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
        YMX = YMX+(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
        YMX2 = YMX2-(XExtra*extra)+(rand.nextInt(r)/1000D)-(rand.nextInt(r)/1000D);
        modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN-XXX+0.1D,TX, TY);
   	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1, TY1);
	    modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX3, TY2);
        modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN-XXX+0.1D, TX2, TY3);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        modelDrawer.addVertexWithUV(XMX, YMX4-width,ZMIN-XXX+0.1D,TX, TY);
        modelDrawer.addVertexWithUV(XMX, YMX-width, ZMIN+0.1D, TX1, TY1);
        modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX3, TY2);
        modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN-XXX, TX2, TY3);
   	    modelDrawer.addVertexWithUV(XMN, YMX-width, ZMIN+0.1D, TX1, TY1);
   	    modelDrawer.addVertexWithUV(XMN, YMX4-width,ZMIN-XXX+0.1D, TX, TY); 
   	    modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN-XXX,TX2, TY3);
   	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3, TY2);   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	modelDrawer.addVertexWithUV(XMX, YMX4,ZMIN-XXX,TX+inner, TY);
   	    modelDrawer.addVertexWithUV(XMX, YMX, ZMIN, TX1+inner, TY1);
	    modelDrawer.addVertexWithUV(XMN, YMX, ZMIN, TX3+inner, TY2);
        modelDrawer.addVertexWithUV(XMN, YMX4,ZMIN-XXX, TX2+inner, TY3);
        TY  = TY1;
        TY3 = TY2;
        if(extra > -12)
        {
        TY1 = TY1+0.003D;
        TY2 = TY2+0.003D;
        }
        else
        {
        TY1 = TY1-0.003D;
        TY2 = TY2-0.003D;
        }
        YMX4 = YMX;
        XXX *= 0.999+(extra/100D);
   	   } }
    }
      

   
  
   
 
   
}


       