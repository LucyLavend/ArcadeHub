package nl.thestructureworld.client.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.border.Border;

import nl.thestructureworld.account.MouseControl;
import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.multiplayer.ServerData;
import nl.thestructureworld.client.renderer.OpenGlHelper;
import nl.thestructureworld.client.renderer.Tessellator;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListConvertOBJ;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListText;
import nl.thestructureworld.entity.EntityPlayer;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.util.EnumChatFormatting;
import nl.thestructureworld.util.ResourceLocation;
import nl.thestructureworld.world.storage.ISaveFormat;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.util.glu.Project;

public class ShaderEditorGui extends GuiScreen
{
    private static final Random rand = new Random();
    
    public ShaderEditorGui()
    {
    	this.backGroundTexture = "/menu/wooden hut background.png";
    }

    public File shaderLoc;
	public static List<ArrayListText> text = new ArrayList<ArrayListText>();
	
    /**
     * Returns true if this GUI should pause the game when it is displayed in single-player
     */
    public boolean doesGuiPauseGame()
    {
        return false;
    }

    @Override
    /**
     * Fired when a key is typed. This is the equivalent of KeyListener.keyTyped(KeyEvent e).
     */
    protected void keyTyped(char c, int i) 
    {
    	super.keyTyped(c,i);
    }

    public String editingShaderPath ="";
    public boolean editShader = false;
    
 
	protected void actionPerformed(ButtonBasic button)
    {
        if (button.id == 0)
        {
        	if(openFile==0)
        	{
        		Frame fr = new Frame();
        		ImageIcon icon = new ImageIcon(FileBasicJava.sources+"/Menu/question mark.png");
        		fr.setIconImage(icon.getImage());
        		JFileChooser chooser = new JFileChooser();
        		chooser.setCurrentDirectory(new File(FileBasicJava.sourceShaders));
        		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        		chooser.showOpenDialog(fr);
        		chooser.setAcceptAllFileFilterUsed(false);
        		chooser.setDialogTitle("Select Folder to save Shader");
        		if (chooser.APPROVE_OPTION == 0) 
        		{
        		editingShaderPath = chooser.getCurrentDirectory().toString();
        		try{BufferedWriter w = new BufferedWriter(new FileWriter(editingShaderPath+"/ShaderWithoutName.txt"));w.close();
				}catch (IOException e)
				{
				this.setError(e.toString());
				}
        		}
        		openFile=100;
     	    }}
        	
        	if (button.id == 1)
            {
        	if(openFile==0)
        	{
        		
        		Frame fr = new Frame();
        		ImageIcon icon = new ImageIcon(FileBasicJava.sources+"/Menu/question mark.png");
        		fr.setIconImage(icon.getImage());
        		JFileChooser chooser = new JFileChooser();
        		chooser.setCurrentDirectory(new File(FileBasicJava.sourceShaders));
        		chooser.showOpenDialog(fr);
        		chooser.setAcceptAllFileFilterUsed(false);
        		chooser.setDialogTitle("Select Folder to save Shader");
        		if (chooser.APPROVE_OPTION == 0) 
        		{	
        		editingShaderPath = chooser.getSelectedFile().getAbsolutePath();
        		}
        		this.editShader = true;
        		openFile=100;
     	    }
        	

        }
    }
    
    

    String error = "";
    int errorTimer = 0;
    int openFile = 0;
    String lineRead = "";
    int scrollFile = 0;
    public int isEmptyLine;
    
    public void setError(String err)
    {
    	error=err;
    	errorTimer = 500;	
    }
    FontRenderer fontRenderer = new FontRenderer(TheStructureWorld.acceptedSymbols);
    String readtext;
    public int editLine = 0;
    
 

 
    @Override
    public void drawScreen(int x, int y)
    {
    	GL11.glPushMatrix();
    	this.buttonList.add(new ButtonBasic(0, 200, 100, 41 , "Create Shader"));
    	this.buttonList.add(new ButtonBasic(1, 200, 200, 41 , "Load Shader"));
    	this.drawTextured(0, 0, 640,400,0,0, backGroundTexture);
        if(errorTimer>0){--errorTimer;}
        else if(errorTimer<4){error="";}
        if(openFile>0){--openFile;}
        Tessellator var4 = Tessellator.instance;
        
        if(this.editShader){
        try
        {
        BufferedReader w = new BufferedReader(new FileReader(editingShaderPath));
        
        for(int i=0;i<300;++i)
        {     
        this.readtext=w.readLine();
        if(this.readtext!=null)
        {
        this.text.add(new ArrayListText(this.readtext));
        }
        else if(this.isEmptyLine < 5)
        {
        	++this.isEmptyLine;
        }
        else
        {
        	continue;
        }} 
        w.close();
        this.editShader = false;this.isEmptyLine=0;
		}catch (IOException e)
		{
		this.setError(e.toString());this.editShader = false;
		}}
        GL11.glPushMatrix();
        GL11.glColor4f(1,1,1,1);
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/Shader-Editor.png",0,true); 
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, 360, 0.0D, 0.0D, 1D);
        var4.addVertexWithUV(640, 360, 0.0D, 0.9575D, 1D);
        var4.addVertexWithUV(640, 20.0D, 0.0D, 0.9575D, 0.055D);
        var4.addVertexWithUV(0.0D, 20.0D, 0.0D, 0.0D, 0.055D);
        var4.draw();
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        GL11.glScalef(0.9F, 0.9F, 1);
        GL11.glEnable(GL11.GL_BLEND);
        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        for (int i = 0; i < this.text.size(); ++i)
        {	
        this.drawString(fontRenderer,this.text.get(i).textShader,5, 40+(10*(i-this.scrollFile)), 14);
        }
        GL11.glPopMatrix();  
        GL11.glPushMatrix();
        GL11.glColor4f(1,1,1,1);
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/Shader-Editor.png",0,true); 
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, 20, 0.0D, 0.0D, 0.055D);
        var4.addVertexWithUV(640, 20, 0.0D, 0.9575D, 0.055D);
        var4.addVertexWithUV(640, 0.0D, 0.0D, 0.9575D, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
        var4.draw();
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        GL11.glEnable(GL11.GL_BLEND);
        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        this.drawString(fontRenderer,"Error: "+error, 50,340, 14);
        this.drawString(fontRenderer,""+editingShaderPath, 20, 10, 14);
        GL11.glPopMatrix();
        if(MouseControl.scroll == 1 && this.scrollFile>0)
        {
        	--this.scrollFile;--this.scrollFile;
        }
        else if(MouseControl.scroll == -1 && this.scrollFile< (this.text.size()%90))
        {
        	++this.scrollFile;++this.scrollFile;
        }
        this.drawString(fontRenderer,""+this.text.size(),5, 10, 14);
        for (int i = 0; i < this.buttonList.size(); ++i)
        {
            ((ButtonBasic)this.buttonList.get(i)).drawButton(this.thestructureworld, x, y);
        }
        for (int i = 0; i < this.labelList.size(); ++i)
        {
            ((GuiLabel)this.labelList.get(i)).func_146159_a(this.thestructureworld, x, y);
        }	
        GL11.glPopMatrix();

        
    }
 
}
