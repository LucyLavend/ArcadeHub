package game.inventory;

import java.io.File;

import org.lwjgl.input.Keyboard;

import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.gui.IngameGui;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.entity.builds.EntityCampfire;
import nl.miystengine.client.uiinteractive.PlayerInventoryBasic;
import nl.miystengine.world.World;

public class PlayerInventory extends PlayerInventoryBasic
{
	public float posXPlayer;
	public float posYPlayer;
	public float posZPlayer;
	public int placeBuild = 0;
	//Inventory Slots
    private int hasRocksInInventory = 0;
    private int hasMossRocksInInventory = 0;
    private int hasMossInInventory = 0;
    private int hasSticksInInventory = 0;
    private int hasTwigsInInventory = 0;
    private int hasLogsInInventory = 0;
    private int hasObsidianRockInInventory = 0;
    private int hasObsidianShardsInInventory = 0;
    //
    private String dataOneString = "";
    
	public PlayerInventory(){}
	
	@Override
	public void writeDataOfPlayer(String folderName,String location)
    {
		String[] worldData;
    	System.out.println("Data:");
    	dataOneString += "rocks:" + this.hasRocksInInventory + "\r\n";
     	dataOneString += "twig:" + this.hasTwigsInInventory + "\r\n";
     	dataOneString += "moss rock:" + this.hasMossRocksInInventory + "\r\n";
     	dataOneString += "moss:" + this.hasMossInInventory + "\r\n";
    	dataOneString += "obsidian rock:" + this.hasObsidianRockInInventory + "\r\n";
    	dataOneString += "obsidian shard:" + this.hasObsidianRockInInventory + "\r\n";
    	File[] files = FileBasicJava.loadFilesFromFolder(location + "/");
    	if(files != null)
    	{
	    	for(int i = 0;i < files.length;++i)
		    {
	    		if(files[i].getName().contains("PlayerInventory"))
	    		{
	    			String[] lines = FileBasicJava.readFromFile(files[i]).split("\r\n");
	    			
	    			for(int j = 0;j < lines.length;++j)
	    		    {
	    				System.out.println("[Read] player inventory data: " + lines[j]);
	    		    }
	    		}
		    }
    	}
		worldData = dataOneString.split("\r\n");
	    FileBasicJava.writeBasic(worldData, FileBasicJava.sources + "saves/" + folderName + "/" + "PlayerInventory.txt");
        System.out.println("Write player inventory data...");
    }
	
	@Override
	public void readDataOfPlayer(String location)
    {
		File[] files = FileBasicJava.loadFilesFromFolder(location + "/");
    	if(files != null)
    	{
	    	for(int i = 0;i < files.length;++i)
		    {
	    		if(files[i].getName().contains("PlayerInventory"))
	    		{
	    			String[] lines = FileBasicJava.readFromFile(files[i]).split("\r\n");
	    			
	    			for(int j = 0;j < lines.length;++j)
	    		    {
	    				System.out.println("[Read] player inventory data: " + lines[j]);
	    				if(lines[j].contains("rocks"))
	    				{
	    					String[] splitLine = lines[j].split(":");
	    					this.hasRocksInInventory= Integer.parseInt(splitLine[1].replace(":", ""));
	    				}
	    				if(lines[j].contains("twig"))
	    				{
	    					String[] splitLine = lines[j].split(":");
	    					this.hasTwigsInInventory = Integer.parseInt(splitLine[1].replace(":", ""));
	    				}
	    				if(lines[j].contains("moss rock:"))
	    				{
	    					String[] splitLine = lines[j].split(":");
	    					this.hasMossRocksInInventory = Integer.parseInt(splitLine[1].replace(":", ""));
	    				}
	    				if(lines[j].contains("moss"))
	    				{
	    					String[] splitLine = lines[j].split(":");
	    					this.hasMossInInventory = Integer.parseInt(splitLine[1].replace(":", ""));
	    				}
	    				if(lines[j].contains("obsidian rock"))
	    				{
	    					String[] splitLine = lines[j].split(":");
	    					this.hasObsidianRockInInventory = Integer.parseInt(splitLine[1].replace(":", ""));
	    				}
	    				if(lines[j].contains("obsidian shard"))
	    				{
	    					String[] splitLine = lines[j].split(":");
	    					this.hasObsidianShardsInInventory = Integer.parseInt(splitLine[1].replace(":", ""));
	    				}
	    		    }
	    		}
		    }
    	}
    }
	
	@Override
	public void onUpdate()
	{
		if(!IngameGui.openConsole)
		{
			if(!MiystEngine.miystengine.thePlayer.isPlacingBuildable && Keyboard.isKeyDown(Keyboard.KEY_1) && this.placeBuild == 0)
			{
				//EntityRenderer.nmr.spawnEntity(new EntityCampfire(new int[]{10,7,0},0F,"campfire/Wood","buildable/Campfire_Big/Campfire_big",new float[]{1,1,0,0},new float[]{this.posXPlayer + 2,this.posYPlayer,this.posZPlayer},0.2F,0,0,0, 1F));     	
				this.placeBuild = 100;
				MiystEngine.miystengine.thePlayer.isPlacingBuildable = true;
			}
			
			if(!MiystEngine.miystengine.thePlayer.isPlacingBuildable && Keyboard.isKeyDown(Keyboard.KEY_2) && this.placeBuild == 0)
			{
				//EntityRenderer.nmr.spawnEntity(new EntityCampfire(new int[]{10,0,10},5F,"campfire/Bonfire","buildable/Bonfire/Bonfire",new float[]{1,1,0,0},new float[]{this.posXPlayer + 2,this.posYPlayer,this.posZPlayer},0.2F,0,0,0, 0.5F));     	
		        this.placeBuild = 100;
		        MiystEngine.miystengine.thePlayer.isPlacingBuildable = true;
			}
			
			if(!MiystEngine.miystengine.thePlayer.isPlacingBuildable && Keyboard.isKeyDown(Keyboard.KEY_3) && this.placeBuild == 0)
			{
				//EntityRenderer.nmr.spawnEntity(new EntityCampfire(new int[]{0,6,0},5F,"sleeping/Hunter_Sleeping_Hut","buildable/Sleeping/Sleeping_Place",new float[]{1,1,0,0},new float[]{this.posXPlayer + 2,this.posYPlayer,this.posZPlayer},0.2F,0,0,0, 1F));     	
		        this.placeBuild = 100;
		        MiystEngine.miystengine.thePlayer.isPlacingBuildable = true;
			}
		}
		if(this.placeBuild > 0)
		{
			--this.placeBuild;
		}
	}
	
	  //Obsidian Rock
	  public int addObsidianRockToInventory()
	  {
	  	++this.hasObsidianRockInInventory;
	  	return this.hasObsidianRockInInventory;
	  }
	  
	  public int getObsidianRockInInventory()
	  {
	  	return this.hasObsidianRockInInventory;
	  }
	  
	  public boolean removeObsidianRockFromInventory()
	  {
	  	if(this.hasObsidianRockInInventory > 0)
	  	{
	  		--this.hasObsidianRockInInventory;
	  		return true;
	  	}
	  	else return false;
	  }
	  
	  //Moss Rock
	  public int addMossRockToInventory()
	  {
	  	++this.hasMossRocksInInventory;
	  	return this.hasMossRocksInInventory;
	  }
	  
	  public int getMossRockInInventory()
	  {
	  	return this.hasMossRocksInInventory;
	  }
	  
	  public boolean removeMossRockFromInventory()
	  {
	  	if(this.hasMossRocksInInventory > 0)
	  	{
	  		--this.hasMossRocksInInventory;
	  		return true;
	  	}
	  	else return false;
	  }
	  
	  //Logs
	  public int addLogsToInventory()
	  {
	  	++this.hasLogsInInventory;
	  	return this.hasLogsInInventory;
	  }
	  
	  public int getLogsInInventory()
	  {
	  	return this.hasLogsInInventory;
	  }
	  
	  public boolean removeLogsFromInventory()
	  {
	  	if(this.hasLogsInInventory > 0)
	  	{
	  		--this.hasLogsInInventory;
	  		return true;
	  	}
	  	else return false;
	  }
	  
	  //Twigs
	  public int addTwigToInventory()
	  {
	  	++this.hasTwigsInInventory;
	  	return this.hasTwigsInInventory;
	  }
	  
	  public int getTwigInInventory()
	  {
	  	return this.hasTwigsInInventory;
	  }
	  
	  public boolean removeTwigFromInventory()
	  {
	  	if(this.hasTwigsInInventory > 0)
	  	{
	  		--this.hasTwigsInInventory;
	  		return true;
	  	}
	  	else return false;
	  }
	  
	  //Stones
	  public int addStoneToInventory()
	  {
	  	++this.hasRocksInInventory;
	  	return this.hasRocksInInventory;
	  }
	  
	  public int getStonesInInventory()
	  {
	  	return this.hasRocksInInventory;
	  }
	  
	  public boolean removeStoneFromInventory()
	  {
	  	if(this.hasRocksInInventory > 0)
	  	{
	  		--this.hasRocksInInventory;
	  		return true;
	  	}
	  	else return false;
	  }

}