package nl.miystengine.client.renderer;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.MouseControl;
import nl.miystengine.client.PassingSeconds;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.gui.IngameGui;
import nl.miystengine.client.gui.IngameMenuAndOptionsGui;
import nl.miystengine.client.gui.LoadingScreenGui;
import nl.miystengine.client.gui.OptionMenu;
import nl.miystengine.client.renderer.entity.BasicEntityRender;
import nl.miystengine.client.renderer.entity.BasicGrassesEntityRender;
import nl.miystengine.client.renderer.entity.EntityBadlandRipple;
import nl.miystengine.client.renderer.entity.EntityMoveableRockObjectRenderer;
import nl.miystengine.client.renderer.entity.EntityParticle;
import nl.miystengine.client.renderer.entity.EntityPickupRender;
import nl.miystengine.client.renderer.entity.EntityRendererBodyParts;
import nl.miystengine.client.renderer.entity.EntityRockRenderer;
import nl.miystengine.client.renderer.entity.EntitySmokeParticle;
import nl.miystengine.client.renderer.entity.HumanSkeleton;
import nl.miystengine.client.renderer.entity.ModelBasic;
import nl.miystengine.client.renderer.entity.arrays.ArrayListEntity;
import nl.miystengine.client.renderer.entity.arrays.ArrayListGrasses;
import nl.miystengine.client.renderer.entity.arrays.ArrayListPlants;
import nl.miystengine.client.renderer.entity.builds.EntityCampfire;

import nl.miystengine.client.renderer.entity.plants.EntityRenderPlantBase;
import nl.miystengine.client.renderer.entity.plants.EntityRenderSmallPlant;
import nl.miystengine.client.renderer.entity.plants.EntityRenderSmallTree;
import nl.miystengine.client.renderer.texture.TextureManager;
import nl.miystengine.client.shaders.Light;
import nl.miystengine.client.shaders.Camera;
import nl.miystengine.client.shaders.Loader;
import nl.miystengine.client.shaders.RawModel;
import nl.miystengine.client.shaders.StaticShader;
import nl.miystengine.client.shaders.normal.NormalMappingShader;
import nl.miystengine.client.shaders.water.WaterShader;
import nl.miystengine.client.water.WaterRender;
import nl.miystengine.client.water.WaterTile;
import org.lwjgl.opengl.EXTTextureFilterAnisotropic;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

public class ObjectRenderer
{
	//BasicPlantEntityRender
	public static List<ArrayListGrasses> ObjectsGrassesRenderList = new ArrayList<ArrayListGrasses>();
	public static List<ArrayListEntity> ObjectsOwnTexture = new ArrayList<ArrayListEntity>();
	public static List<ArrayListEntity> BodyParts = new ArrayList<ArrayListEntity>();
	public static List<ArrayListEntity> waterObjectList = new ArrayList<ArrayListEntity>();
	public static List<ArrayListEntity> particles = new ArrayList<ArrayListEntity>();
	public static List<ArrayListEntity> skeletalEntitys = new ArrayList<ArrayListEntity>();
	public static List<ArrayListEntity> transparantEntitys = new ArrayList<ArrayListEntity>();
	public static List<ArrayListEntity> grassEntitys = new ArrayList<ArrayListEntity>();

	public int nonormalMap = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/No NormalMap.png");
	private float wind_speed = 0.0015F;
	private float moveWindFactor = 0;
	public static int rockTextures; 
	
	protected boolean useAlphaFromTexture = false;
	public RawModel quad;

	public ObjectRenderer(Matrix4f projectionMatrix) 
	{			
		EntityRenderer.shaderN = new NormalMappingShader();
		EntityRenderer.shaderN.start();
		EntityRenderer.shaderN.loadProjectionMatrix(projectionMatrix);
		EntityRenderer.shaderN.connectTextureUnits();
		EntityRenderer.shaderN.stop();
		
		EntityRenderer.shaderW = new WaterShader();
		EntityRenderer.shaderW.start();
		EntityRenderer.shaderW.loadProjectionMatrix(projectionMatrix);
		EntityRenderer.shaderW.connectTextureUnits();
		EntityRenderer.shaderW.stop();
		
	 	EntityRenderer.ShaderGrass.start();
		EntityRenderer.ShaderGrass.loadProjectionMatrix(projectionMatrix);
		EntityRenderer.ShaderGrass.connectTextureUnits();
		EntityRenderer.ShaderGrass.stop();
		setUpVAO(new Loader());
	}
	
	 public void spawnGrassEntity(BasicGrassesEntityRender entity)
	 {
		 ObjectsGrassesRenderList.add(new ArrayListGrasses(entity));
	 }
	
	 public void spawnEntity(EntityRendererBodyParts entity)
	 {
		if(Camera.armLeftID == -1)
		{
			Camera.armLeftID = BodyParts.size();
		}
		else if(Camera.armRightID == -1)
		{
			Camera.armRightID = BodyParts.size();
		}
		BodyParts.add(new ArrayListEntity(entity));
	 }
	 
	 public void spawnEntity(WaterRender entity)
	 {
		 waterObjectList.add(new ArrayListEntity(entity));
	 }
	 
	 public void spawnEntity(EntityParticle entity)
	 {
		 particles.add(new ArrayListEntity(entity));
	 }
	 
	 public void spawnEntity(EntityPickupRender entity)
	 {
		 ObjectsOwnTexture.add(new ArrayListEntity(entity));
	 }
	 
	 public void spawnEntity(BasicEntityRender entity)
	 {
		 if(entity instanceof EntityCampfire || entity instanceof EntitySmokeParticle || entity instanceof EntityBadlandRipple)
		 {
			 transparantEntitys.add(new ArrayListEntity(entity));
		 }
		 else
		 {
			 ObjectsOwnTexture.add(new ArrayListEntity(entity));
		 }
	 }
	 
	 private int fakeReflection = -1;
	 
	 public void updateWindEffect()
	 {
		if(MiystEngine.miystengine.thePlayer.worldObj.StructureWorldInfo.windUpdated)
		{
			wind_speed = MiystEngine.miystengine.thePlayer.worldObj.StructureWorldInfo.WindStrengh;
		}
		moveWindFactor += (wind_speed / 2F);
		moveWindFactor %= 1;
	 }
	 
	 public void renderWater(boolean renderWater, List<Light> lights,Matrix4f matrix,boolean renderArms) 
	 {
		 	if(fakeReflection == -1)
		 	{
		 		this.fakeReflection = MiystEngine.miystengine.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/skybox.png"); 
		 	}
			
		 	EntityRenderer.shaderW.start();
			//shader.loadClipPlane(clipPlane);
		 	EntityRenderer.shaderW.loadSkyColor(MiystEngine.miystengine.entityRenderer.skyColor,MiystEngine.miystengine.entityRenderer.fogDensity,MiystEngine.miystengine.entityRenderer.fogGradient);
		 	EntityRenderer.shaderW.loadViewMatrix(matrix);
			EntityRenderer.shaderW.loadLights(lights, matrix);
			EntityRenderer.shaderW.timeAndTemperature(0,MiystEngine.miystengine.entityRenderer.theWorld.StructureWorldInfo.temperature,0);
			EntityRenderer.shaderW.loadWaveAnimation(moveWindFactor);
			EntityRenderer.shaderW.switchT(2);
			{	
				 EntityRenderer.shaderW.switchT(2);
				 if(!renderWater)
				 {
					 EntityRenderer.shaderW.waterQuality(2);
					 for(int id = 0;id<waterObjectList.size();++id)		 
			         {
						BasicEntityRender entity = waterObjectList.get(id).entity;
						entity.updateRenderFPS();
						ModelBasic model = waterObjectList.get(id).entity.getModel();
						EntityRenderer.shaderW.location_WaterHeightByTime(MiystEngine.miystengine.entityRenderer.dayTime);
						EntityRenderer.shaderW.loadNearFar(new Vector3f(MiystEngine.miystengine.entityRenderer.camera.zNear,MiystEngine.miystengine.entityRenderer.camera.zFar,MiystEngine.miystengine.thePlayer.rotationPitch));
						EntityRenderer.shaderW.loadMaterial(entity.materialType);
						EntityRenderer.shaderW.loadProgression(entity.loadProgression);
						EntityRenderer.shaderW.loadMinmaxlight(model.minmaxlight);
						EntityRenderer.shaderW.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
						EntityRenderer.shaderW.loadShineVariables(model.shineDamper, model.reflectivity);
						EntityRenderer.shaderW.addColor(new Vector3f(entity.addColor[0],entity.addColor[1],entity.addColor[2]));
						EntityRenderer.shaderW.location_Alpha(waterObjectList.get(id).entity.alpha);
				 	}
				 }
				 else
				 {
					 GL11.glEnable(GL11.GL_BLEND);
					 GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
			
					 for(int id = 0;id<waterObjectList.size();++id)		 
			         {
						if(MiystEngine.miystengine.settings.waterRefraction)
						{	
							GL13.glActiveTexture(GL13.GL_TEXTURE11);
							GL11.glBindTexture(GL11.GL_TEXTURE_2D,MiystEngine.miystengine.entityRenderer.buffer.getRefractionTexture());	
							GL13.glActiveTexture(GL13.GL_TEXTURE10);
							GL11.glBindTexture(GL11.GL_TEXTURE_2D,MiystEngine.miystengine.entityRenderer.buffer.refractionDepthTexture);
							EntityRenderer.shaderW.waterQuality(0);
						}
						else
						{
							EntityRenderer.shaderW.waterQuality(1);
						}
						
						BasicEntityRender entity = waterObjectList.get(id).entity;
						entity.updateRenderFPS();
						ModelBasic model = waterObjectList.get(id).entity.getModel();
						EntityRenderer.shaderW.location_WaterHeightByTime(MiystEngine.miystengine.entityRenderer.dayTime);
						EntityRenderer.shaderW.loadNearFar(new Vector3f(MiystEngine.miystengine.entityRenderer.camera.zNear,MiystEngine.miystengine.entityRenderer.camera.zFar,MiystEngine.miystengine.thePlayer.rotationPitch));
						
						if(MiystEngine.miystengine.thePlayer.posY < WaterRender.waterHeight)
						{
							GL11.glDisable(GL11.GL_CULL_FACE);
						}
						else
						{
							GL11.glEnable(GL11.GL_CULL_FACE);
						}
						
						EntityRenderer.shaderW.loadMaterial(entity.materialType);
						EntityRenderer.shaderN.loadProgression(entity.loadProgression);
						EntityRenderer.shaderW.loadMinmaxlight(model.minmaxlight);
						EntityRenderer.shaderW.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
						EntityRenderer.shaderW.loadShineVariables(model.shineDamper, model.reflectivity);
						EntityRenderer.shaderW.addColor(new Vector3f(entity.addColor[0],entity.addColor[1],entity.addColor[2]));
						EntityRenderer.shaderW.location_Alpha(waterObjectList.get(id).entity.alpha);
						
						if(!((WaterRender)entity).renderModel(EntityRenderer.shaderW))
						{
							EntityRenderer.shaderN.loadTransformationMatrix(MiystEngine.miystengine.entityRenderer.camera.createTransformationMatrix(entity.getPosition(),entity.modelY, entity.getRotX(),entity.getRotY(), entity.getRotZ(), entity.getScale()));
							GL11.glCallList(model.glListID);
						}
			         }
					}
				}
			//Stop Rendering Rock Items
			GL11.glDisable(GL11.GL_CULL_FACE);	
			GL11.glDisable(GL11.GL_BLEND);
			EntityRenderer.shaderN.stop();

	 }
	 
	 public void render(boolean forceLowTexture,boolean renderWater, List<Light> lights,Matrix4f matrix,boolean renderArms) 
	 {
		 	GL11.glDisable(GL11.GL_CULL_FACE);
		 	sortHighToLow(transparantEntitys);
		 	
		 	EntityRenderer.shaderN.start();	
			EntityRenderer.shaderN.loadWindStrengh(moveWindFactor);
			EntityRenderer.shaderN.loadyawnpitch(new Vector2f(Camera.yawn / 100F,Camera.pitch / 100F));
			
			//shader.loadClipPlane(clipPlane);
		 	EntityRenderer.shaderN.loadSkyColor(MiystEngine.miystengine.entityRenderer.skyColor,MiystEngine.miystengine.entityRenderer.fogDensity,MiystEngine.miystengine.entityRenderer.fogGradient);
		 	EntityRenderer.shaderN.loadViewMatrix(matrix);
			EntityRenderer.shaderN.loadLights(lights, matrix);
			EntityRenderer.shaderN.timeAndTemperature(0,MiystEngine.miystengine.entityRenderer.theWorld.StructureWorldInfo.temperature,0);
			GL13.glActiveTexture(GL13.GL_TEXTURE23);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.fakeReflection);	
			GL13.glActiveTexture(GL13.GL_TEXTURE22);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,MiystEngine.miystengine.entityRenderer.buffer.getRefractionTexture());	
	
			
			int time = (60 * IngameGui.Hours) + IngameGui.minutes;
			float timeTo288 = (time * 0.002F);


			if(IngameGui.Hours < 12)
         	{
         		EntityRenderer.shaderN.loadTimerNumber(new Vector3f((time * 0.002F),timeTo288,0));
         	}
         	else
         	{
         		EntityRenderer.shaderN.loadTimerNumber(new Vector3f(((1440 - time) * 0.002F),timeTo288,0));
         	}
		
			EntityRenderer.shaderN.switchT(2);
			//if(!renderWater)
			{
				//Render Random Objects
				for(int id = 0;id<BodyParts.size();++id)
		        {
					BasicEntityRender entity = BodyParts.get(id).entity;
					entity.updateRenderFPS();
					ModelBasic model = BodyParts.get(id).entity.getModel();
					GL13.glActiveTexture(GL13.GL_TEXTURE13);
					GL11.glBindTexture(GL11.GL_TEXTURE_2D,BodyParts.get(id).entity.getModel().textureIDModel512x); 
					GL13.glActiveTexture(GL13.GL_TEXTURE12);
					GL11.glBindTexture(GL11.GL_TEXTURE_2D,BodyParts.get(id).entity.getModel().textureNormalMapping512x);
					EntityRenderer.shaderN.loadMaterial(entity.materialType);
					EntityRenderer.shaderN.loadMinmaxlight(model.minmaxlight);
					EntityRenderer.shaderN.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
					EntityRenderer.shaderN.loadShineVariables(model.shineDamper, model.reflectivity);
					EntityRenderer.shaderN.addColor(new Vector3f(entity.addColor[0] + 0.1F,entity.addColor[1] + 0.1F,entity.addColor[2] + 0.1F));
					//((EntityRendererBodyParts)entity).renderModel(EntityRenderer.shaderN);
		        }	 
			}
		
			//GL11.glEnable(GL11.GL_CULL_FACE);
			EntityRenderer.shaderN.loadFakeLightning(false);
			//Render Rock Items
			EntityRenderer.shaderN.switchT(2);
			
			for(int id = 0;id<ObjectsOwnTexture.size();++id)
	        {
				BasicEntityRender entity = ObjectsOwnTexture.get(id).entity;
				if(!entity.deleteMe)
				{
					if((entity != null && !renderArms) || (renderArms && entity != null))
					{
						if(entity.renderState())
						{
							entity.updateRenderFPS();
						}
						
						if(entity.renderState())
						{
							ModelBasic model = ObjectsOwnTexture.get(id).entity.getModel();
							if(!model.skipMainTextureCall)
							{
								GL13.glActiveTexture(GL13.GL_TEXTURE13);
								GL11.glBindTexture(GL11.GL_TEXTURE_2D,ObjectsOwnTexture.get(id).entity.getModel().textureIDModel512x); 
								GL13.glActiveTexture(GL13.GL_TEXTURE12);
								GL11.glBindTexture(GL11.GL_TEXTURE_2D,ObjectsOwnTexture.get(id).entity.getModel().textureNormalMapping512x);
							}
							
							EntityRenderer.shaderN.loadMaterial(entity.materialType);
							EntityRenderer.shaderN.loadProgression(entity.loadProgression);
							EntityRenderer.shaderN.loadMinmaxlight(model.minmaxlight);
							EntityRenderer.shaderN.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
							EntityRenderer.shaderN.loadShineVariables(model.shineDamper, model.reflectivity);
							EntityRenderer.shaderN.addColor(new Vector3f(entity.addColor[0],entity.addColor[1],entity.addColor[2]));
							EntityRenderer.shaderN.location_Alpha(ObjectsOwnTexture.get(id).entity.alpha);
							
							if(forceLowTexture && MiystEngine.miystengine.settings.underWaterHighTextures)
							{
								entity.forceLowTexture = true;
							}
							else if(entity.forceLowTexture)
							{
								entity.forceLowTexture = false;
							}
							
							if(forceLowTexture && MiystEngine.miystengine.settings.underWaterHighModels)
							{
								entity.forceLowPolyModel = true;
							}
							else if(entity.forceLowPolyModel)
							{
								entity.forceLowPolyModel = false;
							}
							
							if(!entity.renderModel(EntityRenderer.shaderN))
							{
								EntityRenderer.shaderN.loadTransformationMatrix(MiystEngine.miystengine.entityRenderer.camera.createTransformationMatrix(entity.getPosition(),entity.modelY, entity.getRotX(),entity.getRotY(), entity.getRotZ(), entity.getScale()));
								GL11.glCallList(model.glListID);
							}
						}
					}
					if(entity.deleteMe)
					{
						ObjectsOwnTexture.remove(id);
					}
		        }
	        }
			
			for(int id = 0;id<particles.size();++id)
	        {
				GL11.glEnable(GL11.GL_BLEND);
				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
				BasicEntityRender entity = particles.get(id).entity;
				entity.updateRenderFPS();
				ModelBasic model = particles.get(id).entity.getModel();
				GL13.glActiveTexture(GL13.GL_TEXTURE13);
				GL11.glBindTexture(GL11.GL_TEXTURE_2D,particles.get(id).entity.getModel().textureIDModel512x); 
				GL13.glActiveTexture(GL13.GL_TEXTURE12);
				GL11.glBindTexture(GL11.GL_TEXTURE_2D,particles.get(id).entity.getModel().textureNormalMapping512x);
				
		    	GL11.glDisable(GL11.GL_CULL_FACE);	
		    	EntityRenderer.shaderN.loadMaterial(entity.materialType);
				EntityRenderer.shaderN.loadProgression(entity.loadProgression);
				EntityRenderer.shaderN.loadMinmaxlight(model.minmaxlight);
				EntityRenderer.shaderN.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
				EntityRenderer.shaderN.loadShineVariables(model.shineDamper, model.reflectivity);
				EntityRenderer.shaderN.addColor(new Vector3f(entity.addColor[0],entity.addColor[1],entity.addColor[2]));
				EntityRenderer.shaderN.location_Alpha(particles.get(id).entity.alpha);
				if(!entity.renderModel(EntityRenderer.shaderN))
				{
					EntityRenderer.shaderN.loadTransformationMatrix(MiystEngine.miystengine.entityRenderer.camera.createTransformationMatrix(entity.getPosition(),entity.modelY, entity.getRotX(),entity.getRotY(), entity.getRotZ(), entity.getScale()));
					GL11.glCallList(model.glListID);
				}
				GL11.glDisable(GL11.GL_BLEND);
				if(entity.deleteMe)
				{
					particles.remove(id);
				}
	        }
			EntityRenderer.shaderN.switchT(2);
			for(int id = 0;id<transparantEntitys.size();++id)
	        {
				BasicEntityRender entity = transparantEntitys.get(id).entity;
				entity.updateRenderFPS();
				ModelBasic model = transparantEntitys.get(id).entity.getModel();
				GL13.glActiveTexture(GL13.GL_TEXTURE13);
				GL11.glBindTexture(GL11.GL_TEXTURE_2D,transparantEntitys.get(id).entity.getModel().textureIDModel512x); 
				GL13.glActiveTexture(GL13.GL_TEXTURE12);
				GL11.glBindTexture(GL11.GL_TEXTURE_2D,transparantEntitys.get(id).entity.getModel().textureNormalMapping512x);

				EntityRenderer.shaderN.loadMaterial(entity.materialType);
				EntityRenderer.shaderN.loadProgression(entity.loadProgression);
				EntityRenderer.shaderN.loadMinmaxlight(model.minmaxlight);
				EntityRenderer.shaderN.loadOffset(entity.textureCoords[0],entity.textureCoords[1],entity.textureCoords[2],entity.textureCoords[3]);
				EntityRenderer.shaderN.loadShineVariables(model.shineDamper, model.reflectivity);
				EntityRenderer.shaderN.addColor(new Vector3f(entity.addColor[0],entity.addColor[1],entity.addColor[2]));
				EntityRenderer.shaderN.location_Alpha(transparantEntitys.get(id).entity.alpha);
		
				if(!entity.renderModel(EntityRenderer.shaderN))
				{
					EntityRenderer.shaderN.loadTransformationMatrix(MiystEngine.miystengine.entityRenderer.camera.createTransformationMatrix(entity.getPosition(),entity.modelY, entity.getRotX(),entity.getRotY(), entity.getRotZ(), entity.getScale()));
					GL11.glCallList(model.glListID);
				}

				if(entity.deleteMe)
				{
					transparantEntitys.remove(id);
				}
	        }
			//Stop Rendering Rock Items
			GL11.glDisable(GL11.GL_CULL_FACE);	
			GL11.glDisable(GL11.GL_BLEND);
			EntityRenderer.shaderN.stop();
			BasicEntityRender.collideWithPlayer = false;
		}
	 
	 public static void sortHighToLow(List<ArrayListEntity> list) 
	 {
	        for (int i = 1; i < list.size(); i++) 
	        {
	        	ArrayListEntity item = list.get(i);
	            if (item.entity.getDistance() > list.get(i).entity.getDistance()) 
	            {
	                sortUpHighToLow(list, i);
	            }
	        }
	    }
	 
	    private static void sortUpHighToLow(List<ArrayListEntity> list, int i) 
	    {
	    	ArrayListEntity item = list.get(i);
	        int attemptPos = i;
	        while (attemptPos != 0 && list.get(attemptPos - 1).entity.getDistance() < item.entity.getDistance()) 
	        {
	            attemptPos--;
	        }
	        list.remove(i);
	        list.add(attemptPos, item);
	    }
	    
	 
	 public static int createModelList = 0;
	 
	 private void setUpVAO(Loader loader){float[]vertices={-2F,-2F,-2F,2F,2F,-2F,2F,-2F,-2F,2F,2F,2F};quad=loader.loadToVAO(vertices,2);}

	 public void cleanUp(){EntityRenderer.shaderN.cleanUp();}
}
