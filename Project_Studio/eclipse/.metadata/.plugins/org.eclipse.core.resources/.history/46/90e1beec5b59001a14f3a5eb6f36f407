package nl.miystengine.client.gui;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;

import nl.miystengine.client.ExceptionA;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.audio.AudioMaster;
import nl.miystengine.client.multiplayer.NetHandlerPlayClient;
import nl.miystengine.client.multiplayer.PlayerControllerMP;
import nl.miystengine.client.multiplayer.WorldClient;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.Tessellator;
import nl.miystengine.client.renderer.WorldRenderer;
import nl.miystengine.client.renderer.terrain.RenderTerrain;
import nl.miystengine.client.renderer.terrain.Terrain;

import nl.miystengine.server.management.IntegratedServer;
import nl.miystengine.server.management.MiystEngineServer;
import nl.miystengine.util.MathHelper;


import nl.miystengine.world.StructureWorldInfo;
import nl.miystengine.world.SettingsOfStructureWorld;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;

public class SelectWorldGui extends ScreenGui
{
    protected ScreenGui thisScreen;
    private int selectedID;
    private java.util.List list;
    private String[] gameType = new String[2];
    private int worldSelected = 0;

    public SelectWorldGui(ScreenGui thisScreen)
    {
        MiystEngine.miystengine.currentScreen2 = this;
        this.backGroundTexture = "/menu/wooden hut background.png";
    }

    /**
     * Adds the buttons (and other controls) to the screen in question.
     */
    public void initGui()
    {
        this.gameType[SettingsOfStructureWorld.GameType.SURVIVAL.getID()] = "Survival";
        this.gameType[SettingsOfStructureWorld.GameType.FORGE.getID()] = "Forge";
        this.addButtons();
    }

    private ButtonBasic deleteButton;
    
    private void addButtons()
    {
        deleteButton = new ButtonBasic(2, (int)(this.width / 1.7), (int)(this.height / 1.15), 72, 20, "Delete",2);
        if(SelectWorldGui.this.getFileName == "")
        {
        	this.deleteButton.enabled = false;
        }
        else
        {
        	this.deleteButton.enabled = true;
        }
        this.buttonList.add(deleteButton);
        this.buttonList.add(new ButtonBasic(0, (int)(this.width / 1.7), (int)(this.height / 1.08), 72, 20, "Cancel",2)); 

        this.buttonList.add(new ButtonBasic(3, (int)(this.width / 3), (int)(this.height / 1.15), 72, 20, "Create",2));  
        this.buttonList.add(new ButtonBasic(-1, (int)(this.width / 3), (int)(this.height / 1.08), 72, 20, "Enter World",2));  
        
        
        //New world loading system
    	File[] files = FileBasicJava.loadFilesFromFolder(FileBasicJava.sources + "saves/");
        
        for(int i =0;i < files.length;++i)
        {
        	this.buttonList.add(new ButtonBasic((files[i].getName().length() / 4),0,true,true,4 + i, (int)(this.width / 2.2F) - (files[i].getName().length() * 2), (int)(this.height / 6) * (i + 1), 6 * files[i].getName().length(), 20, files[i].getName(),1));
        }
    }
    
    /**
     * Draws the screen and all the components in it.
     */
    public void drawScreen(int x, int y)
    {
    	super.drawScreen(x, y);
    	
    	 File[] files = FileBasicJava.loadFilesFromFolder(FileBasicJava.sources + "saves/");
         for(int i =0;i < files.length;++i)
         {
         	//this.drawString(SelectWorldGui.this.fontRendererObj, files[i].getName(),(int)(this.width / 5 * (i + 1)) - (files[i].getName().length() / 2) , (int)(this.height / 2.5), 8421504);
         }
         
         //this.listSelected.renderSlots(x, y);
         if(SelectWorldGui.this.getFileName == "")
         {
         	this.deleteButton.enabled = false;
         }
         else
         {
         	this.deleteButton.enabled = true;
         }
    }
    
    public static int clicked = 0;
 
    protected void actionPerformed(ButtonBasic button)
    {
        if(button.enabled)
        {
        	File[] files = FileBasicJava.loadFilesFromFolder(FileBasicJava.sources + "saves/");
            for(int i = 0;i < files.length;++i)
            {
	        	if(button.id == -1)
	            {
	        		try
	        		{
		        		String worldname = this.getFileName;
		            	MiystEngine.miystengine.displayScreenGui(new LoadingScreenGui(worldname));
		                MiystEngine.miystengine.setScreenLock();
		               
		                if (worldname == null)
		                {
		                	worldname = "Structure World";
		                }
		                
		                try
		                {
			                StructureWorldInfo info = new StructureWorldInfo(FileBasicJava.sources + "saves/" + worldname);
			                info.setFolderName(worldname); 
			           
			                IntegratedServer.worldInfo = info;
			                System.out.println("[Client] Set world info....");

			                MiystEngine.miystengine.theIntegratedServer = new IntegratedServer(MiystEngine.miystengine,worldname, worldname.trim());
			                (new Thread("Server thread"){public void run(){MiystEngineServer.getServer().run();}}).start();
			                MiystEngine.miystengine.launchIntegratedServer(worldname, worldname, info);
		                	
		                    NetHandlerPlayClient handler = new NetHandlerPlayClient (MiystEngine.miystengine,MiystEngine.miystengine.currentScreen2,MiystEngine.miystengine.myNetworkManager); 
			             
			                MiystEngine.miystengine.theWorld = new WorldClient(handler, info, info.getDifficulty());
	
			                MiystEngine.miystengine.playerController = new PlayerControllerMP(MiystEngine.miystengine, handler);
			                MiystEngine.miystengine.loadStructureWorld(MiystEngine.miystengine.theWorld );
			                MiystEngine.miystengine.thePlayer.setEntityId(0);
			                MiystEngine.miystengine.playerController.setGameType(info.getGameType());
			                MiystEngine.miystengine.theWorld.StructureWorldInfo = info;
				        	MiystEngine.miystengine.theWorld.StructureWorldInfo.loadorwrite = 0;	
							MiystEngine.miystengine.theWorld.StructureWorldInfo.readDataOfStructureWorld();
						
		                }
		                catch(Exception e)
		                {
		                	e.printStackTrace();
		                }
	        		}
	        		catch(Exception e)
	        		{
	        			System.out.println("[Client/Server] Could not load world: ");
	        			e.printStackTrace();
	        		}
	        	}
	        	else if(button.id == 4 + i)
	        	{
	        		this.worldSelected = button.id;
	        		this.getFileName = files[i].getName();
	        		this.deleteButton.enabled = true;
	        		System.out.println("World selected: " + this.getFileName);
	        	}
            }
        	
        	if(button.id != 7 || button.id != 3 || button.id != 0 || button.id != 2)
            {
         	   clicked = 0;
            }
            if(button.id == 2)
            {
            	File file = new File(FileBasicJava.source+"/The Structure World/saves/"+this.getFileName+"/");
            	try 
            	{
            		FileUtils.deleteDirectory(file);
				} 
            	catch (IOException e)
				{
            		System.out.println("[CLient] File deleted successfully: "+this.getFileName+" in Folder /saves");
				}
            	MiystEngine.miystengine.displayScreenGui(this);
            }
            else if(button.id == 3)
            {
            	MiystEngine.miystengine.displayScreenGui(new CreateStructureWorldGui(this));
            }
            else if(button.id == 0)
            {
            	MiystEngine.miystengine.displayScreenGui(this.thisScreen);
            }
            else if(button.id == 7)
            {
            	try
            	{
            		CreateStructureWorldGui var5 = new CreateStructureWorldGui(this);
            		MiystEngine.miystengine.displayScreenGui(var5);
            	}
            	catch(Exception e)
            	{
            		e.printStackTrace();
            	}
            }
        }
    }

    public static String getFileName = "";

}
