package nl.thestructureworld.client.renderer.terrain;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.KeyAndOtherSettings;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.gui.IngameMenuAndOptionsGui;
import nl.thestructureworld.client.renderer.Tessellator;
import nl.thestructureworld.client.shaders.RawModel;
import nl.thestructureworld.terrainandobjects.TerrainObject;
import nl.thestructureworld.terrainandobjects.TerrainDirt;
import nl.thestructureworld.terrainandobjects.ObjectTree;
import nl.thestructureworld.world.World;
import nl.thestructureworld.world.WorldServer;

public class RenderTerrain
{
	
	public RawModel renderRock()
	{
		TessellatorModel model = new TessellatorModel();
		model.addVerticesNumber((36)*2);
		for(float XX=0;XX<5;++XX)
		{
		for(float ZZ=0;ZZ<5;++ZZ)
		{
		float r = 0.5F;
		float Point1  = ((r/(5-XX))+(r/(XX+1))+(r/(5-ZZ))+(r/(ZZ+1)));
		float Point2  = ((r/(5-XX))+(r/(XX+1))+(r/(5-ZZ+1))+(r/(ZZ)));
		float Point3  = ((r/(5-XX+1))+(r/(XX))+(r/(5-ZZ+1))+(r/(ZZ)));
	    float Point4  = ((r/(5-XX+1))+(r/(XX))+(r/(5-ZZ))+(r/(ZZ+1)));
	  
	    model.addVertexTerrain(0.25F*XX,     Point1	,0.25F*ZZ,      (XX+1)*0.16F,   (ZZ+1)*0.16F);
	    model.addVertexTerrain(0.25F*XX,     Point2	,0.25F*(ZZ-1),  (XX+1)*0.16F,   (ZZ)*0.16F);
	    model.addVertexTerrain(0.25F*(XX-1), Point3	,0.25F*(ZZ-1),  XX*0.16F, 	  (ZZ)*0.16F);
	    model.addVertexTerrain(0.25F*(XX-1), Point4	,0.25F*ZZ,      XX*0.16F, 	  (ZZ+1)*0.16F);
	       
	    model.addVertexTerrain(0.25F*XX,     2.4-Point1	,0.25F*ZZ,      (XX+1)*0.16F,   (ZZ+1)*0.16F);
	    model.addVertexTerrain(0.25F*XX,     2.4-Point2	,0.25F*(ZZ-1),  (XX+1)*0.16F,   (ZZ)*0.16F);
	    model.addVertexTerrain(0.25F*(XX-1), 2.4-Point3	,0.25F*(ZZ-1),  XX*0.16F, 	  (ZZ)*0.16F);
	    model.addVertexTerrain(0.25F*(XX-1), 2.4-Point4	,0.25F*ZZ,      XX*0.16F, 	  (ZZ+1)*0.16F);
	       
	    
	   
	    
	      
	    
	   
	    }}
	
	return model.drawModel();
	}

	
	   //Leaellynasaura
    
	
	public RawModel renderGrass()
	{
		TessellatorModel model = new TessellatorModel();
		model.addVerticesNumber(1);
    	model.addVertexTerrain(0.2,0.05,0.2		,0.6,  0.2);
    	model.addVertexTerrain(1.0,0.05,0.2		,0.5,  0.2);
    	model.addVertexTerrain(1.0,0.05,1.0		,0.5,  0.3);
    	model.addVertexTerrain(0.2,0.05,1.0		,0.6,  0.3);
		return model.drawModel();
	}
	
	
	
	
	 public RawModel renderSmallTree()
	 {
		 	TessellatorModel model = new TessellatorModel();
		 	model.addVerticesNumber(4*8);
		 	model.setIncreaseY(true,-0.1F);
	    	model.addVertexTerrain(0.5F+0,1F,1F+0,0.5F,1F);
	    	model.addVertexTerrain(0.5F+0,1F,0F+0,0.5F,0F);
	    	model.addVertexTerrain(0.5F, 0,0,0F,0F);
	    	model.addVertexTerrain(0.5F, 0,1F,0F,1F);
	    	model.addVertexTerrain(1+0,1,0.5F+0,0.5F,1F);
	    	model.addVertexTerrain(0+0,1,0.5F+0,0.5F,0F);
	    	model.addVertexTerrain(0, 0,0.5F,0F,0F);
	    	model.addVertexTerrain(1, 0,0.5F,0F,1F);
	    	model.addVertexTerrain(0.8F+0,1,0.8F+0,0.5F,1F);
	    	model.addVertexTerrain(0.2F+0,1,0.2F+0,0.5F,0F);
	    	model.addVertexTerrain(0.2F, 0.5F,0.2F,0.3F,0F);
	    	model.addVertexTerrain(0.8F, 0.5F,0.8F,0.3F,1F);
	    	model.addVertexTerrain(0.2F+0,1,0.8F+0,0.5F,1F);
	    	model.addVertexTerrain(0.8F+0,1,0.2F+0,0.5F,0F);
	    	model.addVertexTerrain(0.8F, 0.5F,0.2F,0.3F,0F);
	    	model.addVertexTerrain(0.2F, 0.5F,0.8F,0.3F,1F);
/////////////////////////////////////////////////////////////////////////////////
	    	model.addVertexTerrain(0,0-0+0.4F	,0,				1F,1F);
	    	model.addVertexTerrain(1+0,0+0.4F	,0,				1F,0F);
	    	model.addVertexTerrain(1+0, 0.9F-0	,0.8F+0,		0.52F,0F);
	    	model.addVertexTerrain(0, 0.9F		,0.8F+0,		0.52F,1F);
	    	
	    	model.addVertexTerrain(0,0.8F-0		,0,				0.52F,1F);
	    	model.addVertexTerrain(1+0,0.8F-0	,0,				0.52F,0F);
	    	model.addVertexTerrain(1+0, 0.5F	,0.8F+0,		1F,0F);
	    	model.addVertexTerrain(0, 0.5F-0	,0.8F+0,		1F,1F);
	    	
	    	
	    	model.addVertexTerrain(0,0.7F-0		,0,				1F,0F);
	    	model.addVertexTerrain(1+0,0.4F		,0,				1F,1F);
	    	model.addVertexTerrain(1+0, 0.4F-0	,0.8F+0,		0.52F,1F);
	    	model.addVertexTerrain(0, 0.7F+0	,0.8F+0,		0.52F,0F);
	    	
	    	model.addVertexTerrain(0,0.4F-0		,0,				0.52F,0F);
	    	model.addVertexTerrain(1+0,0.7F	,0	,				0.52F,1F);
	    	model.addVertexTerrain(1+0, 0.7F-0	,0.8F+0,		1F,1F);
	    	model.addVertexTerrain(0, 0.4F+0	,0.8F+0,		1F,0F);
	    	return model.drawModel();
	 }

	 public RawModel rectangle(float y)
	 {
		 TessellatorModel model = new TessellatorModel();
		 model.addVerticesNumber(1);  
		 model.addVertexTerrain(30,y,0,	1,	0);
		 model.addVertexTerrain(30,y,30, 	1F,1F);
		 model.addVertexTerrain(0, y,30, 	0F,	1F);
		 model.addVertexTerrain(0, y,0,	0,	0);
		 return model.drawModel();
	 }
	 
	 
	 public RawModel moon()
	 {
		 TessellatorModel model = new TessellatorModel();
		 model.addVerticesNumber(2); 
		 model.addVertexTerrain(-100,100,550,	 0.25F, 0.25F);
		 model.addVertexTerrain(100,100,550,	 0.0F,  0.25F);
		 model.addVertexTerrain(100,-100,550,	 0.0F,  0F);
		 model.addVertexTerrain(-100,-100,550,	 0.25F, 0F);
		 return model.drawModel();
	 }
	 
	 public RawModel sun()
	 {
		 TessellatorModel model = new TessellatorModel();
		 model.addVerticesNumber(2); 
		 model.addVertexTerrain(-150,150,550,	 0.25F, 0.25F);
		 model.addVertexTerrain(150,150,550,	 0.0F,  0.25F);
		 model.addVertexTerrain(150,-150,550,	 0.0F,  0F);
		 model.addVertexTerrain(-150,-150,550,	 0.25F, 0F);
		 
		 
		 return model.drawModel();
	 }
	 
	 public RawModel skybox()
	 {
		 TessellatorModel model = new TessellatorModel();
		 model.addVerticesNumber(6); 
		 model.setIncreaseY(true, 150F);
		 model.addVertexTerrain(150, 150,   -150, 0.25F,0.5F);
		 model.addVertexTerrain(150, 150,	150, 0F,	0.5F);
		 model.addVertexTerrain(-150,150,	150, 0F,	0.25F);
		 model.addVertexTerrain(-150,150,  -150, 0.25F,	0.25F);

		 model.addVertexTerrain(-150,150,-150,	 0.25F,0.4F);
		 model.addVertexTerrain(-150,150,150,	 0F,0.4F);
		 model.addVertexTerrain(-150,-150,150,	 	 0F,0.75F);
		 model.addVertexTerrain(-150,-150,-150,	 	 0.25F,0.75F);

		 model.addVertexTerrain(-150,-150,-150,	     0.25F,0.75F);
		 model.addVertexTerrain(150,-150,-150,	 	 0.5F,0.75F);
		 model.addVertexTerrain(150,150,-150,	 0.5F,0.4F);
		 model.addVertexTerrain(-150,150,-150,	 0.25F,0.4F);
		 
		 model.addVertexTerrain(150,-150,-150,	 0.5F,0.75F);
		 model.addVertexTerrain(150,-150,150,	 0.75F,0.75F);
		 model.addVertexTerrain(150,150,150, 0.75F,0.4F);
		 model.addVertexTerrain(150,150,-150, 0.5F,0.4F);

		 model.addVertexTerrain(-150,150,150,    1F,0.4F);
		 model.addVertexTerrain(150,150,150, 0.75F,0.4F);
		 model.addVertexTerrain(150,-150,150,	 0.75F,0.75F);
		 model.addVertexTerrain(-150,-150,150,	 1F,0.75F);
		 
		 
		 model.addVertexTerrain(150,-150,150,	 0.75F,  1.00F);
		 model.addVertexTerrain(150,-150,-150,	 1.00F,  1.00F);
		 model.addVertexTerrain(-150,-150,-150, 1.00F,  0.75F);
		 model.addVertexTerrain(-150,-150,150,	 0.75F,  0.75F);
		 return model.drawModel();
	 }
	 
	 
	 
	 
	 public RawModel renderFence(boolean fence)
	 {
		 TessellatorModel model = new TessellatorModel();
		 model.addVerticesNumber(31);
		 float X = 3F;
		 if(!fence){X = 1F;}
		 model.addVertexTerrain(X+0,0,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0, 0.08F,1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0,   0F,  0F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0,   0F,  1F);
		 model.addVertexTerrain(X+0,0,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0,0,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0,0,-0.15F+0.25,   0F,  0F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25,   0F,  1F); 
		 if(fence){
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0, 0.08F,1F);
		 model.addVertexTerrain(X+0,4,-0.15F+0,	 0F,  1F);	 
		 model.addVertexTerrain(X+0.25,2,-0.15F+0,   0F,  0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0,   0F,  1F); 
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0,4,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,4,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25,   0F,  0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,4,-0.15F+0.25,   0F,  1F);}
		 X = -2F;
		 if(!fence){X = -2F;}
		 model.addVertexTerrain(X+0,0,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0, 0.08F,1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0,   0F,  0F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0,   0F,  1F);
		 model.addVertexTerrain(X+0,0,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0,0,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0,0,-0.15F+0.25,   0F,  0F);
		 model.addVertexTerrain(X+0.25,0,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25,   0F,  1F);	
		 if(fence){
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0, 0.08F,1F);
		 model.addVertexTerrain(X+0,4,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0,   0F,  0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0,   0F,  1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0,	 0F,  0F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0,4,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,4,-0.15F+0,	 0F,  1F);
		 model.addVertexTerrain(X+0,2,-0.15F+0.25,   0F,  0F);
		 model.addVertexTerrain(X+0.25,2,-0.15F+0.25, 0.08F,0F);
		 model.addVertexTerrain(X+0.25,4,-0.15F+0.25, 0.08F,1F);
		 model.addVertexTerrain(X+0,4,-0.15F+0.25,   0F,  1F);}
		 
		 
		 
		 
		 model.addVertexTerrain(-1,0,0,	0.19F,	0F);
		 model.addVertexTerrain(-2,0,0,	1F,		0F);
		 model.addVertexTerrain(-2,1,0,	1F,		0.5F);
		 model.addVertexTerrain(-1,1,0,	0.19F,	0.5F);
		 
		 model.addVertexTerrain(-1, 1,0, 0.19F,	0F);
		 model.addVertexTerrain(-2, 1,0, 1F,	0F);
		 model.addVertexTerrain(-2, 2,0, 1F,	0.5F);
		 model.addVertexTerrain(-1, 2,0, 0.19F,	0.5F);
		 if(fence){
		 model.addVertexTerrain(-1, 2,0, 0.19F,	0F);
		 model.addVertexTerrain(-2, 2,0, 1F,	0F);
		 model.addVertexTerrain(-2, 3,0, 1F,	0.5F);
		 model.addVertexTerrain(-1, 3,0, 0.19F,	0.5F);}
		 
		 model.addVertexTerrain(0,0,0,	0.19F,	0F);
		 model.addVertexTerrain(-1,0,0,	1F,		0F);
		 model.addVertexTerrain(-1,1,0,	1F,		0.5F);
		 model.addVertexTerrain(0,1,0,	0.19F,	0.5F);
		 
		 model.addVertexTerrain(0,  1,0, 0.19F,	0F);
		 model.addVertexTerrain(-1, 1,0, 1F,	0F);
		 model.addVertexTerrain(-1, 2,0, 1F,	0.5F);
		 model.addVertexTerrain(0,  2,0, 0.19F,	0.5F);
		 if(fence){
		 model.addVertexTerrain(0,  2,0, 0.19F,	0F);
		 model.addVertexTerrain(-1, 2,0, 1F,	0F);
		 model.addVertexTerrain(-1, 3,0, 1F,	0.5F);
		 model.addVertexTerrain(0,  3,0, 0.19F,	0.5F);}
		 
		 model.addVertexTerrain(0,0,0,	0.19F,	0F);
		 model.addVertexTerrain(1,0,0,	1F,		0F);
		 model.addVertexTerrain(1,1,0,	1F,		0.5F);
		 model.addVertexTerrain(0,1,0,	0.19F,	0.5F);
		 

		 
		 if(fence){
		 model.addVertexTerrain(1,0,0,	0.19F,	0F);
		 model.addVertexTerrain(2,0,0,	1F,		0F);
		 model.addVertexTerrain(2,1,0,	1F,		0.5F);
		 model.addVertexTerrain(1,1,0,	0.19F,	0.5F);
		 
		 model.addVertexTerrain(1,1,0,	0.19F,	0F);
		 model.addVertexTerrain(2,1,0,	1F,		0F);
		 model.addVertexTerrain(2,2,0,	1F,		0.5F);
		 model.addVertexTerrain(1,2,0,	0.19F,	0.5F);
			 
		 model.addVertexTerrain(2,0,0,	0.19F,	0F);
		 model.addVertexTerrain(3,0,0,	1F,		0F);
		 model.addVertexTerrain(3,1,0,	1F,		0.5F);
		 model.addVertexTerrain(2,1,0,	0.19F,	0.5F);}
		 
		 
		 model.addVertexTerrain(0,1,0,	0.19F,	0F);
		 model.addVertexTerrain(1,1,0,	1F,		0F);
		 model.addVertexTerrain(1,2,0,	1F,		0.5F);
		 model.addVertexTerrain(0,2,0,	0.19F,	0.5F); 
		 

		 
		 
		 if(fence){
		 model.addVertexTerrain(2,1,0,	0.19F,	0F);
		 model.addVertexTerrain(3,1,0,	1F,		0F);
		 model.addVertexTerrain(3,2,0,	1F,		0.5F);
		 model.addVertexTerrain(2,2,0,	0.19F,	0.5F);
		 model.addVertexTerrain(0,2,0,	0.19F,	0F);
		 model.addVertexTerrain(1,2,0,	1F,		0F);
		 model.addVertexTerrain(1,3,0,	1F,		0.5F);
		 model.addVertexTerrain(0,3,0,	0.19F,	0.5F);
		 model.addVertexTerrain(1,2,0,	0.19F,	0F);
		 model.addVertexTerrain(2,2,0,	1F,		0F);
		 model.addVertexTerrain(2,3,0,	1F,		0.5F);
		 model.addVertexTerrain(1,3,0,	0.19F,	0.5F);
		 model.addVertexTerrain(2,2,0,	0.19F,	0F);
		 model.addVertexTerrain(3,2,0,	1F,		0F);
		 model.addVertexTerrain(3,3,0,	1F,		0.5F);
		 model.addVertexTerrain(2,3,0,	0.19F,	0.5F);}

		 return model.drawModel();
	 }
	 
	 
	 
	 
	 
	 public RawModel renderCrate()
	 {
		 TessellatorModel model = new TessellatorModel();
		 model.addVerticesNumber(6);
		 model.addVertexTerrain(1,1,0,	0.455F,	0.05F);
		 model.addVertexTerrain(0,1,0,	0.05F,	0.05F);
		 model.addVertexTerrain(0,0,0,	0.05F,	0.455F);
		 model.addVertexTerrain(1,0,0,	0.455F,	0.455F);
		 
		 model.addVertexTerrain(0,1,1,	0.545F,	0.95F);
		 model.addVertexTerrain(0,1,0,	0.95F,	0.95F);
		 model.addVertexTerrain(0,0,0,	0.95F,	0.545F);
		 model.addVertexTerrain(0,0,1,	0.545F,	0.545F);
		 
		 model.addVertexTerrain(0,1,1,	0.455F,	0.95F);
		 model.addVertexTerrain(1,1,1,	0.05F,	0.95F);
		 model.addVertexTerrain(1,0,1,	0.05F,	0.545F);
		 model.addVertexTerrain(0,0,1,	0.455F,	0.545F);
		 
		 model.addVertexTerrain(1,1,0,	0.545F,	0.05F);
		 model.addVertexTerrain(1,1,1,	0.95F,	0.05F);
		 model.addVertexTerrain(1,0,1,	0.95F,	0.455F);
		 model.addVertexTerrain(1,0,0,	0.545F,	0.455F);
		 
		 model.addVertexTerrain(0,0,0,	0.545F,	0.05F);
		 model.addVertexTerrain(1,0,0,	0.95F,	0.05F);
		 model.addVertexTerrain(1,0,1,	0.95F,	0.455F);
		 model.addVertexTerrain(0,0,1,	0.545F,	0.455F);
		 
		 model.addVertexTerrain(0,1,0,	0.545F,	0.05F);
		 model.addVertexTerrain(1,1,0,	0.95F,	0.05F);
		 model.addVertexTerrain(1,1,1,	0.95F,	0.455F);
		 model.addVertexTerrain(0,1,1,	0.545F,	0.455F);
		 
		 return model.drawModel();
	 }
	 
	
	
	public Tessellator modelDrawer = Tessellator.instance;
	public Random rand = new Random();

	/**
    *  Renders an object using the given texture.
    * @param worldObj 
    * @param quality 
    */
    public void renderAllTerrain(TerrainObject o, double x, double y, double z,int data)
    {	
    	String texture = ""+data;	
       // modelDrawer.setColorOpaque_F(1F, 1F, 1F);
    	if(o == TerrainObject.unnamedObject){renderUnnamedObject((float)x, (float)y+0.8F, (float)z);}
       
    }
 
   
  
 
    
    
    
    
    
    /**
     *Renders an object using the given texture.
     */
     public void renderUnnamedObject(float x, float y, float z)
     {	
         for(int id=0;id<ArrayListConsole.size();++id)
 	    {	
 	    	if(KeyAndOtherSettings.Point == -1)
 	    	{
 	    	KeyAndOtherSettings.MoveObject(ArrayListConsole.get(id));
 	    	}
 	    	else if(ArrayListConsole.get(id).pointNumber == KeyAndOtherSettings.Point)
 	    	{
 	    	KeyAndOtherSettings.MoveObject(ArrayListConsole.get(id));
 	    	}
 	    	//model.addVertexTerrain(ArrayListConsole.get(id).x+x, ArrayListConsole.get(id).y+y, ArrayListConsole.get(id).z+z, ArrayListConsole.get(id).Y, ArrayListConsole.get(id).X);
 	    }
     }
     
     
     public RawModel renderNest()
	 {	
		 	TessellatorModel model = new TessellatorModel();
		 	model.addVerticesNumber(6*6);
	   	 	for(float XX=0;XX<6;++XX){
	   	 	for(float ZZ=0;ZZ<6;++ZZ){
	   	 	float Point1  = -((0.9F/(5-XX+1))+(0.9F/(XX+2))+(0.9F/(5-ZZ+1))+(0.9F/(ZZ+2)));
	   	 	float Point2  = -((0.9F/(5-XX+1))+(0.9F/(XX+2))+(0.9F/(5-ZZ+2))+(0.9F/(ZZ+1)));
	   	 	float Point3  = -((0.9F/(5-XX+2))+(0.9F/(XX+1))+(0.9F/(5-ZZ+2))+(0.9F/(ZZ+1)));
	        float Point4  = -((0.9F/(5-XX+2))+(0.9F/(XX+1))+(0.9F/(5-ZZ+1))+(0.9F/(ZZ+2)));
	        model.addVertexTerrain(0.25F*XX,     1.5F+Point1	,0.25F*ZZ,      (XX+1)*0.16F,   (ZZ+1)*0.16F);
	        model.addVertexTerrain(0.25F*XX,     1.5F+Point2	,0.25F*(ZZ-1),  (XX+1)*0.16F,   (ZZ)*0.16F);
	        model.addVertexTerrain(0.25F*(XX-1), 1.5F+Point3	,0.25F*(ZZ-1),  XX*0.16F, 	  (ZZ)*0.16F);
	        model.addVertexTerrain(0.25F*(XX-1), 1.5F+Point4	,0.25F*ZZ,      XX*0.16F, 	  (ZZ+1)*0.16F);
		    }
	 		}
	   	 	return model.drawModel();
	    }

     public static List<ArrayListConsole> ArrayListConsole = new ArrayList<ArrayListConsole>();
    
    public static class ArrayListConsole
    {
    	public float x;
    	public float y;
    	public float z;
    	public String objectName = "";
    	public double X;
    	public double Y;
    	public int pointNumber;
    	public int ModelNumber;
    	public ArrayListConsole(float x,float y, float z,String name, double d, double dd,int n,int m)
    	{
    		x = x;
    		y = y;
    		z = z;
    		objectName = name;
    		X = d;
    		Y = dd;
    		pointNumber = n;
    		ModelNumber = m;
    	}
    }
   
}      