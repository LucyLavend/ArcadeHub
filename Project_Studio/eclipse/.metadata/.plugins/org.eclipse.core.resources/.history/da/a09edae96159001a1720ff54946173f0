package nl.miystengine.client.gui;

import nl.miystengine.client.MiystEngine;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.Display;


public class FBORenderer
{	
	public MiystEngine ttw = MiystEngine.miystengine;
	
	public void setupOverlayRendering()
    {
      	 ScaledResolution scale = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
         GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
         GL11.glMatrixMode(GL11.GL_PROJECTION);
         GL11.glLoadIdentity();
         GL11.glOrtho(0.0D, scale.getScaledWidth_double(), scale.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
         GL11.glMatrixMode(GL11.GL_MODELVIEW);
         GL11.glLoadIdentity();
         GL11.glTranslatef(0F, 0F, -2000F);
    }
	  
 	public void updateCameraAndRender(float ticker)
    {    
    	  
    	  MiystEngine.miystengine.fbo.bindFrameBuffer();
          GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
          

              ScaledResolution sr = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
              int X = Mouse.getX() * sr.getScaledWidth() / this.ttw.displayWidth;
              int Z = sr.getScaledHeight() - Mouse.getY() * sr.getScaledHeight() / this.ttw.displayHeight - 1;

              GL11.glViewport(0, 0, this.ttw.displayWidth, this.ttw.displayHeight);
              GL11.glMatrixMode(GL11.GL_PROJECTION);
              GL11.glLoadIdentity();
              GL11.glMatrixMode(GL11.GL_MODELVIEW);
              GL11.glLoadIdentity();
              this.setupOverlayRendering();
              
              GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
              try
              {
            	 if(this.ttw.currentScreen2 != null)
            	 {
            	 	this.ttw.currentScreen2.drawScreen(X, Z);
            	 }
              }
              catch (Throwable var12)
              {
            	  var12.printStackTrace();
                  System.out.println("[Client thread/ERROR]: " + var12.getMessage());
              }
           
          MiystEngine.miystengine.fbo.unbindFrameBuffer();
          
          MiystEngine.miystengine.fbo.resolveToFBO(MiystEngine.miystengine.fbo_Out);
          
          MiystEngine.miystengine.fbo.framebufferRender(0,0,MiystEngine.miystengine.displayWidth,MiystEngine.miystengine.displayHeight,MiystEngine.miystengine.fbo_Out.getColourTexture());
      }
 }