package nl.miystengine.client.renderer.basicmodels;   

import java.io.IOException;
import java.util.Dictionary;
import java.util.Hashtable;

import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.entity.ModelBasic;
import nl.miystengine.client.shaders.Loader;
import nl.miystengine.client.shaders.OBJLoader;
import nl.miystengine.client.shaders.RawModel;

public class ArrayListOBJModels
{
	public static Dictionary dictPlants = new Hashtable(); 
	
	public int idModel;
    public String nameOBJ;
    
    public ArrayListOBJModels(String modelName,String key)
    {
    	this.nameOBJ = modelName;
    	this.idModel = 100 + EntityRenderer.OBJModelList.size();
    	ModelBasic.saveModelInList(this.idModel, OBJLoader.loadObjModel(true,this.nameOBJ, new Loader()));
    	dictPlants.put(key, OBJLoader.hitbox);    RawModel model = RenderTerrain.renderScreen();
    }
	
    public ArrayListOBJModels(String modelName)
    {
    	this.nameOBJ = modelName;
    	this.idModel = 100 + EntityRenderer.OBJModelList.size();
    	try
    	{
    		ModelBasic.saveModelInList(this.idModel, OBJLoader.loadObjModel(this.nameOBJ, new Loader()));
    	}
    	catch (Exception e)
    	{
    		System.out.println("Error while loading model...");
    		e.printStackTrace();
    	}
    }
    
    public ArrayListOBJModels(String modelName,boolean loadWhileUseFullString)
    {
    	this.nameOBJ = modelName;
    	this.idModel = 100 + EntityRenderer.OBJModelList.size();
    	
    	RawModel model;
		try 
		{
			model = OBJLoader.loadObjModelFullString(this.nameOBJ, new Loader());
	    	if(model != null)
	    	{
	    		ModelBasic.saveModelInList(this.idModel, model);
	    	}
		} 
		catch (NumberFormatException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
    }
   
}


