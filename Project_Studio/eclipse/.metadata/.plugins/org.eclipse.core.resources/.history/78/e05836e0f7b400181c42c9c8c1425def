package nl.thestructureworld.client.gui;

import java.awt.event.KeyEvent;
import java.io.File;
import java.net.URI;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.audio.PositionedSoundRecord;
import nl.thestructureworld.client.audio.SoundCategory;
import nl.thestructureworld.client.audio.SoundHandler;
import nl.thestructureworld.client.multiplayer.ServerData;
import nl.thestructureworld.client.renderer.OpenGlHelper;
import nl.thestructureworld.client.renderer.Tessellator;
import nl.thestructureworld.client.renderer.texture.DynamicTexture;
import nl.thestructureworld.entity.player.EntityPlayer;
import nl.thestructureworld.server.TheStructureWorldServer;
import nl.thestructureworld.util.EnumChatFormatting;
import nl.thestructureworld.util.ResourceLocation;
import nl.thestructureworld.world.storage.ISaveFormat;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.util.glu.Project;

public class ShaderEditorGui extends GuiScreen
{
    private static final Random rand = new Random();
    public FontRenderer font;
    
    public ShaderEditorGui()
    {
    	this.font=this.thestructureworld.fontRenderer;
    }

    public File shaderLoc;
    
    private void renderShaderEditor(int x, int y)
    {
    	GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
        GL11.glDisable(GL11.GL_DEPTH_TEST);
        GL11.glDisable(GL11.GL_ALPHA_TEST);
        GL11.glDepthMask(false);
        OpenGlHelper.glBlendFunc(770, 771, 1, 0);
        Tessellator var4 = Tessellator.instance;
        GL11.glPushMatrix();
        TheStructureWorld.TheStructureWorld.getTextureManager().bindTexture("/gui/Shader-Editor.png",0,true); 
        GL11.glTranslatef(225F, 125F, 0);
        var4.startDrawingQuads();
        var4.addVertexWithUV(0.0D, y/1.8D, 0.0D, 0.0D, 1D);
        var4.addVertexWithUV(x/3D, y/1.8D, 0.0D, 1.0D, 1D);
        var4.addVertexWithUV(x/3D, 0.0D, 0.0D, 1.0D, 0.0D);
        var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
        var4.draw();
       
        this.drawString(font,"text", 2, 96, 14737632);
        
        
        GL11.glPopMatrix();
    }
    
    /**
     * Returns true if this GUI should pause the game when it is displayed in single-player
     */
    public boolean doesGuiPauseGame()
    {
        return false;
    }

    @Override
    /**
     * Fired when a key is typed. This is the equivalent of KeyListener.keyTyped(KeyEvent e).
     */
    protected void keyTyped(char c, int i) 
    {
    	super.keyTyped(c,i);
    }
    
    //The Alpha and The Omega are like light and darkness: one is needed so the other can exist.
    //Take on of them away and there will be chaos.
    //Others to much or the lack of the others.
    //They can be recreated but it will come with a price.

    
    protected void actionPerformed(ButtonBasic button)
    {
        if (button.id == 1)
        {
            this.thestructureworld.displayGuiScreen(new SelectWorldGui(this));
        }
        if (button.id == 2)
        {
        	 this.thestructureworld.displayGuiScreen(new GuiMultiplayer(this)); 
        }
        if (button.id == 4)
        {
            this.thestructureworld.shutdown();
        }
    }

   
  
   public boolean showButtons = false;
   public float alphaStartString = 0.85F;
   public int changeStartString = 0;
   public boolean alphaStartStringBack = false;
   public boolean buttonReleased = true;
   Tessellator tes = Tessellator.instance;
   public long second = 0;
   
    /**
     * Draws the screen and all the components in it.
     */
    public void drawScreen(int x, int y, float f)
    {
        super.drawScreen(x, y, f);
        ScaledResolution sr = new ScaledResolution(this.thestructureworld, this.thestructureworld.displayWidth, this.thestructureworld.displayHeight);

        int w = sr.getScaledWidth();
        int h = sr.getScaledHeight();
        this.renderShaderEditor(w-100,h-50);
        
        GL11.glEnable(GL11.GL_BLEND);
        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        if(!this.showButtons)
        {
        this.drawCenteredStringWithColor(fontRendererObj,"Press any key to continue", 330, 270, this.alphaStartString, this.alphaStartString, this.alphaStartString, this.alphaStartString);
        }
        
        if(this.showButtons)
        {
        int Y = this.height / 4 + 48;
        int X = this.width / 2 - 100;
        this.buttonList.add(new ButtonBasic(1, X, Y, "Campaign"));
        ButtonBasic Multiplayer = new ButtonBasic(2, X, Y + 24 * 1, "Multiplayer");
        Multiplayer.enabled = false;
        this.buttonList.add(Multiplayer);
        this.buttonList.add(new ButtonBasic(4, X, Y + (72/2) + 12 + 24,  "Quit"));
        }
    }
   
}
