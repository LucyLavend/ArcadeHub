package nl.miystengine.entity;

import java.text.DecimalFormat;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.Callable;
import org.lwjgl.input.Keyboard;
import nl.miystengine.client.GameProfile;
import nl.miystengine.client.KeySettings;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.gui.IngameGui;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.entity.arrays.ArrayListTerrain;
import nl.miystengine.client.renderer.terrain.Terrain;
import nl.miystengine.client.shaders.Camera;
import nl.miystengine.server.management.MiystEngineServer;
import nl.miystengine.util.MathHelper;
import nl.miystengine.util.ReportedException;
import nl.miystengine.world.World;
import nl.miystengine.world.WorldServer;

public abstract class Entity
{
    private static int nextEntityID;
    private int entityID;
    
    protected boolean isEntityJumping = false;
    
    public boolean forceSpawn;
    public World worldObj;
    public double prevPosX;
    public double prevPosY;
    public double prevPosZ;

    public double posX;
    public double posY;
    public double posZ;
    public double motionX;
    public double motionY;
    public double motionZ;
    public float rotationYaw;
    public float rotationPitch;
    public float prevRotationYaw;
    public float prevRotationPitch;

    public boolean stayingGround;

    public boolean velocityChanged;

    public boolean isDead;
    public float eyeOffset;

    public float height;

    public float fallDistance;

    private int nextStepDistance;


    public double lastTickPosX;
    public double lastTickPosY;
    public double lastTickPosZ;
    public float bodyPosition;

  
    public float stepHeight;

    public boolean noClip = true;
    public float entityCollisionReduction;
    public int ticksExisted;

    /**
     * Remaining time an entity will be "immune" to further damage after being hurt.
     */
    public int hurtResistantTime;
    private boolean firstUpdate;
    private double entityRiderPitchDelta;
    private double entityRiderYawDelta;

    /** Has this entity been added to the Area its within */
    public boolean addedToArea;
    public int AreaCoordX;
    public int AreaCoordY;
    public int AreaCoordZ;
    public int serverPosX;
    public int serverPosY;
    public int serverPosZ;

    public boolean isAirBorne;

    private boolean invulnerable;
   
    public int getEntityId()
    {
        return this.entityID;
    }

    public void setEntityId(int id)
    {
        this.entityID = id;
    }

    public Entity(World world)
    {
        this.entityID = nextEntityID++;
        this.height = 1.8F;
        this.nextStepDistance = 1;
        this.firstUpdate = true;
        this.worldObj = world;
        this.setPosition(0.0D, 0.0D, 0.0D);
        this.entityInit();
    }

    protected abstract void entityInit();


    /**
     * Will get destroyed next tick.
     */
    public void setDead()
    {
        this.isDead = true;
    }

    
    /**
     * Sets the rotation of the entity
     */
    protected void setRotation(float y, float p)
    {
        this.rotationYaw = y % 360.0F;
        this.rotationPitch = p % 360.0F;
    }

    /**
     * Sets the x,y,z of the entity from the given parameters. Also seems to set up a bounding box.
     */
    public void setPosition(double x, double y, double z)
    {
        this.posX = x;
        this.posY = y;
        this.posZ = z;
    }

    /**
     * Adds par1*0.15 to the entity's yaw, and *subtracts* par2*0.15 from the pitch. Clamps pitch from -90 to 90. Both
     * arguments in degrees.
     */
    public void setAngles(float Yaw, float Pitch)
    {
        float var3 = this.rotationPitch;
        float var4 = this.rotationYaw;
        this.rotationYaw = (float)((double)this.rotationYaw + (double)Yaw * 0.15D);
        this.rotationPitch = (float)((double)this.rotationPitch - (double)Pitch * 0.15D);

        if (this.rotationPitch < -90.0F)
        {
            this.rotationPitch = -90.0F;
        }

        if (this.rotationPitch > 90.0F)
        {
            this.rotationPitch = 90.0F;
        }
        if(this.rotationYaw > 360)
        {
        	this.rotationYaw = 0F;
        }
        else if(this.rotationYaw < 0)
        {
        	this.rotationYaw = 360F;
        }
        
        this.prevRotationPitch += this.rotationPitch - var3;
        this.prevRotationYaw += this.rotationYaw - var4;
    }

    /**
     * Called to update the entity's position/logic.
     */
    public void onUpdate()
    {
        this.onEntityUpdate();
    }

    /**
     * Gets called every tick from main Entity class
     */
    public void onEntityUpdate()
    {   	
        if(this.motionX == 0)
        {
        	this.movespeedX=0;	
        }
        
        if(this.motionZ == 0)
        {
        	this.movespeedZ=0;	
        }
    
        this.prevPosX = this.posX;
        this.prevPosY = this.posY;
        this.prevPosZ = this.posZ;
        this.prevRotationPitch = this.rotationPitch;
        this.prevRotationYaw = this.rotationYaw;
        if (this.posY < -1.0D)
        {
            this.kill();
        }
        this.firstUpdate = false;
    }
   
    /**
     * sets the dead flag. Used when you fall off the bottom of the world.
     */
    protected void kill()
    {
        this.setDead();
    }

    public void setJumping(boolean j)
    {
        this.isEntityJumping = j;
    }
    
    public boolean getJumping()
    {
    	return this.isEntityJumping;
    }
    

    private boolean movePlayer = true;
    
    public void setMovePlayer(boolean move)
    {
    	this.movePlayer = move;
    }
    
    public boolean getMovePlayer()
    {
    	return this.movePlayer;
    }
    
    private float moveToX;
    private float moveToY;
    private float moveToZ;
    
    public float getMoveX()
    {
    	return this.moveToX;
    }
    
    public float getMoveY()
    {
    	return this.moveToY;
    }
    
    public float getMoveZ()
    {
    	return this.moveToZ;
    }
    
    public void setMoveX(float x)
    {
    	this.moveToX = x;
    }
    
    public void setMoveY(float y)
    {
    	this.moveToY = y;
    }
    
    public void setMoveZ(float z)
    {
    	this.moveToZ = z;
    }
    
    public boolean cancelMoveX = false;
    public boolean cancelMoveY = false;
    public boolean cancelMoveZ = false;
    
    public boolean cancelMoveSX = false;
    public boolean cancelMoveSY = false;
    public boolean cancelMoveSZ = false;
    
    /**
     * Tries to move the entity. Args: x, y, z as doubles
     */
    public void moveEntity(double x, double y, double z)
    {
    	if(x > 0||x < 0||y > 0||y < 0||z > 0||z < 0 || this.hasMoved || this.isCrouching() || this.isLayingdown())
    	{
    		if(this.getMovePlayer())
    		{
	    		if(!this.cancelMoveX && !this.cancelMoveZ && !this.cancelMoveSX && !this.cancelMoveSZ)
	    		{
	    			this.move(this.moveToX,this.moveToY,this.moveToZ,false);
	    		}
	    		if(this.cancelMoveX && !this.cancelMoveZ && this.cancelMoveSX && !this.cancelMoveSZ)
	    		{
	    			this.move(0,this.moveToY,this.moveToZ,false);
	    			this.moveToX = 0;
	    		}
	    		if(!this.cancelMoveX && this.cancelMoveZ && !this.cancelMoveSX && this.cancelMoveSZ)
	    		{
	    			this.move(this.moveToX,this.moveToY,0,false);
	    			this.moveToZ = 0;
	    		}
	    		if(this.cancelMoveX && this.cancelMoveZ && this.cancelMoveSX && this.cancelMoveSZ)
	    		{
	    			this.move(0,this.moveToY,0,false);
	    			this.moveToX = 0;
	    			this.moveToZ = 0;
	    		}
    		}

    	}
    	this.moveToX = (float) x;
		this.moveToY = (float) y;
		this.moveToZ = (float) z;
		if(MiystEngine.miystengine.thePlayer.cancelMoveX)
		{
			MiystEngine.miystengine.thePlayer.cancelMoveX = false;
			this.moveToX = 0;
		}
		if(MiystEngine.miystengine.thePlayer.cancelMoveZ)
		{
			MiystEngine.miystengine.thePlayer.cancelMoveZ = false;
			this.moveToZ = 0;
		}
    }

    public double heightTerrainOnThisCoords = 154;
  
    public float highFall = 0;
    public double movespeedX,movespeedZ;

    public boolean standUpAnimation = false;
    
    public static String[] coords4;
    public static String[] coords5;
    public static String[] coords6;
    public static String[] coords7;
    public static String[] coords8;
    public static String[] coords9;
    public static String[] coords10;
    public static String[] coords11;
    public static String[] coords12;
   
    public float extraHeight = 0F;
    
    public boolean isInContactWithObject = false;
   
    
    public void move(double x, double y, double z,boolean standardMotion)
    {          
	    if(this.posX - (x * 3) > 0 && this.posX + (x * 3) < 2500 && this.posZ - (z * 3) > 0 && this.posZ + (z * 3) < 2500)
	    {
    		if(!this.isInContactWithObject)
	 		{
	 			this.extraHeight = 0;
	 		}
	 		
	 		double Height;
	 		if(Terrain.worldMap != null)
	 		{
	 			float xpos =  -((int)this.posX - (float)this.posX);
	 			float xpos2 =  1F - xpos;

	 			float zpos =  -((int)this.posZ - (float)this.posZ);
	 			float zpos2 =  1F - zpos;
	 		
	 			float finalX = ((Terrain.getHeightFromMap((int)this.posX+5,(int)this.posZ+5,false) * xpos) + (Terrain.getHeightFromMap((int)this.posX+6,(int)this.posZ+5,false) * xpos2));
	 			float finalZ = ((Terrain.getHeightFromMap((int)this.posX+5,(int)this.posZ+5,false) * zpos) + (Terrain.getHeightFromMap((int)this.posX+5,(int)this.posZ+6,false) * zpos2));
	 			
	 			Height = this.extraHeight + ((finalX + finalZ) / 2) + this.eyeOffset - 1D;
	 		}
	 		else
	 		{
	 			Height = 0;
	 		}
	 		double Y = this.posY;
	    
	 		if(Y > Height && this.jumpTimer == 0 && this.fallTimer == 0)
	    	{
	    		this.fallTimer = 250;
	    	}
	 		else if(this.isEntityJumping && this.jumpTimer == 0 && this.canJumpAgain == 0)
	    	{
	    		this.jumpTimer = 15;
	    		this.isEntityJumping = false;
	    	}
	 		else if(Y < Height)
	 		{
	 			double d = 0.25D * (Height - Y);
	 	        DecimalFormat df = new DecimalFormat("#.#####");
	 			this.posY += Double.parseDouble(df.format(d).replace(",","."));
	 		}
	 		
	    	for(int i=0;i<2;++i)
	    	{
	    		if(this.fallTimer > 0)
	    		{
	    			if(this.fallTimer > 1)
	    			{
	    				--this.fallTimer;
	    			}
	    			
	    			this.posY += (0.001D - ((250 - this.fallTimer) * 0.01D)) * 6 * (worldObj.StructureWorldInfo.gravity / 10D);
	    			
	    			if(this.posY - 0.1 < Height)
	    			{
	    				this.fallTimer = 0;
	    			}
	    		}
	    	}
	
	    	for(int i=0;i < 2;++i)
	    	{
	    		if(this.jumpTimer > 0)
	    		{
	    			--this.jumpTimer;
	    			this.posY += ((0.015D * (this.jumpTimer))) / (worldObj.StructureWorldInfo.gravity / 10D);
	    		}
	    	}
	    	
	    	if(this.jumpTimer == 1)
	    	{
	    		this.canJumpAgain = 18;
	    	}
	    	
	    	if(this.canJumpAgain > 0)
	    	{
	    		--this.canJumpAgain;
	    	}
	    	
	        this.movespeedX = x;
	   	 	
	   	 	this.movespeedZ = z;
			
			this.posX += x;
			
			
	        if(x < 0)
	        {
	        	x = -x;
	        }
	        
	        this.posZ += z;
			
	        
	   	 	if(z < 0)
	   	 	{
	   	 		z = -z;
	   	 	}
	    }
	    if(this.posX - x > 0)
	    {
	    	this.posX = this.posX - x * 3;
	    }
	    if(this.posZ - z > 0)
	    {
	    	this.posZ = this.posZ - z * 3;
	    }
	    
	    if(this.posX + x < 2500)
	    {
	    	this.posX = this.posX + x * 3;
	    }
	    if(this.posZ + z < 2500)
	    {
	    	this.posZ = this.posZ + z * 3;
	    }
	  }
    
    public int jumpTimer = 0;
    public int fallTimer = 0;
    public int canJumpAgain = 0;


    public double X = -5000000;
    public double Z = -5000000;
    public boolean hasMoved = false;
    public float coordCode = 0;
    public int onWorldLoad = 0;
    
    public void move()
    {
    	if(this.onWorldLoad<10)
    	{
    		++this.onWorldLoad;
    		this.coordCode = (float)(this.posX+this.posY+this.posZ);
    		this.hasMoved = true;
    	}
    	
    	if(this.onWorldLoad>9)
    	{
    		if(this.X != this.posX || this.Z != this.posZ)
    		{
    			if(this.motionX == 0)
    			{
    				this.X = this.posX;
    				this.Z = this.posZ;
    			}
    			if(!this.hasMoved)
    			{
    				this.hasMoved = true;
    			}
    			this.coordCode = (float)(this.posX+this.posY+this.posZ);
    		}
    		else if(this.hasMoved)
    		{
    			this.hasMoved = false;
    		}
    	}
      }

    public float getEyeHeight()
    {
        return 2.0F;
    }

    /**
     * Used in both water and by flying objects
     */
    public void moveFlying(float x, float y, float z)
    {
        float var4 = x * x + y * y;

        if (var4 >= 1.0E-4F)
        {
            var4 = MathHelper.sqrt_float(var4);

            if (var4 < 1.0F)
            {
                var4 = 1.0F;
            }

            var4 = z / var4;
            x *= var4;
            y *= var4;
            float var5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
            float var6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
            this.motionX += (double)(x * var6 - y * var5);
            this.motionZ += (double)(y * var6 + x * var5);
        }
    }

 
    /**
     * Sets the reference to the World object.
     */
    public void setWorld(World w)
    {
        this.worldObj = w;
    }

    /**
     * Sets the entity's position and rotation. Args: posX, posY, posZ, yaw, pitch
     */
    public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch)
    {
        this.prevPosX = this.posX = x;
        this.prevPosY = this.posY = y;
        this.prevPosZ = this.posZ = z;
        this.prevRotationYaw = this.rotationYaw = yaw;
        this.prevRotationPitch = this.rotationPitch = pitch;
        double var9 = (double)(this.prevRotationYaw - yaw);

        if (var9 < -180.0D)
        {
            this.prevRotationYaw += 360.0F;
        }

        if (var9 >= 180.0D)
        {
            this.prevRotationYaw -= 360.0F;
        }

        this.setPosition(this.posX, this.posY, this.posZ);
        this.setRotation(yaw, pitch);
    }

    /**
     * Sets the location and Yaw/Pitch of an entity in the world
     */
    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
    {
        this.lastTickPosX = this.prevPosX = this.posX = x;
        this.lastTickPosY = this.prevPosY = this.posY = y + (double)this.eyeOffset;
        this.lastTickPosZ = this.prevPosZ = this.posZ = z;
        this.rotationYaw = yaw;
        this.rotationPitch = pitch;
        this.setPosition(this.posX, this.posY, this.posZ);
    }

    /**
     * Adds to the current velocity of the entity. Args: x, y, z
     */
    public void addVelocity(double x, double y, double z)
    {
        this.motionX += x;
        this.motionY += y;
        this.motionZ += z;
        this.isAirBorne = true;
    }

    /**
     * Sets that this entity has been attacked.
     */
    protected void setBeenAttacked()
    {
        this.velocityChanged = true;
    }

    /**
     * Returns true if other Entities should be prevented from moving through this Entity.
     */
    public boolean canBeCollidedWith()
    {
        return false;
    }

    /**
     * Returns true if this entity should push and be pushed by other entities when colliding.
     */
    public boolean canBePushed()
    {
        return false;
    }

    
 
    /**
     * Checks whether target entity is alive.
     */
    public boolean isEntityAlive()
    {
        return !this.isDead;
    }

    /**
     * First layer of player interaction
     */
    public boolean interactFirst(EntityPlayer gen_functioni_130002_1_)
    {
        return false;
    }

    /**
     * Returns the Y Offset of this entity.
     */
    public double geteyeOffset()
    {
        return (double)this.eyeOffset;
    }

    /**
     * Returns the Y offset from the entity's position for any entity riding this one.
     */
    public double getMountedeyeOffset()
    {
        return (double)this.height * 0.75D;
    }

  
    /**
     * Sets the position and rotation. Only difference from the other one is no bounding on the rotation. Args: posX,
     * posY, posZ, yaw, pitch
     */
    public void setPositionAndRotation(double px, double py, double pz, float yaw, float pitch, int justmakesdifferencenotused)
    {
        this.setPosition(px, py, pz);
        this.setRotation(yaw, pitch);
    }

    
    /**
     * Sets the velocity to the args. Args: x, y, z
     */
    public void setVelocity(double mx, double my, double mz)
    {
        this.motionX = mx;
        this.motionY = my;
        this.motionZ = mz;
    }


    public boolean Crouching;
    public boolean layingDown;
    public boolean running = false;
    
    public void setCrouching(boolean Crouching)
    {
         this.Crouching = Crouching;
    }
    
    /**
     * Get and set Player Movement ability's
     */   
    public boolean isCrouching()
    {
        return this.Crouching;
    }
    
    public boolean isRunning()
    {
    	return this.running;
    }
    
    public void setRunning(boolean running)
    {
    	this.running = running;
    }
    
    public boolean isLayingdown()
    {
        return this.layingDown;
    }
    
    public void setLayingdown(boolean layingDown)
    {
        this.layingDown = layingDown;
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////    


    public float getRotationYawHead()
    {
        return 0.0F;
    }

    /**
     * Sets the head's yaw rotation of the entity.
     */
    public void setRotationYawHead(float f) {}

    /**
     * Return whether this entity is invulnerable to damage.
     */
    public boolean isEntityInvulnerable()
    {
        return this.invulnerable;
    }

}
