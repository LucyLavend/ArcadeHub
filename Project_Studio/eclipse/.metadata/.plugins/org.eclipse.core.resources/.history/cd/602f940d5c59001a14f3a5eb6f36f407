package nl.miystengine.client.shaders;
 
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import nl.miystengine.client.RefreshShaderKeybinds;
import nl.miystengine.client.FileBasicJava;
import nl.miystengine.client.GameProfile;
import nl.miystengine.client.KeySettings;
import nl.miystengine.client.MiystEngine;
import nl.miystengine.client.audio.AudioMaster;
import nl.miystengine.client.gui.ScreenEffects;
import nl.miystengine.client.gui.IngameGui;
import nl.miystengine.client.gui.LoadingScreenGui;
import nl.miystengine.client.gui.ScaledResolution;
import nl.miystengine.client.gui.ScreenEffectsGui;
import nl.miystengine.client.multiplayer.NetHandlerPlayClient;
import nl.miystengine.client.multiplayer.WorldClient;
import nl.miystengine.client.renderer.EntityRenderer;
import nl.miystengine.client.renderer.ObjectRenderer;
import nl.miystengine.client.renderer.Tessellator;
import nl.miystengine.client.renderer.entity.BasicEntityRender;
import nl.miystengine.client.renderer.entity.ModelBasic;
import nl.miystengine.client.renderer.entity.arrays.ArrayListEntity;
import nl.miystengine.client.shaders.basicscreen.Fbo;
import nl.miystengine.client.shaders.normal.NormalMappingShader;
import nl.miystengine.client.water.WaterTile;
import nl.miystengine.entity.Entity;
import nl.miystengine.entity.EntityLivingBase;
import nl.miystengine.entity.PlayerSPEntity;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.glu.Project;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import nl.miystengine.entity.EntityPlayer;
import nl.miystengine.util.MathHelper;

public class Camera 
{
	public MiystEngine ttw = MiystEngine.miystengine;
	public boolean moveHeadBack = false;
	public float walkingAnimation = -1F;
	
	public boolean switchPitch = false;
	public float breathMotionAdded = 0F;
	
	public boolean switchPitch2 = false;
	public float breathMotionAdded2 = 0F;
	
	public boolean pauseBreath = false;
	public int pauseBreathTimer = 0;
	public int holdingBreath = 0;
	public float bodyPos = 1.8F;
	public float breathAnimation;
	public float breathAnimation2;
	public boolean switchArmUp = false;
	public float ArmUpMotionAdded = 0F;
	public float ArmUpAnimation;
	
	private float distanceFromPlayer = 35;
	private float angleAroundPlayer = 110;
	
	public void move()
	{
		calculateZoom();
		//calculateAngleAroundPlayer();
		float horizontalDistance = calculateHorizontalDistance();
		float verticalDistance = calculateVerticalDistance();
		calculateCameraPosition(horizontalDistance, verticalDistance);
		this.yawn = 360 - angleAroundPlayer;
		yawn %= 360;
	}
	
	private void calculateCameraPosition(float horizDistance, float verticDistance)
	{
		float theta = angleAroundPlayer;
		float offsetX = (float) (horizDistance * Math.sin(Math.toRadians(theta)));
		float offsetZ = (float) (horizDistance * Math.cos(Math.toRadians(theta)));
		camX = offsetX;
		camZ = offsetZ;
		camY = verticDistance;
	}
	
	private float calculateHorizontalDistance()
	{
		return (float) (distanceFromPlayer * Math.cos(Math.toRadians(pitch)));
	}
	
	private float calculateVerticalDistance()
	{
		return (float) (distanceFromPlayer * Math.sin(Math.toRadians(pitch)));
	}
	
	public void checkMouseWheel() 
	{
		    int dWheel = Mouse.getDWheel();
		    if (dWheel < 0) 
		    {
		        System.out.println("DOWN");
		    } 
		    else if (dWheel > 0)
		    {
		        System.out.println("UP");
		    }
		}
		
	private void calculateZoom()
	{
		float zoomLevel = Mouse.getDWheel() * 0.03f;
		distanceFromPlayer -= zoomLevel;
		if(distanceFromPlayer < 5)
		{
			distanceFromPlayer = 5;
		}
		checkMouseWheel();
	}
	
	private void calculateAngleAroundPlayer()
	{	
		float angleChange = Mouse.getDX() * 0.3f;
		angleAroundPlayer -= angleChange;
	}
	
	public void breathAnimation(EntityLivingBase base)
	{
		if(MiystEngine.miystengine.currentScreen == null)
		{
			/////////////////////////
			if(ArmUpMotionAdded > 0.3F)
			{
				switchArmUp = false;
			}
			else if(ArmUpMotionAdded < -0.3F)
			{
				switchArmUp = true;
			}
			if(switchArmUp)
			{
				ArmUpAnimation += (0.001F - (ArmUpMotionAdded/100));
				ArmUpMotionAdded += 0.001F;
			}
			else if(!switchArmUp)
			{
				ArmUpAnimation -= (0.001F + (ArmUpMotionAdded/100));	
				ArmUpMotionAdded -= 0.001F;
			}
			///////////////////////
			float breath;
			if(base instanceof PlayerSPEntity)
			{
				PlayerSPEntity sp = (PlayerSPEntity) base;
				if(sp.RunningTicksLeft > 0)
		        {
					breath = 0.01F;
		        }
				else
				{
					breath = 0.001F;
				}
			}
			else
			{
				breath = 0.001F;
			}
			
			if(bodyPos < base.bodyPosition && !base.Crouching && !base.layingDown)
			{
				for(int i = 0;i<100;++i)
				{
					if(bodyPos < base.bodyPosition){bodyPos += 0.001F;}
				}
			}
			else if(bodyPos > base.bodyPosition && base.Crouching || base.layingDown)
			{
				for(int i = 0;i<100;++i)
				{
					if(bodyPos > base.bodyPosition){bodyPos -= 0.001F;}
				}
			}
			
			if(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT))
			{
				pauseBreath = true;
				++holdingBreath;
			}
			else if(holdingBreath > 0)
			{
				holdingBreath = 0;
				pauseBreath = false;
			}
			
			if(breathMotionAdded > 0.6F)
			{
				switchPitch = false;pauseBreath = true;
			}
			else if(breathMotionAdded < -0.6F)
			{
				switchPitch = true;pauseBreath = true;
			}
			
			if(breathMotionAdded2 > 0.57F)
			{
				switchPitch2 = false;
			}
			else if(breathMotionAdded2 < -0.54F)
			{
				switchPitch2 = true;
			}
			
			if(pauseBreath)
			{
				++pauseBreathTimer;
			}
			if(pauseBreathTimer>15)
			{
				pauseBreathTimer = 0;
				pauseBreath = false;
			}
			if(!pauseBreath){
			if(switchPitch)
			{
				breathAnimation += (0.005F - (breathMotionAdded/100));
				breathMotionAdded += 0.005F;
			}
			else if(!switchPitch)
			{
				breathAnimation -= (0.005F + (breathMotionAdded/100));	
				breathMotionAdded -= 0.005F;
			}
			
			if(switchPitch2)
			{
				breathAnimation2 += (0.0049F - (breathMotionAdded/99));
				breathMotionAdded2 += 0.00479F;
			}
			else if(!switchPitch2)
			{
				breathAnimation2 -= (0.0049F + (breathMotionAdded/101));	
				breathMotionAdded2 -= 0.00489F;
			}
			}
		}
	}
	
    public static float camX;
	public static float camY;
	public static float camZ;
	public static float pitch;
	public float oldPitch;
	public float zPitch;
  	public float walkAnimation = 0F;	
  	public boolean incdecWalkAnimation = false;
  	public float drunkWalk = 0;
    public float walkCrouchOrLayingDown = 1F;
    public static float FOV = 120;
    public static float FOVstandard;
    public static float Aspect;
    public static float zNear = 0.1F;
    public static float zFar = 1000F;
    public static float yawn = 0;
    
    /**
    * The Walk animation of the player.
  	* @param base
  	*/
  	public void walkAnimation(EntityLivingBase base)
  	{
  		if(base.fallTimer == 0 && base.jumpTimer == 0)
  		{
  		if(MiystEngine.miystengine.currentScreen == null)
  		{
  		if(((EntityPlayer)base).isCrouching()){walkCrouchOrLayingDown=0.2F;}
  		else if(((EntityPlayer)base).isLayingdown()){walkCrouchOrLayingDown=0.01F;}
  		else if(walkCrouchOrLayingDown != 1&&!((EntityPlayer)base).isCrouching()&&!((EntityPlayer)base).isLayingdown()){walkCrouchOrLayingDown=1F;}
  		if(ScreenEffects.walkType == 1){drunkWalk = 10;}
  		else if(ScreenEffects.walkType == 2&&walkAnimation>0.01F){drunkWalk=10;}
  		else if(ScreenEffects.walkType == 3&&walkAnimation<-0.01F){drunkWalk=10;}else{drunkWalk=0;}
  		if(!incdecWalkAnimation){walkAnimation-= 0.01F;}
  		if( incdecWalkAnimation){walkAnimation+= 0.01F;}
  		if(!((EntityPlayer)base).isRunning()&&walkAnimation>0.08F+(drunkWalk/100)){incdecWalkAnimation=false;}
  		if(!((EntityPlayer)base).isRunning()&&walkAnimation<-(0.08F+(drunkWalk/100))){incdecWalkAnimation=true;}
  		if(((EntityPlayer)base).isRunning()&&walkAnimation>0.1F+(drunkWalk/100)){incdecWalkAnimation=false;}
  		if(((EntityPlayer)base).isRunning()&&walkAnimation<-(0.1F+(drunkWalk/100))){incdecWalkAnimation=true;}
  		}
  		this.walkingAnimation = (float) ((this.standUpAnimation+(this.walkAnimation*this.walkCrouchOrLayingDown))*((base.movespeedX+base.movespeedZ)*4));
  		}
  	}
      
      /**
       * Animation for falling and then getting up.
       */
      public float standUpAnimation = 0;
      public int fallAnimationTimer = 0;  
      
      public void getUpAnimation(EntityLivingBase base)
      {
      	if(base.standUpAnimation)
  		{
      		++fallAnimationTimer;
      		if(fallAnimationTimer<800)
      		{
      			for(int i=0;i<30;++i)
      			{
      				standUpAnimation -= 0.0001F;
      			}
      		}
      		else if(fallAnimationTimer>5000)
      		{
      			for(int i=0;i<55;++i)
      			{
      				if(standUpAnimation <0F)
      				{
      					standUpAnimation += 0.000001F*i;
      				}
      				else
      				{	
      					base.standUpAnimation=false;
      					fallAnimationTimer=0;
      					continue;
      				}
      			}
      		}
  		}	
      }
      
      public float getBreathAnimation()
      {
    	  return this.breathAnimation;
      }
      
      public float mouseSensitivity = 0.5F;
      
      public static void creatWindow()
      {
    	  MiystEngine.miystengine.fbo = new Fbo(MiystEngine.miystengine.displayWidth, MiystEngine.miystengine.displayHeight);
    	  MiystEngine.miystengine.fbo_Out = new Fbo(MiystEngine.miystengine.displayWidth, MiystEngine.miystengine.displayHeight, Fbo.DEPTH_TEXTURE);
      }
   
      public void updateCameraAndRender(float ticker)
      {    
          if(EntityRenderer.shadowShader != null  && EntityRenderer.nmr != null && EntityRenderer.shadowMasterRenderer != null)
	      {
      		  EntityRenderer.shadowMasterRenderer.render(EntityRenderer.light.get(0), EntityRenderer.nmr.ObjectsOwnTexture);
	      }
          
    	  if (this.ttw.theWorld != null)
          { 
	    	  GL11.glPushMatrix(); 
	    	  EntityRenderer.buffer.bindRefractionFrameBuffer();
	          MiystEngine.miystengine.entityRenderer.refraction();
	          EntityRenderer.buffer.unbindCurrentFrameBuffer();
	          GL11.glPopMatrix();
          }
    	  
    	  MiystEngine.miystengine.fbo.bindFrameBuffer();
          GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
          
          if(EntityRenderer.skyColor != null)
          {
        	  GL11.glClearColor(EntityRenderer.skyColor[0], EntityRenderer.skyColor[1], EntityRenderer.skyColor[2], EntityRenderer.skyColor[3]);
          }
          
          boolean isDisplayActive = Display.isActive();
          if (!isDisplayActive && (!Mouse.isButtonDown(1)))
          {
              if (MiystEngine.getSystemTime() - ttw.entityRenderer.prevFrameTime > 500L)
              {
                  this.ttw.displayInGameMenu();
              }
          }
          else
          {
        	  ttw.entityRenderer.prevFrameTime = MiystEngine.getSystemTime();
          }
          
	          if (this.ttw.inGameHasFocus && isDisplayActive)
	          {
	              float sens = this.mouseSensitivity;
	              float var4 = sens * sens * sens * 8.0F;
	              this.ttw.thePlayer.setAngles((float)Mouse.getDX() * var4, (float)Mouse.getDY() * var4 * RefreshShaderKeybinds.reverseMouse);
	          }

              ScaledResolution sr = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
              int X = Mouse.getX() * sr.getScaledWidth() / this.ttw.displayWidth;
              int Z = sr.getScaledHeight() - Mouse.getY() * sr.getScaledHeight() / this.ttw.displayHeight - 1;

              if (this.ttw.theWorld != null)
              {  	
            	ttw.entityRenderer.renderWorld(ticker);	
         		this.damage.renderScreen(this.ttw.displayWidth, this.ttw.displayHeight);
              	if (this.ttw.currentScreen != null)
                {
                    this.useFilter = false;
                }
              	else
              	{
              		this.useFilter = true;
              	}
              	
              	if(this.ttw.ingameGUI != null)
              	{
              		this.ttw.ingameGUI.renderGameOverlay(ticker);  
                    ScreenEffectsGui screen = new ScreenEffectsGui();
                    screen.renderScreen((int)(this.ttw.displayWidth / 3.8F), (int)(this.ttw.displayHeight / 3.8F));   
              	}
              	
                if(ttw.entityRenderer.passingTime.secondspassed)
                {
                	ttw.entityRenderer.passingTime.secondspassed = false;
                }
              }
              else
              {
              	 GL11.glViewport(0, 0, this.ttw.displayWidth, this.ttw.displayHeight);
                 GL11.glMatrixMode(GL11.GL_PROJECTION);
                 GL11.glLoadIdentity();
                 GL11.glMatrixMode(GL11.GL_MODELVIEW);
                 GL11.glLoadIdentity();
                 this.setupOverlayRendering();
              }
              GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
              try
              {
            	 if(this.ttw.currentScreen != null)
            	 {
            	 	this.ttw.currentScreen.drawScreen(X, Z);
            	 }
              }
              catch (Throwable var12)
              {
            	  var12.printStackTrace();
                  System.out.println("[Client thread/ERROR]: " + var12.getMessage());
              }
           
          MiystEngine.miystengine.fbo.unbindFrameBuffer();
          
          MiystEngine.miystengine.fbo.resolveToFBO(MiystEngine.miystengine.fbo_Out);
          
          MiystEngine.miystengine.fbo.framebufferRender(0,0,MiystEngine.miystengine.displayWidth,MiystEngine.miystengine.displayHeight,MiystEngine.miystengine.fbo_Out.getColourTexture());
      }

      private ScreenEffects damage = new ScreenEffects();
      private int loadScreen = 0;
      public boolean useFilter = false;

      public void setupOverlayRendering()
      {
      	 ScaledResolution scale = new ScaledResolution(this.ttw, this.ttw.displayWidth, this.ttw.displayHeight);
         GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
         GL11.glMatrixMode(GL11.GL_PROJECTION);
         GL11.glLoadIdentity();
         GL11.glOrtho(0.0D, scale.getScaledWidth_double(), scale.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
         GL11.glMatrixMode(GL11.GL_MODELVIEW);
         GL11.glLoadIdentity();
         GL11.glTranslatef(0F, 0F, -2000F);
      }
      
      public static int armLeftID = -1;
      public static int armRightID = -1;
      public static int itemEquipt = -1;
      private boolean pickingUp = false;
      
      public void setCamposAndPitch(float ticker, EntityLivingBase base, float X,float Y,float Z,float Pitch,float ZPitch)
      {
    	  if(this.itemEquipt == -1)
    	  {
    		  for(int i =0;i<ObjectRenderer.ObjectsOwnTexture.size();++i)
    	  	  {
    		  	if(ObjectRenderer.ObjectsOwnTexture.get(i).entity != null && ObjectRenderer.ObjectsOwnTexture.get(i).entity.pickedUp) 
    		  	{
    		  		this.itemEquipt = i;
    		  		this.pickingUp = true;
    		  	}
    	  	  }
    	  }
    	  
    	  if(ObjectRenderer.ObjectsOwnTexture != null && this.itemEquipt > -1 && ObjectRenderer.ObjectsOwnTexture.size() > this.itemEquipt && ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity != null && ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.pickedUp)
    	  {
    		  ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.rotY = -MiystEngine.miystengine.thePlayer.rotationYaw + 90 + (-MiystEngine.miystengine.entityRenderer.camera.breathAnimation) + (MiystEngine.miystengine.entityRenderer.camera.breathAnimation / 3F); 
    		  ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.rotZ = MiystEngine.miystengine.thePlayer.rotationPitch + (-MiystEngine.miystengine.entityRenderer.camera.breathAnimation2) + (MiystEngine.miystengine.entityRenderer.camera.breathAnimation2 / 3F); 
    		  ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.position.x = X;
    		  
    		  if(this.pickingUp && ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.position.y > (Y - (Y / 2)) && ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.position.y < Y)
    		  {
    			  ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.position.y += 0.01F;
    		  }
    		  else
    		  {
    			  this.pickingUp = false;
    			  ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.position.y = Y;
    		  }
    		  
    		  ObjectRenderer.ObjectsOwnTexture.get(this.itemEquipt).entity.position.z = Z;  
    		  if(armLeftID > -1 && ObjectRenderer.BodyParts.size() > armLeftID + 1)
        	  { 
    		  	ObjectRenderer.BodyParts.get(armLeftID).entity.position.y = 300F;
    		  	ObjectRenderer.BodyParts.get(armRightID).entity.position.y = 300F;
        	  }
    	  }
    	  else if(ObjectRenderer.BodyParts.size() > armLeftID + 1)
    	  {
    		  ObjectRenderer.BodyParts.get(armRightID).entity.position.x = X;
    		  ObjectRenderer.BodyParts.get(armRightID).entity.position.y = Y - 0.5F;
    		  ObjectRenderer.BodyParts.get(armRightID).entity.position.z = Z;
    		  this.pickingUp = false;
    		  this.itemEquipt = -1;
    	 }
    	 
    	 if(ObjectRenderer.BodyParts.size() > 0 && armLeftID > -1)
    	 {
   		  	ObjectRenderer.BodyParts.get(armLeftID).entity.position.x = X;
   		  	ObjectRenderer.BodyParts.get(armLeftID).entity.position.y = Y - 0.5F;
   		  	ObjectRenderer.BodyParts.get(armLeftID).entity.position.z = Z; 
    	 }
    	 
    	 //Rotate the Audio around the player when the player is rotating so the surround sound works as the way it should
    	 for(int i = 0;i < AudioMaster.source.size();++i)
    	 {
    		double YY = (-MiystEngine.miystengine.thePlayer.rotationYaw) * 0.00583F; 
    		double YY2; 
    		if(MiystEngine.miystengine.thePlayer.rotationYaw + 270F > 360)
    		{
    			YY2 = (-(MiystEngine.miystengine.thePlayer.rotationYaw + 270F - 360F)) * 0.00583F; 
    		}
    		else
    		{
    			YY2 = (-(MiystEngine.miystengine.thePlayer.rotationYaw + 270F)) * 0.00583F; 
    		}
    		
    		float distance = AudioMaster.source.get(i).getSource().getDistance(X, Z);
    		float x = ((float)Math.cos(3 * YY) * 0.8F) * distance;
    		float z = ((float)Math.sin(3 * YY) * 0.8F) * distance;
    		
    		float x2 = ((float)Math.cos(3 * YY2) * 0.8F) * distance;
    		float z2 = ((float)Math.sin(3 * YY2) * 0.8F) * distance;
    		
    		AudioMaster.source.get(i).getSource().setPosition2(X + ((x + x2) / 2F), AudioMaster.source.get(i).getSource().getY(), Z + ((z + z2) / 2F));
    		AudioMaster.updateListenerPosition(X,Y,Z);
    	 }
    	 //End
    	 
    	  camX = X;
    	  camY = Y;
    	  camZ = Z;
    	  pitch = Pitch;
    	  zPitch = ZPitch;
    	  

    	  this.yawn = base.prevRotationYaw + (base.rotationYaw - base.prevRotationYaw) * ticker + 180F;
    	  float p = base.prevRotationPitch + (base.rotationPitch - base.prevRotationPitch) * ticker;
    	  
    	  if(base.layingDown && p > 35)
    	  {
    		  if(base.layingDown && (p < 36 || base.rotationPitch  < 36))
        	  {
    			  base.rotationPitch = 35;
    		  }
    		  else if(base.layingDown && p > 40)
        	  {
    			  base.rotationPitch -= 1;
    			  this.pitch = base.rotationPitch;
        	  }
    	  }
    	  else if(p > 70 && !base.layingDown)
    	  {
    		  this.pitch = 70;  
    	  }
    	  else
    	  {
    		  this.pitch = p;
    	  }
      }
      
      
      public void walkAnimationWhenMoved(EntityLivingBase base)
      {
    	  if(((EntityPlayer)base).hasMoved)
			{
				if(((EntityPlayer)base).hasMoved)
				{
					this.walkAnimation((EntityPlayer)base);
				}
				else if(this.walkAnimation>0.01F)
				{
					this.walkAnimation-= 0.01F;
				}
				else if(this.walkAnimation<-0.01F)
				{
					this.walkAnimation+= 0.01F;
				}
			}
      }
      
      public void setCamY(float Y)
      {
    	   camY = Y;
      }
    
      public void pitch(boolean set)
      {
    	  if(set && pitch != oldPitch)
    	  {
    		  oldPitch = pitch;
    	  }
    	  pitch = -pitch;  
      }

      
      public Matrix4f createTransformationMatrixAnimated(float animatedX,float animatedY,float animatedZ,Vector3f translation,float y, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	        Vector3f translations = new Vector3f(translation.x,translation.y+y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.translate(new Vector3f(animatedX,animatedY,animatedZ), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
      
      public Matrix4f createTransformationMatrixXYZ(Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
      
      public Matrix4f createTransformationMatrixMotionZ(float rotation, Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rotation), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
      
      public Matrix4f createTransformationMatrixMotionX(float rotationX, Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rotationX), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
     
      public Matrix4f createTransformationMatrixMotionY(float rotation, Vector3f translationRotated,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        Vector3f translations = new Vector3f(translation.x,translation.y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rotation), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.translate(translationRotated, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
    
      public Matrix4f createTransformationMatrix(Vector3f translation,float y, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	        Vector3f translations = new Vector3f(translation.x,translation.y+y,translation.z);
	        Matrix4f.translate(translations, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	  }
	   
      public Matrix4f createProjectionMatrix()
      {
    	Matrix4f projectionMatrix = new Matrix4f();
  		float aspectRatio = (float) Display.getWidth() / (float) Display.getHeight();
  		float y_scale = (float) ((1f / Math.tan(Math.toRadians(FOV / 2f))));
  		float x_scale = y_scale / aspectRatio;
  		float frustum_length = Camera.zFar - Camera.zNear;

  		projectionMatrix.m00 = x_scale;
  		projectionMatrix.m11 = y_scale;
  		projectionMatrix.m22 = -((Camera.zFar + Camera.zNear) / frustum_length);
  		projectionMatrix.m23 = -1;
  		projectionMatrix.m32 = -((2 * Camera.zNear * Camera.zFar) / frustum_length);
  		projectionMatrix.m33 = 0;
  		return projectionMatrix;
      }
      
      public Matrix4f createNew(Matrix4f matrix)
      {
    	  matrix.setIdentity();
    	  return matrix;
      }
      
      public Matrix4f createTransformationMatrix(Matrix4f matrix,Vector3f translation, float rx, float ry,float rz, Vector3f scale) 
	  {
    	  Matrix4f.translate(translation, matrix, matrix);
    	  Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
    	  Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
    	  Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
    	  Matrix4f.scale(scale, matrix, matrix);
	      return matrix;
	   }
      
	  public Matrix4f createTransformationMatrix(Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	        Matrix4f.translate(translation, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	   }
	  
	  public Matrix4f createTransformationMatrixRolling(float rotX,Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	        Matrix4f.translate(translation, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        
	        Matrix4f.rotate((float) Math.toRadians(rotX), new Vector3f(0,1,0), matrix, matrix);
		      
	        
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	   }
	  
	  public Matrix4f createTransformationMatrixPlane(Vector3f translation, float rx, float ry,float rz, float scale) 
	  {
	        Matrix4f matrix = new Matrix4f();
	        matrix.setIdentity();
	        EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	        Matrix4f.translate(translation, matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(ry), new Vector3f(0,1,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rx), new Vector3f(1,0,0), matrix, matrix);
	        Matrix4f.rotate((float) Math.toRadians(rz), new Vector3f(0,0,1), matrix, matrix);
	        Matrix4f.scale(new Vector3f(scale,scale,scale), matrix, matrix);
	        return matrix;
	   }
		
	  public Matrix4f createViewMatrix() 
	  {
	       Matrix4f matrix = new Matrix4f();
	       matrix.setIdentity();
	       Matrix4f.rotate((float)Math.toRadians(zPitch), new Vector3f(0, 0, 1), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(pitch - this.getBreathAnimation()), new Vector3f(1, 0, 0), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(yawn), new Vector3f(0, 1, 0), matrix, matrix);
	       Matrix4f.translate(new Vector3f(-camX,-camY,-camZ), matrix, matrix);
	       return matrix;
	  }
	  
	  public Matrix4f createViewMatrixTerrain() 
	  {
	       Matrix4f matrix = new Matrix4f();
	       EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	       matrix.setIdentity();
	       Matrix4f.rotate((float)Math.toRadians(zPitch), new Vector3f(0, 0, 1), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(pitch - this.getBreathAnimation()), new Vector3f(1, 0, 0), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(yawn), new Vector3f(0, 1, 0), matrix, matrix);
	       Matrix4f.translate(new Vector3f(-camX,-camY,-camZ), matrix, matrix);
	       return matrix;
	  }
	  
	  public Matrix4f createViewMatrixReflection() 
	  {
	       Matrix4f matrix = new Matrix4f();
	       EntityLivingBase var2 = MiystEngine.miystengine.renderViewEntity;
	       matrix.setIdentity();
	       Matrix4f.rotate((float)Math.toRadians(zPitch), new Vector3f(0, 0, 1), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians((pitch - this.getBreathAnimation())), new Vector3f(1, 0, 0), matrix, matrix);
	       Matrix4f.rotate((float)Math.toRadians(yawn + 180F), new Vector3f(0, 1, 0), matrix, matrix);
	       Matrix4f.translate(new Vector3f(-camX,-camY,-camZ), matrix, matrix);
	       return matrix;
	  }
	  
	  public static Matrix4f createViewMatrixParticles() 
	  {
			Matrix4f viewMatrix = new Matrix4f();
			viewMatrix.setIdentity();
			Matrix4f.rotate((float) Math.toRadians(pitch), new Vector3f(1, 0, 0), viewMatrix, viewMatrix);
			Matrix4f.rotate((float) Math.toRadians(yawn), new Vector3f(0, 1, 0), viewMatrix, viewMatrix);
			Vector3f cameraPos = new Vector3f(camX,camY,camZ);
			Vector3f negativeCameraPos = new Vector3f(-cameraPos.x,-cameraPos.y,-cameraPos.z);
			Matrix4f.translate(negativeCameraPos, viewMatrix, viewMatrix);
			return viewMatrix;
		}
	    
		public Matrix4f projectionMatrix()
		{
			EntityRenderer.projectionMatrix = new Matrix4f();
			float aspectRatio = Aspect;
	        float y_scale = (float) ((1f / Math.tan(Math.toRadians(FOV / 2f))) * aspectRatio);
	        float x_scale = y_scale / aspectRatio;
	        float frustum_length = zFar - zNear;
	        EntityRenderer.projectionMatrix.m00 = x_scale;
	        EntityRenderer.projectionMatrix.m11 = y_scale;
	        EntityRenderer.projectionMatrix.m22 = -((zFar + zNear) / frustum_length);
	        EntityRenderer.projectionMatrix.m23 = -1;
	        EntityRenderer.projectionMatrix.m32 = -((2 * zNear * zFar) / frustum_length);
	        EntityRenderer.projectionMatrix.m33 = 0;
	        return EntityRenderer.projectionMatrix;
		}

}