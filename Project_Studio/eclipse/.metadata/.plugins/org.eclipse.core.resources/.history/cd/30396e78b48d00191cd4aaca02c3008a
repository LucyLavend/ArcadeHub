package nl.thestructureworld.client.shaders.normal;

import java.util.ArrayList;
import java.util.List;
import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.entity.ModelBasic;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListBoneMatrix;
import nl.thestructureworld.client.shaders.Light;
import nl.thestructureworld.client.shaders.ShaderProgram;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL20;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

public class SkeletalAnimationShader extends NormalMappingShader
{

	private static final String VERTEX_FILE = FileBasicJava.sourceShaders+"skeleton/vertexshader.txt";
	private static final String FRAGMENT_FILE = FileBasicJava.sourceShaders+"skeleton/fragmentshader.txt";	

	private int location_transformationMatrixArray[];
	public List<ArrayListBoneMatrix> boneMatrix = new ArrayList<ArrayListBoneMatrix>();
	
	private static final int MAX_LIGHTS = 8;	
	private int location_hasNormal;
	private int location_transformationMatrix;
	private int location_projectionMatrix;
	private int location_viewMatrix;
	private int location_lightPosition[];
	private int location_lightColour[];
	private int location_attenuation[];
	private int location_shineDamper;
	private int location_reflectivity;
	private int location_skyColour;
	private int location_offset;
	private int location_plane;
	private int location_rocksTexture;
	private int location_plantsTexture;
	private int location_treesTexture;
	private int location_singleObjectsTexture;
	private int location_reflection;
	public int location_normalMap;
	public int location_maxLights;
	private int location_fogDensity;
	private int location_fogGradient;
	private int location_usefakelightning;
	private int location_Minmaxlight;
	private int location_addColor;
	private int location_addlight;
	private int location_distancefromobject;
	private int location_skipAlpha;
	private int location_Alpha;
	private int location_switchTextureUnits;
	private int location_isPastMidDay;
	protected int location_useAlphaFromTexture;
	protected int location_materialType;
	protected int location_loadProgression;
	protected int location_moveFactor;
	protected int location_timerNumber;
	private int location_NearFar;
	
	public SkeletalAnimationShader() 
	{
		super();
		vertexShaderID = loadShader(VERTEX_FILE,GL20.GL_VERTEX_SHADER);
	    fragmentShaderID = loadShader(FRAGMENT_FILE,GL20.GL_FRAGMENT_SHADER);   
	}

	@Override
	protected void bindAttributes() 
	{
		super.bindAttribute(0, "position");
		super.bindAttribute(1, "textureCoordinates");
		super.bindAttribute(2, "normal");
	}

	@Override
	protected void getAllUniformLocations() 
	{
		location_loadProgression = super.getUniformLocation("loadProgression");
		location_materialType = super.getUniformLocation("materialType");
		location_skipAlpha = super.getUniformLocation("skipAlpha");
		location_distancefromobject = super.getUniformLocation("distancefromobject");
		location_addlight = super.getUniformLocation("addLight");
		location_hasNormal = super.getUniformLocation("hasNormal");
		location_transformationMatrix = super.getUniformLocation("transformationMatrix");
		location_projectionMatrix = super.getUniformLocation("projectionMatrix");
		location_viewMatrix = super.getUniformLocation("viewMatrix");
		location_shineDamper = super.getUniformLocation("shineDamper");
		location_reflectivity = super.getUniformLocation("reflectivity");
		location_skyColour = super.getUniformLocation("skyColour");
		location_offset = super.getUniformLocation("offset");
		location_plane = super.getUniformLocation("plane");
		location_fogDensity = super.getUniformLocation("fogDensity");
		location_fogGradient = super.getUniformLocation("fogGradient");
		location_rocksTexture = super.getUniformLocation("rocks");
		location_plantsTexture = super.getUniformLocation("plants");
		location_treesTexture = super.getUniformLocation("trees");
		location_singleObjectsTexture = super.getUniformLocation("singleObjects");
		location_normalMap = super.getUniformLocation("normalMap");
		location_maxLights = super.getUniformLocation("maxLights");
	    location_usefakelightning = super.getUniformLocation("usefakelightning");
	    location_Minmaxlight = super.getUniformLocation("minmaxlight"); 
	    location_addColor = super.getUniformLocation("addColor"); 
	    location_Alpha = super.getUniformLocation("alpha"); 
	    location_useAlphaFromTexture = super.getUniformLocation("useAlpha"); 
	    location_switchTextureUnits = super.getUniformLocation("switchTextureUnits"); 
	    location_isPastMidDay = super.getUniformLocation("timeAndTemp");
	    location_moveFactor = super.getUniformLocation("moveFactor");
	    location_timerNumber = super.getUniformLocation("timerNumber");
	    location_lightPosition = new int[MAX_LIGHTS];
		location_lightColour = new int[MAX_LIGHTS];
		location_attenuation = new int[MAX_LIGHTS];
		location_NearFar = super.getUniformLocation("NearFar"); 
		location_reflection = super.getUniformLocation("reflection"); 
		
		for(int i=0;i<EntityRenderer.light.size();i++)
		{
			location_lightPosition[i] = super.getUniformLocation("lightPosition[" + i + "]");
			location_lightColour[i] = super.getUniformLocation("lightColour[" + i + "]");
			location_attenuation[i] = super.getUniformLocation("attenuation[" + i + "]");
		}
	 
		location_transformationMatrixArray = new int[50];

		for(int l = 0;l < 50;++l)
		{
			location_transformationMatrixArray[l] = super.getUniformLocation("transformationMatrixArray[" + l + "]");
		}		
	}
	
	public void loadTransformationMatrix(ModelBasic model, Matrix4f matrix)
	{
		super.loadMatrix(location_transformationMatrix, matrix);
		GL11.glCallList(model.glListID); 
		if(this.boneMatrix.size() < 51)
		{
			this.boneMatrix.add(new ArrayListBoneMatrix(matrix.m30,matrix.m31,matrix.m32,matrix.m33,matrix.m00,matrix.m01,matrix.m02,matrix.m03,matrix.m10,matrix.m11,matrix.m12,matrix.m13,matrix.m20,matrix.m21,matrix.m22,matrix.m23));
		}
	}
	
	public void renderBones(ModelBasic model)
	{
		for(int l = 0; l < this.boneMatrix.size();++l)
		{
			Matrix4f matrix = new Matrix4f();
		    matrix.setIdentity();
		    matrix.m30 = this.boneMatrix.get(l).x;
		    matrix.m31 = this.boneMatrix.get(l).y;
		    matrix.m32 = this.boneMatrix.get(l).z;
		    matrix.m33 = this.boneMatrix.get(l).w;
		    
		    matrix.m00 = this.boneMatrix.get(l).r1;
		    matrix.m01 = this.boneMatrix.get(l).r2;
		    matrix.m02 = this.boneMatrix.get(l).r3;
		    matrix.m03 = this.boneMatrix.get(l).r4;
		    
		    matrix.m10 = this.boneMatrix.get(l).r5;
		    matrix.m11 = this.boneMatrix.get(l).r6;
		    matrix.m12 = this.boneMatrix.get(l).r7;
		    matrix.m13 = this.boneMatrix.get(l).r8;
		    
		    matrix.m20 = this.boneMatrix.get(l).r9;
		    matrix.m21 = this.boneMatrix.get(l).r10;
		    matrix.m22 = this.boneMatrix.get(l).r11;
		    matrix.m23 = this.boneMatrix.get(l).r12;

			super.loadMatrix(location_transformationMatrix, matrix);
			GL11.glCallList(model.glListID); 
		}
	}
	
	public void timeAndTemperature(float pastMidDay,float temperature,float useColor)
    {
		super.load3FVector(location_isPastMidDay, new Vector3f(pastMidDay,temperature,useColor));	
    }
	
	/**
	 * Switch between Texture Units
	 * @param t
	 */
	public void switchT(int t)
    {
    super.loadInt(location_switchTextureUnits, t);	
    }
	
	public void hasNormal(int hasNormals)
    {
    super.loadInt(location_hasNormal, hasNormals);	
    }
	
	public void connectTextureUnits()
	{
		super.loadInt(location_reflection, 22);
		super.loadInt(location_rocksTexture, 21);
		super.loadInt(location_plantsTexture, 20);
		super.loadInt(location_treesTexture, 19);
		super.loadInt(location_singleObjectsTexture, 11);
		super.loadInt(location_normalMap, 10);	
	}
	
	public void loadProgression(float progression)
	{
		super.loadFloat(location_loadProgression, progression);
	}
	
	public void loadWaveAnimation(float wave)
	{
		super.loadFloat(location_moveFactor, wave);
	}
	
	public void loadTimerNumber(Vector3f vector3f)
	{
		super.load3FVector(location_timerNumber, vector3f);
	}
	
	public void loadMaterial(int type)
	{
		super.loadInt(location_materialType, type);
	}
	
	public void loadClipPlane(Vector4f plane)
	{
		super.loadVector(location_plane, plane);
	}

	public void location_Alpha(float t)
    {
        super.loadFloat(location_Alpha, t);
    }
	
	public void addLight(float t)
    {
        super.loadFloat(location_addlight, t);
    }
	
	public void loadSkipAlpha(float i)
    {
        super.loadFloat(location_skipAlpha, i);
    }
	
	public void addColor(Vector3f minmaxlight)
    {
        super.load3FVector(location_addColor, minmaxlight);
    }
	
	public void loadMinmaxlight(Vector4f minmaxlight)
    {
        super.load4FVector(location_Minmaxlight, minmaxlight);
    }
	
	public void loadOffset(float x, float y, float i, float j)
	{
		super.load4FVector(location_offset, new Vector4f(x,y,i,j));
	}
	
	public void loadSkyColor(float[] rgb,float fogDensity, float fogGradient)
	{
			super.loadVector(location_skyColour,new Vector4f(rgb[0],rgb[1],rgb[2],1F));
	    	super.loadFloat(location_fogDensity,fogDensity);
	    	super.loadFloat(location_fogGradient,fogGradient);
	}
	
	public void loadShineVariables(float damper,float reflectivity)
	{
		super.loadFloat(location_shineDamper, damper);
		super.loadFloat(location_reflectivity, reflectivity);
	}
	
	public void loadTransformationMatrix(Matrix4f matrix)
	{
		super.loadMatrix(location_transformationMatrix, matrix);
	}
	
	public void loadLights(List<Light> lights, Matrix4f viewMatrix)
	{
		super.loadInt(location_maxLights, lights.size());
		for(int i=0;i<lights.size();i++)
		{
			if(i<lights.size() && location_lightPosition != null)
			{
				super.loadVector(location_lightPosition[i], getEyeSpacePosition(lights.get(i), viewMatrix));
				super.loadVector(location_lightColour[i], lights.get(i).getColour());
				super.loadVector(location_attenuation[i], lights.get(i).getAttenuation());
			}
		}
	}
	
	public void useAlphaFromTexture(int f)
	{
		super.loadInt(location_useAlphaFromTexture, f);	
	}
	
    public void loadFakeLightning(boolean f)
	{
	   super.loadBoolean(location_usefakelightning, f);	
	}
	
    public void loadViewMatrix(Matrix4f viewMatrix)
	{
		super.loadMatrix(location_viewMatrix, viewMatrix);
	}
	
	public void loadProjectionMatrix(Matrix4f projection)
	{
		super.loadMatrix(location_projectionMatrix, projection);
	}
	
	public Vector3f getEyeSpacePosition(Light light, Matrix4f viewMatrix)
	{
		Vector3f position = light.getPosition();
		Vector4f eyeSpacePos = new Vector4f(position.x,position.y, position.z, 1f);
		Matrix4f.transform(viewMatrix, eyeSpacePos, eyeSpacePos);
		return new Vector3f(eyeSpacePos);
	}

	public void loadNearFar(Vector3f vector3f)
	{
		super.load3FVector(location_NearFar, vector3f);
	}
}
