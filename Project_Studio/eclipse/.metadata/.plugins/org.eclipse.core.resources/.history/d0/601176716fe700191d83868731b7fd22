package nl.thestructureworld.client.renderer.entity;

import java.util.List;

import nl.thestructureworld.client.FileBasicJava;
import nl.thestructureworld.client.TheStructureWorld;
import nl.thestructureworld.client.audio.AudioMaster;
import nl.thestructureworld.client.audio.Source;
import nl.thestructureworld.client.renderer.EntityRenderer;
import nl.thestructureworld.client.renderer.basicmodels.ArrayListOBJModels;
import nl.thestructureworld.client.renderer.entity.arrays.ArrayListHitboxArray;
import nl.thestructureworld.client.renderer.entity.bulletsandgrenades.BulletRenderer;
import nl.thestructureworld.client.renderer.entity.bulletsandgrenades.GunRenderer;
import nl.thestructureworld.client.renderer.terrain.Terrain;
import nl.thestructureworld.client.shaders.CameraAndPlayerAnimations;
import nl.thestructureworld.client.shaders.normal.NormalMappingShader;
import nl.thestructureworld.client.water.WaterRender;
import nl.thestructureworld.entity.EntityPlayer;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;
 
public class EntityCrates extends BasicEntityRender
{
	private boolean inWater = false;
	private int timer = 0;
	private float floatAnimation = 0.0001F;
	private float floatAnimationUpDown = 0.0000005F;
	private boolean startX = false;
	private int waveY = 0;
	private boolean startZ = false;
	private int floatUpTimer = 0;
	private float weightOfObject = 75.0F;
	private float hitbox = 3F;
    private float oldYPosition = 0;
	private float moveWaterX,moveWaterZ;
	private boolean smallBox = false;
	private int crate_basic;
	private int crate_frame;
	private boolean renderFrame = false;
	private String name;
	private int lowT = -1;
	
	private int[] planks;
	private int[] planksSide;
	private int[] planksSide1;
	private int[] planksSide2;
	private int[] planksSide3;
	
	public EntityCrates(String lowModel,String texture, String modelID,float[] textureCoords,float[] position,float reflecY, float rotX, float rotY, float rotZ,float scale) 
    {
		super(new ModelBasic(false,0,10,2F,2F,"objectsandterrain/"+texture,new Vector4f(1F,2.5F,0F,0F),modelID,true,false),position,rotX,rotY,rotZ,reflecY,scale);
		this.textureCoords = textureCoords;
		this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.reflecY = reflecY;
        this.scale = scale;
        this.model.shineDamper = 2F;
        this.model.skipAlpha = 0.5F;
    	this.rotX = -this.floatAnimation*30*200;
		this.rotZ = -this.floatAnimation*30*200;
		if(this.rand.nextInt(2)==0){this.startX = true;}
		this.waveY=this.rand.nextInt(50);
		if(this.rand.nextInt(2)==0){this.startZ = true;}
		this.weightOfObject = 175F;
		this.name = texture;
		this.materialType = 9;
		
	    this.lowT = TheStructureWorld.TheStructureWorld.getTextureManager().loadTexture2(FileBasicJava.source+"/The Structure World/objectsandterrain/" + this.name + "_low.png");
	    if(!name.contains("military"))
	    {
		    this.planks = new int[]{0,0,0,0,0};
		    this.planksSide = new int[]{0,0,0,0,0};
		    this.planksSide1 = new int[]{0,0,0,0,0};
		    this.planksSide2 = new int[]{0,0,0,0,0};
		    this.planksSide3 = new int[]{0,0,0,0,0};
		    
	    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/crate_frame"));   
	    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/crate_LOD"));
	    	
		    for(int i =0; i < 5;++i)
		    {
		    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/planks/crate_top_" + i));    	
		    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/planks/crate_side_" + i));    	
		    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/planks/crate_side1_" + i));    	
		    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/planks/crate_side2_" + i));    	
		    	EntityRenderer.OBJModelList.add(new ArrayListOBJModels("crate/planks/crate_side3_" + i));    	
		    	
		    	for(int i2 = 0;i2 < EntityRenderer.OBJModelList.size();++i2)
		    	{
		    		if(EntityRenderer.OBJModelList.get(i2).nameOBJ.contains("crate_top_" + i))
		    		{
		    			this.planks[i] = EntityRenderer.OBJModelList.get(i2).idModel;
		    		}
		    		if(EntityRenderer.OBJModelList.get(i2).nameOBJ.contains("crate_side_" + i))
		    		{
		    			this.planksSide[i] = EntityRenderer.OBJModelList.get(i2).idModel;
		    		}
		    		if(EntityRenderer.OBJModelList.get(i2).nameOBJ.contains("crate_side1_" + i))
		    		{
		    			this.planksSide1[i] = EntityRenderer.OBJModelList.get(i2).idModel;
		    		}
		    		if(EntityRenderer.OBJModelList.get(i2).nameOBJ.contains("crate_side2_" + i))
		    		{
		    			this.planksSide2[i] = EntityRenderer.OBJModelList.get(i2).idModel;
		    		}
		    		if(EntityRenderer.OBJModelList.get(i2).nameOBJ.contains("crate_side3_" + i))
		    		{
		    			this.planksSide3[i] = EntityRenderer.OBJModelList.get(i2).idModel;
		    		}
		    	}
		    }
		    
			for(int i = 0;i < EntityRenderer.OBJModelList.size();++i)
	    	{
	    		if(EntityRenderer.OBJModelList.get(i).nameOBJ.contains("_LOD"))
	    		{
	    			this.crate_basic = EntityRenderer.OBJModelList.get(i).idModel;
	    		}
	    		else if(EntityRenderer.OBJModelList.get(i).nameOBJ.contains("crate_frame"))
	    		{
	    			this.crate_frame = EntityRenderer.OBJModelList.get(i).idModel;
	    		}
	    	}
    	}
	}
	
	private float hitboxModifier = 1F;
	private float hitBox = 2.5F;
	
	private boolean isInContactWithObject = false;
	private int cancelMovementX = 0;
	private int cancelMovementZ = 0;
	
	 @Override
	 public boolean renderModel(NormalMappingShader shader)
	 {
		 //Start Collider
		if(TheStructureWorld.TheStructureWorld.thePlayer.isRunning())
		{
			this.hitboxModifier = 1.1F;
		}
		else
		{
			this.hitboxModifier = 1F;
		}
		
		if(this.position.y + 1.99F > CameraAndPlayerAnimations.camY 
		&& this.position.y      < CameraAndPlayerAnimations.camY
		&& this.position.x + 0.9F > CameraAndPlayerAnimations.camX
		&& this.position.x - 0.9F < CameraAndPlayerAnimations.camX 
		&& this.position.z + 0.9F > CameraAndPlayerAnimations.camZ 
		&& this.position.z - 0.9F < CameraAndPlayerAnimations.camZ)
		{
			TheStructureWorld.TheStructureWorld.thePlayer.motionX = -TheStructureWorld.TheStructureWorld.thePlayer.motionX;		
			TheStructureWorld.TheStructureWorld.thePlayer.motionZ = -TheStructureWorld.TheStructureWorld.thePlayer.motionZ;
			TheStructureWorld.TheStructureWorld.thePlayer.move(TheStructureWorld.TheStructureWorld.thePlayer.motionX, 0, TheStructureWorld.TheStructureWorld.thePlayer.motionZ, true);
		}
		else if(this.position.y + 2F > CameraAndPlayerAnimations.camY 
		&& this.position.y      < CameraAndPlayerAnimations.camY
		&& this.position.x + 1.1F > CameraAndPlayerAnimations.camX + TheStructureWorld.TheStructureWorld.thePlayer.getMoveX() + TheStructureWorld.TheStructureWorld.thePlayer.getMoveX() 
		&& this.position.x - 1.1F < CameraAndPlayerAnimations.camX + TheStructureWorld.TheStructureWorld.thePlayer.getMoveX() + TheStructureWorld.TheStructureWorld.thePlayer.getMoveX()
		&& this.position.z + 1.1F > CameraAndPlayerAnimations.camZ 
		&& this.position.z - 1.1F < CameraAndPlayerAnimations.camZ)
		{
			TheStructureWorld.TheStructureWorld.thePlayer.cancelMoveX = true;
			TheStructureWorld.TheStructureWorld.thePlayer.movementInput.moveStrafe = 0F;
			TheStructureWorld.TheStructureWorld.thePlayer.movementInput.moveForward = 0F;
			this.collideWithPlayer = true;	
			TheStructureWorld.TheStructureWorld.thePlayer.isInContactWithObject = true;
			this.isInContactWithObject = true;
			this.cancelMovementX = 10000000;
		}
		else if(this.position.y + 2F > CameraAndPlayerAnimations.camY 
		&& this.position.y      < CameraAndPlayerAnimations.camY
		&& this.position.x + 1.1F > CameraAndPlayerAnimations.camX
		&& this.position.x - 1.1F < CameraAndPlayerAnimations.camX 
		&& this.position.z + 1.1F > CameraAndPlayerAnimations.camZ + TheStructureWorld.TheStructureWorld.thePlayer.getMoveZ() + TheStructureWorld.TheStructureWorld.thePlayer.getMoveZ() 
		&& this.position.z - 1.1F < CameraAndPlayerAnimations.camZ + TheStructureWorld.TheStructureWorld.thePlayer.getMoveZ() + TheStructureWorld.TheStructureWorld.thePlayer.getMoveZ())
		{
			TheStructureWorld.TheStructureWorld.thePlayer.cancelMoveZ = true;
			TheStructureWorld.TheStructureWorld.thePlayer.movementInput.moveStrafe = 0F;
			TheStructureWorld.TheStructureWorld.thePlayer.movementInput.moveForward = 0F;
			this.collideWithPlayer = true;	
			TheStructureWorld.TheStructureWorld.thePlayer.isInContactWithObject = true;
			this.isInContactWithObject = true;
			this.cancelMovementZ = 10000000;
		}
		else if(this.isInContactWithObject)
		{
			TheStructureWorld.TheStructureWorld.thePlayer.isInContactWithObject = false;
			TheStructureWorld.TheStructureWorld.thePlayer.extraHeight = 2F;
			this.isInContactWithObject = false;
		}

		//Stop collider
		shader.loadTransformationMatrix(TheStructureWorld.TheStructureWorld.entityRenderer.camera.createTransformationMatrix(new Vector3f(this.getPosition().x,this.getPosition().y-0.4F,this.getPosition().z),this.modelY, this.getRotX(),this.getRotY(), this.getRotZ(), this.getScale()));
		EntityPlayer player = TheStructureWorld.TheStructureWorld.thePlayer;	
	 	if(this.position.z > player.posZ - (3.3F * this.scale) && this.position.z < player.posZ + (3.3F * this.scale) && this.position.y > player.posY - (3.3F * this.scale) && this.position.y < player.posY + (3.3F * this.scale) && this.position.x > player.posX - (3.3F * this.scale) && this.position.x < player.posX + (3.3F * this.scale))
	 	{
	 		GL13.glActiveTexture(GL13.GL_TEXTURE13);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.getModel().textureIDModel512x); 
	 	}
	 	else
	 	{
	 		GL13.glActiveTexture(GL13.GL_TEXTURE13);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D,this.lowT); 
	 	}
	 	
		if(!this.renderFrame && TheStructureWorld.TheStructureWorld.thePlayer.hasMoved)
		{
			if(this.position.y > TheStructureWorld.TheStructureWorld.thePlayer.posY - (14F * this.hitbox) && this.position.y < TheStructureWorld.TheStructureWorld.thePlayer.posY + (14F * this.hitbox) && this.position.z > TheStructureWorld.TheStructureWorld.thePlayer.posZ - (4F * this.hitbox) && this.position.z < TheStructureWorld.TheStructureWorld.thePlayer.posZ + (4F * this.hitbox) && this.position.x > TheStructureWorld.TheStructureWorld.thePlayer.posX - (4F * this.hitbox) && this.position.x < TheStructureWorld.TheStructureWorld.thePlayer.posX + (4F * this.hitbox))
			{
				this.detailedRender = true;
				
			} 
			else
			{
				this.detailedRender = false;
			}
		}
		
		if(name.contains("military_crate"))
		{
			this.detailedRender = false;
		}

		if(this.renderFrame)
		{
			GL11.glCallList(crate_frame);
		}
		else if(this.detailedRender)
		{
			GL11.glCallList(crate_frame);
		    for(int i =0; i < 5;++i)
		    {
		    	if(this.planks[i] != -1)
		    	{
		    		GL11.glCallList(this.planks[i]);
		    	}
		    	shader.loadTransformationMatrix(TheStructureWorld.TheStructureWorld.entityRenderer.camera.createTransformationMatrix(new Vector3f(this.getPosition().x,this.getPosition().y-0.4F,this.getPosition().z),this.modelY, this.getRotX(),this.getRotY(), this.getRotZ(), this.getScale())); 
		    	if(this.planksSide[i] != -1)
		    	{
		    		GL11.glCallList(this.planksSide[i]);
		    	}
		    	if(this.planksSide1[i] != -1)
		    	{
		    		GL11.glCallList(this.planksSide1[i]);
		    	}
		    	if(this.planksSide2[i] != -1)
		    	{
		    		GL11.glCallList(this.planksSide2[i]);
		    	}
		    	if(this.planksSide3[i] != -1)
		    	{
		    		GL11.glCallList(this.planksSide3[i]);
		    	}
		    }
		}
		else
		{
			GL11.glCallList(crate_basic);
		}
		return true;
	}
		
	protected float fallMotion = 0F;
	
	 @Override
	 public void updateRenderer()
	 {
		super.updateRenderer();
		//S
		if(this.cancelMovementX > 0)
		{
			--this.cancelMovementX;
		}
		if(this.cancelMovementZ > 0)
		{
			--this.cancelMovementZ;
		}
		//S
		 if(EntityRenderer.waterList != null && this.position.y < WaterRender.waterHeight - TheStructureWorld.TheStructureWorld.entityRenderer.dayTime)
		 {
			 this.inWater = true; 
		 }
		 else if(this.inWater)
		 {
			 this.inWater = false;
		 }
		 
		 this.inWaterAnimation();
	 }
	 
	//Add hitbox here
	private int wasHitSoundTimer = 0;
	 
	public void updateRenderFPS()
	{
		super.updateRenderFPS();
		if(this.wasHitSoundTimer > 0)
		{
			--this.wasHitSoundTimer;
		}
		for(int id = 0;id<TheStructureWorld.TheStructureWorld.entityRenderer.nmr.bulletRenderList.size();++id)
        {
			BasicEntityRender entity = TheStructureWorld.TheStructureWorld.entityRenderer.nmr.bulletRenderList.get(id).entity;
			if(!name.contains("military") && name.contains("crate") && this.wasHitSoundTimer == 0)
	 		{
				if(this.position.y + 2F > entity.position.y 
				&& this.position.y      < entity.position.y)
				if(this.position.x + 0.9F > entity.position.x 
				&& this.position.x - 0.1F < entity.position.x)
				if(this.position.z + 1F > entity.position.z 
				&& this.position.z - 1F < entity.position.z)
				{
					for(int i =0; i < 5;++i)
					{
						if(this.planksSide[i] != -1)
						{
							if(name.contains("old"))
							{
								this.addBrokenParticles(5, "old_wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							else
							{
								this.addBrokenParticles(5, "wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							
							TheStructureWorld.TheStructureWorld.entityRenderer.nmr.bulletRenderList.get(id).entity.deleteMe = true;
							
							if(this.rand.nextInt(10) == 0)
							{
								this.planksSide[i] = -1;
								if(name.contains("old"))
								{
									 this.addBrokenParticles(1000000, "old_crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								}
								else
								{
									this.addBrokenParticles(1000000, "crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								}
							}
						}
					}		
				}
				if(this.position.y + 2F > entity.position.y 
				&& this.position.y      < entity.position.y)
				if(this.position.x + 0.1F > entity.position.x 
				&& this.position.x - 0.9F < entity.position.x)
				if(this.position.z + 1F > entity.position.z 
				&& this.position.z - 1F < entity.position.z)
				{
					for(int i =0; i < 5;++i)
					{
						if(this.planksSide1[i] != -1)
						{
							if(name.contains("old"))
							{
								this.addBrokenParticles(5, "old_wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							else
							{
								this.addBrokenParticles(5, "wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							
							TheStructureWorld.TheStructureWorld.entityRenderer.nmr.bulletRenderList.get(id).entity.deleteMe = true;
							
							if(this.rand.nextInt(10) == 0)
							{
								this.planksSide1[i] = -1;
								if(name.contains("old"))
								{
									 this.addBrokenParticles(1000000, "old_crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								}
								else
								{
									this.addBrokenParticles(1000000, "crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								}
							}
						}
					}		
				}
				if(this.position.y + 2F > entity.position.y 
				&& this.position.y      < entity.position.y)
				if(this.position.x + 1F > entity.position.x 
				&& this.position.x - 1F < entity.position.x)
				if(this.position.z + 0.1F > entity.position.z 
				&& this.position.z - 0.9F < entity.position.z)
				{
					for(int i =0; i < 5;++i)
					{
						 if(this.planksSide3[i] != -1)
						 {
							if(name.contains("old"))
							{
								this.addBrokenParticles(5, "old_wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							else
							{
								this.addBrokenParticles(5, "wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							
							TheStructureWorld.TheStructureWorld.entityRenderer.nmr.bulletRenderList.get(id).entity.deleteMe = true;
							
							if(this.rand.nextInt(10) == 0)
						    {
						    	this.planksSide3[i] = -1;
						    	if(name.contains("old"))
								{
						    		this.addBrokenParticles(1000000, "old_crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								}
						    	else
						    	{
						    		this.addBrokenParticles(1000000, "crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
						    	}
							}
						}
					}		
				}
				if(this.position.y + 2F > entity.position.y 
				&& this.position.y      < entity.position.y)
				if(this.position.x + 1F > entity.position.x 
				&& this.position.x - 1F < entity.position.x)
				if(this.position.z + 0.9F > entity.position.z 
				&& this.position.z - 0.1F < entity.position.z)
				{
					for(int i =0; i < 5;++i)
					{
						if(this.planksSide2[i] != -1)
						{
							if(name.contains("old"))
							{
								this.addBrokenParticles(5, "old_wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							else
							{
								this.addBrokenParticles(5, "wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							
							TheStructureWorld.TheStructureWorld.entityRenderer.nmr.bulletRenderList.get(id).entity.deleteMe = true;
							
							if(this.rand.nextInt(10) == 0)
							{
								 this.planksSide2[i] = -1;
								 if(name.contains("old"))
								 {
								    this.addBrokenParticles(1000000, "old_crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								 }
								 else
								 {
									 this.addBrokenParticles(1000000, "crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
								 }
							}
						}
					}		
				}				
				if(this.position.y + 2.2F > entity.position.y 
				&& this.position.y + 1.3F < entity.position.y)
				if(this.position.x + 1F > entity.position.x 
				&& this.position.x - 1F < entity.position.x)
				if(this.position.z + 1F > entity.position.z 
				&& this.position.z - 1F < entity.position.z)
				{
					AudioMaster.soundList.playHitWoodSound(this.getPosition());
					for(int i =0; i < 5;++i)
				    {
				    	if(this.planks[i] != -1)
				    	{
				    		if(name.contains("old"))
							{
								this.addBrokenParticles(5, "old_wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
							else
							{
								this.addBrokenParticles(5, "wood",new String[]{"wood_splint"}, new int[]{1,1}, new float[]{0.4F,0.5F});
							}
				    		if(this.rand.nextInt(10) == 0)
				    		{
				    			this.planks[i] = -1;
				    			if(name.contains("old"))
						 		{
				    				this.addBrokenParticles(1000000, "old_crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
						 		}
				    			else
				    			{
				    				this.addBrokenParticles(1000000, "crate",new String[]{"plank"}, new int[]{1,1},  new float[]{1F,1F});
				    			}
						 	}
				    	}
				    }		
				}
	 		}
			
			if(name.contains("military_crate") && this.wasHitSoundTimer == 0)
	 		{
				if(this.position.y + 2F > entity.position.y 
				&& this.position.y      < entity.position.y)
				if(this.position.x + 1F > entity.position.x 
				&& this.position.x - 1F < entity.position.x)
				if(this.position.z + 1F > entity.position.z 
				&& this.position.z - 1F < entity.position.z)
			 	{
		 			AudioMaster.soundList.playHitMetalSound(this.getPosition());
		    		this.wasHitSoundTimer = 200;
		 		}
		 	}	
	  }
	}
	
	private void dropLoot()
	{
		if(this.name.contains("old"))
 		{
 			if(this.rand.nextInt(2) == 0)
	 		{
	 		}
	 		else
	 		{
	 			//TheStructureWorld.TheStructureWorld.entityRenderer.nmr.spawnEntity(new EntityRenderAmmoBag("Gadgets/SupplySignaller",  2F,2F,"Gadgets/SupplySignaller",new float[]{1,1,0,0},new float[]{this.position.x,this.position.y,this.position.z},-0.15F,0,0,0,0.5F));     	
	 		}  
 		}
		else if(this.rand.nextInt(5) == 0)
 		{
			//TheStructureWorld.TheStructureWorld.entityRenderer.nmr.spawnEntity(new EntityRenderAmmoBag("Gadgets/SupplySignaller",  2F,2F,"Gadgets/SupplySignaller",new float[]{1,1,0,0},new float[]{this.position.x,this.position.y,this.position.z},-0.15F,0,0,0,0.5F));     	
		}
		else if(this.rand.nextInt(3) == 0)
 		{
			//TheStructureWorld.TheStructureWorld.entityRenderer.nmr.spawnEntity(new EntityRenderAmmoBag("crates/AmmoBag",  2F,2F,"AmmoBag_Snow_Camo",new float[]{1,1,0,0},new float[]{237,166,200},0,0,0,0, 0.8F));     	
 		}   
	}
	
	private boolean detailedRender = false;

	
	 public void inWaterAnimation()
	 {
		 if(this.inWater && TheStructureWorld.TheStructureWorld.thePlayer.hasMoved)
		 {
			 EntityPlayer player = TheStructureWorld.TheStructureWorld.thePlayer;
			 if(this.position.z > player.posZ - (0.9F * this.scale) && this.position.z < player.posZ + (0.9F * this.scale) && this.position.y > player.posY - (1.3F * this.scale) && this.position.y < player.posY + (1.3F * this.scale) && this.position.x > player.posX - (1.2F * this.scale) && this.position.x < player.posX + (1.2F * this.scale))
			 {
				 this.moveWaterX = (float) player.motionX;
				 this.moveWaterZ = (float) player.motionZ;
				 
				 if(this.moveWaterX > 0.06F)
				 {
					 this.moveWaterX = 0.06F;
				 }
				 else  if(this.moveWaterX < -0.06F)
				 {
					 this.moveWaterX = -0.06F;
				 }
				 
				 if(this.moveWaterZ > 0.06F)
				 {
					 this.moveWaterZ = 0.06F;
				 }
				 else if(this.moveWaterZ < -0.06F)
				 {
					 this.moveWaterZ = -0.06F;
				 }
			 }
		  }
		 
		 if(this.moveWaterX > 0 || this.moveWaterX < 0 || this.moveWaterZ > 0 || this.moveWaterZ < 0)
		 {	
			 this.position.x += this.moveWaterX;
			 this.position.z += this.moveWaterZ;
			 if(this.moveWaterX > 0F)
			 {
				 this.moveWaterX -= 0.001F;
			 }
			 else  if(this.moveWaterX < 0F)
			 {
				 this.moveWaterX += 0.001F;
			 }
			 
			 if(this.moveWaterZ > 0F)
			 {
				 this.moveWaterZ -= 0.001F;
			 }
			 else  if(this.moveWaterZ < 0F)
			 {
				 this.moveWaterZ += 0.001F;
			 }
			 
			 if(this.moveWaterX > -0.0001F && this.moveWaterX < 0.0001F)
			 {
				 this.moveWaterX = 0F;
			 }
			 if(this.moveWaterZ > -0.0001F && this.moveWaterZ < 0.0001F)
			 {
				 this.moveWaterZ = 0F;
			 }
		 } 
		 
		 if(!this.inWater && this.moveWaterX != 0)
		 {
			 this.timer = 0;
		 }
		 
		 if(this.inWater)
		 {	
		 
		 ++this.timer; 
		 if(this.timer < 200+this.waveY)
		 {
			 if(this.startX){this.rotX += this.floatAnimation*30;}
			 if(!this.startX){this.rotX -= this.floatAnimation*30;}
		 }
		 else if(this.timer < 400+this.waveY)
		 {
			 if(this.startX){this.rotX -= this.floatAnimation*30;}
			 if(!this.startX){this.rotX += this.floatAnimation*30;}
		 }
		 
		 if(this.timer < 200+this.waveY)
		 {
			 if(this.startZ){this.rotZ += this.floatAnimation*30;}
			 if(!this.startZ){this.rotZ -= this.floatAnimation*30;}
		 }
		 else if(this.timer < 400+this.waveY)
		 {
			 if(this.startZ){this.rotZ -= this.floatAnimation*30;}
			 if(!this.startZ){this.rotZ += this.floatAnimation*30;}
		 } 

		 if(this.floatUpTimer > 0)
		 {
			 --this.floatUpTimer;
		 }

		 if(this.oldYPosition > this.position.y)
		 {
			 this.oldYPosition = 0;
			 this.timer = 0;
			 this.floatAnimation = 0.0001F*TheStructureWorld.TheStructureWorld.thePlayer.worldObj.StructureWorldInfo.WindStrengh;
			 this.floatAnimationUpDown =  0.0000005F*TheStructureWorld.TheStructureWorld.thePlayer.worldObj.StructureWorldInfo.WindStrengh;
		 }
		 
		 if(this.timer < 200+this.waveY)
		 {
			 if(this.oldYPosition == 0)
			 {
				 this.oldYPosition = this.position.y;
			 }
			 if(this.position.y < 154F)
			 {
				 for(int i = 0;i < 3 * ((int)((154F - this.position.y) * 5));++i)
				 {
					 this.setY(this.position.y += this.floatAnimation);
				 }
			 }
			 else
			 {
				 this.setY(this.position.y += this.floatAnimation);
			 }
			 
			 this.floatAnimation -= this.floatAnimationUpDown; 
	     }
		 else
		 {
			 this.setY(this.position.y -= (this.floatAnimation));
			 this.floatAnimation += this.floatAnimationUpDown;	
		 }

		 }
	 }
}