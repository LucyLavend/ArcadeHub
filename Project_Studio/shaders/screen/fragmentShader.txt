#version 150

in vec2 pass_textureCoords;
uniform vec2 NearFar;
uniform sampler2D screen;
uniform sampler2D refraction;
uniform sampler2D depth;
out vec4 out_color;
uniform int addScreenEffects;
uniform int hasBlurr;

uniform float brightnessEffect = 0;
uniform float brightness = 0;
uniform float contrast = 0.1;
uniform float saturation = 1;


void main(void)
{
      float xCoord = pass_textureCoords.x;
      float yCoord = pass_textureCoords.y;
      vec4 screenColors = (texture(screen, pass_textureCoords));
      
      vec4 screenColors2 = (texture(depth, pass_textureCoords));
    
      vec3 luminanceWeights = vec3(0.299, 0.587, 0.114);
      float luminance = dot(screenColors.rgb, luminanceWeights);

      out_color = mix(vec4(luminance), screenColors, saturation);
      
      out_color.rgb = (out_color.rgb - 0.5) * (1.0 + contrast) + 0.5;

      if(hasBlurr == 1 && addScreenEffects == 0)
      {
            for(int i = 0;i < 5;++i)
            {
                  vec4 screenColorsBlurr = (texture(screen, vec2(xCoord + (i / 1000.0),yCoord)));
                  out_color += screenColorsBlurr;
                  screenColorsBlurr = (texture(screen, vec2(xCoord,yCoord + (i / 1000.0))));
                  out_color += screenColorsBlurr;

                  screenColorsBlurr = (texture(screen, vec2(xCoord - (i / 1000.0),yCoord)));
                  out_color += screenColorsBlurr;
                  screenColorsBlurr = (texture(screen, vec2(xCoord,yCoord - (i / 1000.0))));
                  out_color += screenColorsBlurr;
                  out_color/= 8;
            }
      }

      if(addScreenEffects == 0)
      {
            out_color.rgb *= brightnessEffect;
      }
      out_color.rgb *= brightness;
 }


